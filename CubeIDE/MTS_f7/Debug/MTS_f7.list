
MTS_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a014  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800a1dc  0800a1dc  0000b1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a608  0800a608  0000c05c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a608  0800a608  0000b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a610  0800a610  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a610  0800a610  0000b610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a614  0800a614  0000b614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800a618  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000005c  0800a674  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800a674  0000c28c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa6d  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221e  00000000  00000000  0001baf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0001dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a35  00000000  00000000  0001ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026998  00000000  00000000  0001f465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f4c  00000000  00000000  00045dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f079d  00000000  00000000  00059d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a4e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b0c  00000000  00000000  0014a52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a1c4 	.word	0x0800a1c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	0800a1c4 	.word	0x0800a1c4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__gedf2>:
 8000580:	f04f 3cff 	mov.w	ip, #4294967295
 8000584:	e006      	b.n	8000594 <__cmpdf2+0x4>
 8000586:	bf00      	nop

08000588 <__ledf2>:
 8000588:	f04f 0c01 	mov.w	ip, #1
 800058c:	e002      	b.n	8000594 <__cmpdf2+0x4>
 800058e:	bf00      	nop

08000590 <__cmpdf2>:
 8000590:	f04f 0c01 	mov.w	ip, #1
 8000594:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000598:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800059c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005a4:	bf18      	it	ne
 80005a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005aa:	d01b      	beq.n	80005e4 <__cmpdf2+0x54>
 80005ac:	b001      	add	sp, #4
 80005ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005b2:	bf0c      	ite	eq
 80005b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b8:	ea91 0f03 	teqne	r1, r3
 80005bc:	bf02      	ittt	eq
 80005be:	ea90 0f02 	teqeq	r0, r2
 80005c2:	2000      	moveq	r0, #0
 80005c4:	4770      	bxeq	lr
 80005c6:	f110 0f00 	cmn.w	r0, #0
 80005ca:	ea91 0f03 	teq	r1, r3
 80005ce:	bf58      	it	pl
 80005d0:	4299      	cmppl	r1, r3
 80005d2:	bf08      	it	eq
 80005d4:	4290      	cmpeq	r0, r2
 80005d6:	bf2c      	ite	cs
 80005d8:	17d8      	asrcs	r0, r3, #31
 80005da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005de:	f040 0001 	orr.w	r0, r0, #1
 80005e2:	4770      	bx	lr
 80005e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ec:	d102      	bne.n	80005f4 <__cmpdf2+0x64>
 80005ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005f2:	d107      	bne.n	8000604 <__cmpdf2+0x74>
 80005f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d1d6      	bne.n	80005ac <__cmpdf2+0x1c>
 80005fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000602:	d0d3      	beq.n	80005ac <__cmpdf2+0x1c>
 8000604:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <__aeabi_cdrcmple>:
 800060c:	4684      	mov	ip, r0
 800060e:	4610      	mov	r0, r2
 8000610:	4662      	mov	r2, ip
 8000612:	468c      	mov	ip, r1
 8000614:	4619      	mov	r1, r3
 8000616:	4663      	mov	r3, ip
 8000618:	e000      	b.n	800061c <__aeabi_cdcmpeq>
 800061a:	bf00      	nop

0800061c <__aeabi_cdcmpeq>:
 800061c:	b501      	push	{r0, lr}
 800061e:	f7ff ffb7 	bl	8000590 <__cmpdf2>
 8000622:	2800      	cmp	r0, #0
 8000624:	bf48      	it	mi
 8000626:	f110 0f00 	cmnmi.w	r0, #0
 800062a:	bd01      	pop	{r0, pc}

0800062c <__aeabi_dcmpeq>:
 800062c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000630:	f7ff fff4 	bl	800061c <__aeabi_cdcmpeq>
 8000634:	bf0c      	ite	eq
 8000636:	2001      	moveq	r0, #1
 8000638:	2000      	movne	r0, #0
 800063a:	f85d fb08 	ldr.w	pc, [sp], #8
 800063e:	bf00      	nop

08000640 <__aeabi_dcmplt>:
 8000640:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000644:	f7ff ffea 	bl	800061c <__aeabi_cdcmpeq>
 8000648:	bf34      	ite	cc
 800064a:	2001      	movcc	r0, #1
 800064c:	2000      	movcs	r0, #0
 800064e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000652:	bf00      	nop

08000654 <__aeabi_dcmple>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff ffe0 	bl	800061c <__aeabi_cdcmpeq>
 800065c:	bf94      	ite	ls
 800065e:	2001      	movls	r0, #1
 8000660:	2000      	movhi	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmpge>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffce 	bl	800060c <__aeabi_cdrcmple>
 8000670:	bf94      	ite	ls
 8000672:	2001      	movls	r0, #1
 8000674:	2000      	movhi	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmpgt>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffc4 	bl	800060c <__aeabi_cdrcmple>
 8000684:	bf34      	ite	cc
 8000686:	2001      	movcc	r0, #1
 8000688:	2000      	movcs	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_uldivmod>:
 8000690:	b953      	cbnz	r3, 80006a8 <__aeabi_uldivmod+0x18>
 8000692:	b94a      	cbnz	r2, 80006a8 <__aeabi_uldivmod+0x18>
 8000694:	2900      	cmp	r1, #0
 8000696:	bf08      	it	eq
 8000698:	2800      	cmpeq	r0, #0
 800069a:	bf1c      	itt	ne
 800069c:	f04f 31ff 	movne.w	r1, #4294967295
 80006a0:	f04f 30ff 	movne.w	r0, #4294967295
 80006a4:	f000 b96a 	b.w	800097c <__aeabi_idiv0>
 80006a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b0:	f000 f806 	bl	80006c0 <__udivmoddi4>
 80006b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006bc:	b004      	add	sp, #16
 80006be:	4770      	bx	lr

080006c0 <__udivmoddi4>:
 80006c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c4:	9d08      	ldr	r5, [sp, #32]
 80006c6:	460c      	mov	r4, r1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d14e      	bne.n	800076a <__udivmoddi4+0xaa>
 80006cc:	4694      	mov	ip, r2
 80006ce:	458c      	cmp	ip, r1
 80006d0:	4686      	mov	lr, r0
 80006d2:	fab2 f282 	clz	r2, r2
 80006d6:	d962      	bls.n	800079e <__udivmoddi4+0xde>
 80006d8:	b14a      	cbz	r2, 80006ee <__udivmoddi4+0x2e>
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	4091      	lsls	r1, r2
 80006e0:	fa20 f303 	lsr.w	r3, r0, r3
 80006e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80006e8:	4319      	orrs	r1, r3
 80006ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80006ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006f2:	fa1f f68c 	uxth.w	r6, ip
 80006f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80006fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000702:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000706:	fb04 f106 	mul.w	r1, r4, r6
 800070a:	4299      	cmp	r1, r3
 800070c:	d90a      	bls.n	8000724 <__udivmoddi4+0x64>
 800070e:	eb1c 0303 	adds.w	r3, ip, r3
 8000712:	f104 30ff 	add.w	r0, r4, #4294967295
 8000716:	f080 8112 	bcs.w	800093e <__udivmoddi4+0x27e>
 800071a:	4299      	cmp	r1, r3
 800071c:	f240 810f 	bls.w	800093e <__udivmoddi4+0x27e>
 8000720:	3c02      	subs	r4, #2
 8000722:	4463      	add	r3, ip
 8000724:	1a59      	subs	r1, r3, r1
 8000726:	fa1f f38e 	uxth.w	r3, lr
 800072a:	fbb1 f0f7 	udiv	r0, r1, r7
 800072e:	fb07 1110 	mls	r1, r7, r0, r1
 8000732:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000736:	fb00 f606 	mul.w	r6, r0, r6
 800073a:	429e      	cmp	r6, r3
 800073c:	d90a      	bls.n	8000754 <__udivmoddi4+0x94>
 800073e:	eb1c 0303 	adds.w	r3, ip, r3
 8000742:	f100 31ff 	add.w	r1, r0, #4294967295
 8000746:	f080 80fc 	bcs.w	8000942 <__udivmoddi4+0x282>
 800074a:	429e      	cmp	r6, r3
 800074c:	f240 80f9 	bls.w	8000942 <__udivmoddi4+0x282>
 8000750:	4463      	add	r3, ip
 8000752:	3802      	subs	r0, #2
 8000754:	1b9b      	subs	r3, r3, r6
 8000756:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800075a:	2100      	movs	r1, #0
 800075c:	b11d      	cbz	r5, 8000766 <__udivmoddi4+0xa6>
 800075e:	40d3      	lsrs	r3, r2
 8000760:	2200      	movs	r2, #0
 8000762:	e9c5 3200 	strd	r3, r2, [r5]
 8000766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076a:	428b      	cmp	r3, r1
 800076c:	d905      	bls.n	800077a <__udivmoddi4+0xba>
 800076e:	b10d      	cbz	r5, 8000774 <__udivmoddi4+0xb4>
 8000770:	e9c5 0100 	strd	r0, r1, [r5]
 8000774:	2100      	movs	r1, #0
 8000776:	4608      	mov	r0, r1
 8000778:	e7f5      	b.n	8000766 <__udivmoddi4+0xa6>
 800077a:	fab3 f183 	clz	r1, r3
 800077e:	2900      	cmp	r1, #0
 8000780:	d146      	bne.n	8000810 <__udivmoddi4+0x150>
 8000782:	42a3      	cmp	r3, r4
 8000784:	d302      	bcc.n	800078c <__udivmoddi4+0xcc>
 8000786:	4290      	cmp	r0, r2
 8000788:	f0c0 80f0 	bcc.w	800096c <__udivmoddi4+0x2ac>
 800078c:	1a86      	subs	r6, r0, r2
 800078e:	eb64 0303 	sbc.w	r3, r4, r3
 8000792:	2001      	movs	r0, #1
 8000794:	2d00      	cmp	r5, #0
 8000796:	d0e6      	beq.n	8000766 <__udivmoddi4+0xa6>
 8000798:	e9c5 6300 	strd	r6, r3, [r5]
 800079c:	e7e3      	b.n	8000766 <__udivmoddi4+0xa6>
 800079e:	2a00      	cmp	r2, #0
 80007a0:	f040 8090 	bne.w	80008c4 <__udivmoddi4+0x204>
 80007a4:	eba1 040c 	sub.w	r4, r1, ip
 80007a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ac:	fa1f f78c 	uxth.w	r7, ip
 80007b0:	2101      	movs	r1, #1
 80007b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80007b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007ba:	fb08 4416 	mls	r4, r8, r6, r4
 80007be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007c2:	fb07 f006 	mul.w	r0, r7, r6
 80007c6:	4298      	cmp	r0, r3
 80007c8:	d908      	bls.n	80007dc <__udivmoddi4+0x11c>
 80007ca:	eb1c 0303 	adds.w	r3, ip, r3
 80007ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80007d2:	d202      	bcs.n	80007da <__udivmoddi4+0x11a>
 80007d4:	4298      	cmp	r0, r3
 80007d6:	f200 80cd 	bhi.w	8000974 <__udivmoddi4+0x2b4>
 80007da:	4626      	mov	r6, r4
 80007dc:	1a1c      	subs	r4, r3, r0
 80007de:	fa1f f38e 	uxth.w	r3, lr
 80007e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80007e6:	fb08 4410 	mls	r4, r8, r0, r4
 80007ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007ee:	fb00 f707 	mul.w	r7, r0, r7
 80007f2:	429f      	cmp	r7, r3
 80007f4:	d908      	bls.n	8000808 <__udivmoddi4+0x148>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80007fe:	d202      	bcs.n	8000806 <__udivmoddi4+0x146>
 8000800:	429f      	cmp	r7, r3
 8000802:	f200 80b0 	bhi.w	8000966 <__udivmoddi4+0x2a6>
 8000806:	4620      	mov	r0, r4
 8000808:	1bdb      	subs	r3, r3, r7
 800080a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800080e:	e7a5      	b.n	800075c <__udivmoddi4+0x9c>
 8000810:	f1c1 0620 	rsb	r6, r1, #32
 8000814:	408b      	lsls	r3, r1
 8000816:	fa22 f706 	lsr.w	r7, r2, r6
 800081a:	431f      	orrs	r7, r3
 800081c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000820:	fa04 f301 	lsl.w	r3, r4, r1
 8000824:	ea43 030c 	orr.w	r3, r3, ip
 8000828:	40f4      	lsrs	r4, r6
 800082a:	fa00 f801 	lsl.w	r8, r0, r1
 800082e:	0c38      	lsrs	r0, r7, #16
 8000830:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000834:	fbb4 fef0 	udiv	lr, r4, r0
 8000838:	fa1f fc87 	uxth.w	ip, r7
 800083c:	fb00 441e 	mls	r4, r0, lr, r4
 8000840:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000844:	fb0e f90c 	mul.w	r9, lr, ip
 8000848:	45a1      	cmp	r9, r4
 800084a:	fa02 f201 	lsl.w	r2, r2, r1
 800084e:	d90a      	bls.n	8000866 <__udivmoddi4+0x1a6>
 8000850:	193c      	adds	r4, r7, r4
 8000852:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000856:	f080 8084 	bcs.w	8000962 <__udivmoddi4+0x2a2>
 800085a:	45a1      	cmp	r9, r4
 800085c:	f240 8081 	bls.w	8000962 <__udivmoddi4+0x2a2>
 8000860:	f1ae 0e02 	sub.w	lr, lr, #2
 8000864:	443c      	add	r4, r7
 8000866:	eba4 0409 	sub.w	r4, r4, r9
 800086a:	fa1f f983 	uxth.w	r9, r3
 800086e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000872:	fb00 4413 	mls	r4, r0, r3, r4
 8000876:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800087a:	fb03 fc0c 	mul.w	ip, r3, ip
 800087e:	45a4      	cmp	ip, r4
 8000880:	d907      	bls.n	8000892 <__udivmoddi4+0x1d2>
 8000882:	193c      	adds	r4, r7, r4
 8000884:	f103 30ff 	add.w	r0, r3, #4294967295
 8000888:	d267      	bcs.n	800095a <__udivmoddi4+0x29a>
 800088a:	45a4      	cmp	ip, r4
 800088c:	d965      	bls.n	800095a <__udivmoddi4+0x29a>
 800088e:	3b02      	subs	r3, #2
 8000890:	443c      	add	r4, r7
 8000892:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000896:	fba0 9302 	umull	r9, r3, r0, r2
 800089a:	eba4 040c 	sub.w	r4, r4, ip
 800089e:	429c      	cmp	r4, r3
 80008a0:	46ce      	mov	lr, r9
 80008a2:	469c      	mov	ip, r3
 80008a4:	d351      	bcc.n	800094a <__udivmoddi4+0x28a>
 80008a6:	d04e      	beq.n	8000946 <__udivmoddi4+0x286>
 80008a8:	b155      	cbz	r5, 80008c0 <__udivmoddi4+0x200>
 80008aa:	ebb8 030e 	subs.w	r3, r8, lr
 80008ae:	eb64 040c 	sbc.w	r4, r4, ip
 80008b2:	fa04 f606 	lsl.w	r6, r4, r6
 80008b6:	40cb      	lsrs	r3, r1
 80008b8:	431e      	orrs	r6, r3
 80008ba:	40cc      	lsrs	r4, r1
 80008bc:	e9c5 6400 	strd	r6, r4, [r5]
 80008c0:	2100      	movs	r1, #0
 80008c2:	e750      	b.n	8000766 <__udivmoddi4+0xa6>
 80008c4:	f1c2 0320 	rsb	r3, r2, #32
 80008c8:	fa20 f103 	lsr.w	r1, r0, r3
 80008cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d0:	fa24 f303 	lsr.w	r3, r4, r3
 80008d4:	4094      	lsls	r4, r2
 80008d6:	430c      	orrs	r4, r1
 80008d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e0:	fa1f f78c 	uxth.w	r7, ip
 80008e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e8:	fb08 3110 	mls	r1, r8, r0, r3
 80008ec:	0c23      	lsrs	r3, r4, #16
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb00 f107 	mul.w	r1, r0, r7
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x24c>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000902:	d22c      	bcs.n	800095e <__udivmoddi4+0x29e>
 8000904:	4299      	cmp	r1, r3
 8000906:	d92a      	bls.n	800095e <__udivmoddi4+0x29e>
 8000908:	3802      	subs	r0, #2
 800090a:	4463      	add	r3, ip
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f1f8 	udiv	r1, r3, r8
 8000914:	fb08 3311 	mls	r3, r8, r1, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb01 f307 	mul.w	r3, r1, r7
 8000920:	42a3      	cmp	r3, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x276>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f101 36ff 	add.w	r6, r1, #4294967295
 800092c:	d213      	bcs.n	8000956 <__udivmoddi4+0x296>
 800092e:	42a3      	cmp	r3, r4
 8000930:	d911      	bls.n	8000956 <__udivmoddi4+0x296>
 8000932:	3902      	subs	r1, #2
 8000934:	4464      	add	r4, ip
 8000936:	1ae4      	subs	r4, r4, r3
 8000938:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800093c:	e739      	b.n	80007b2 <__udivmoddi4+0xf2>
 800093e:	4604      	mov	r4, r0
 8000940:	e6f0      	b.n	8000724 <__udivmoddi4+0x64>
 8000942:	4608      	mov	r0, r1
 8000944:	e706      	b.n	8000754 <__udivmoddi4+0x94>
 8000946:	45c8      	cmp	r8, r9
 8000948:	d2ae      	bcs.n	80008a8 <__udivmoddi4+0x1e8>
 800094a:	ebb9 0e02 	subs.w	lr, r9, r2
 800094e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000952:	3801      	subs	r0, #1
 8000954:	e7a8      	b.n	80008a8 <__udivmoddi4+0x1e8>
 8000956:	4631      	mov	r1, r6
 8000958:	e7ed      	b.n	8000936 <__udivmoddi4+0x276>
 800095a:	4603      	mov	r3, r0
 800095c:	e799      	b.n	8000892 <__udivmoddi4+0x1d2>
 800095e:	4630      	mov	r0, r6
 8000960:	e7d4      	b.n	800090c <__udivmoddi4+0x24c>
 8000962:	46d6      	mov	lr, sl
 8000964:	e77f      	b.n	8000866 <__udivmoddi4+0x1a6>
 8000966:	4463      	add	r3, ip
 8000968:	3802      	subs	r0, #2
 800096a:	e74d      	b.n	8000808 <__udivmoddi4+0x148>
 800096c:	4606      	mov	r6, r0
 800096e:	4623      	mov	r3, r4
 8000970:	4608      	mov	r0, r1
 8000972:	e70f      	b.n	8000794 <__udivmoddi4+0xd4>
 8000974:	3e02      	subs	r6, #2
 8000976:	4463      	add	r3, ip
 8000978:	e730      	b.n	80007dc <__udivmoddi4+0x11c>
 800097a:	bf00      	nop

0800097c <__aeabi_idiv0>:
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <inverter_matriz>:
#include <math.h>
#include "calib.h"


void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8000980:	b480      	push	{r7}
 8000982:	b08b      	sub	sp, #44	@ 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
 800098e:	e02c      	b.n	80009ea <inverter_matriz+0x6a>
        for (int j = 0; j < N; j++) {
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
 8000994:	e023      	b.n	80009de <inverter_matriz+0x5e>
            if (i == j) {
 8000996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	429a      	cmp	r2, r3
 800099c:	d10e      	bne.n	80009bc <inverter_matriz+0x3c>
                inversa[i][j] = 1;
 800099e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009a0:	4613      	mov	r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	461a      	mov	r2, r3
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	441a      	add	r2, r3
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	e00d      	b.n	80009d8 <inverter_matriz+0x58>
            } else {
                inversa[i][j] = 0;
 80009bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009be:	4613      	mov	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	461a      	mov	r2, r3
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	441a      	add	r2, r3
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4413      	add	r3, r2
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++) {
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	3301      	adds	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	2b08      	cmp	r3, #8
 80009e2:	ddd8      	ble.n	8000996 <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 80009e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e6:	3301      	adds	r3, #1
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	ddcf      	ble.n	8000990 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	e0d1      	b.n	8000b9a <inverter_matriz+0x21a>
    {
        float pivot = matriz[i][i];
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	4613      	mov	r3, r2
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	441a      	add	r2, r3
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	e03e      	b.n	8000a94 <inverter_matriz+0x114>
        {
            matriz[i][j] /= pivot;
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	4413      	add	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	461a      	mov	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	441a      	add	r2, r3
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	edd3 6a00 	vldr	s13, [r3]
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	4613      	mov	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	4413      	add	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	441a      	add	r2, r3
 8000a40:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	edc3 7a00 	vstr	s15, [r3]
            inversa[i][j] /= pivot;
 8000a52:	69fa      	ldr	r2, [r7, #28]
 8000a54:	4613      	mov	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	4413      	add	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	441a      	add	r2, r3
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	edd3 6a00 	vldr	s13, [r3]
 8000a6c:	69fa      	ldr	r2, [r7, #28]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	461a      	mov	r2, r3
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	441a      	add	r2, r3
 8000a7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	3301      	adds	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	ddbd      	ble.n	8000a16 <inverter_matriz+0x96>
        }

        for (int k = 0; k < N; k++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e076      	b.n	8000b8e <inverter_matriz+0x20e>
        {
            if (k != i)
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d06f      	beq.n	8000b88 <inverter_matriz+0x208>
            {
                float fator = matriz[k][i];
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	441a      	add	r2, r3
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	e05c      	b.n	8000b82 <inverter_matriz+0x202>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	4613      	mov	r3, r2
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	441a      	add	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	ed93 7a00 	vldr	s14, [r3]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	4413      	add	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	461a      	mov	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	441a      	add	r2, r3
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	edd3 6a00 	vldr	s13, [r3]
 8000afc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	4613      	mov	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	461a      	mov	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	441a      	add	r2, r3
 8000b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	edc3 7a00 	vstr	s15, [r3]
                    inversa[k][j] -= fator * inversa[i][j];
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	4613      	mov	r3, r2
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	4413      	add	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	441a      	add	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4413      	add	r3, r2
 8000b38:	ed93 7a00 	vldr	s14, [r3]
 8000b3c:	69fa      	ldr	r2, [r7, #28]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	461a      	mov	r2, r3
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	441a      	add	r2, r3
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	edd3 6a00 	vldr	s13, [r3]
 8000b56:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	4613      	mov	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	441a      	add	r2, r3
 8000b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	edc3 7a00 	vstr	s15, [r3]
                for (int j = 0; j < N; j++)
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	dd9f      	ble.n	8000ac8 <inverter_matriz+0x148>
        for (int k = 0; k < N; k++)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	dd85      	ble.n	8000aa0 <inverter_matriz+0x120>
    for (int i = 0; i < N; i++)
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	3301      	adds	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	f77f af2a 	ble.w	80009f6 <inverter_matriz+0x76>
                }
            }
        }
    }
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	372c      	adds	r7, #44	@ 0x2c
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	f5ad 3db7 	sub.w	sp, sp, #93696	@ 0x16e00
 8000bb6:	b0fa      	sub	sp, #488	@ 0x1e8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	f607 74e8 	addw	r4, r7, #4072	@ 0xfe8
 8000bbe:	f6a4 74dc 	subw	r4, r4, #4060	@ 0xfdc
 8000bc2:	6020      	str	r0, [r4, #0]
 8000bc4:	f607 70e8 	addw	r0, r7, #4072	@ 0xfe8
 8000bc8:	f5a0 607e 	sub.w	r0, r0, #4064	@ 0xfe0
 8000bcc:	6001      	str	r1, [r0, #0]
 8000bce:	f607 71e8 	addw	r1, r7, #4072	@ 0xfe8
 8000bd2:	f6a1 71e4 	subw	r1, r1, #4068	@ 0xfe4
 8000bd6:	600a      	str	r2, [r1, #0]
 8000bd8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8000bdc:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8000be0:	6013      	str	r3, [r2, #0]
    uint8_t passo = 0, loop = 1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	4a54      	ldr	r2, [pc, #336]	@ (8000d38 <NLLS+0x188>)
 8000be6:	443a      	add	r2, r7
 8000be8:	7013      	strb	r3, [r2, #0]
 8000bea:	2301      	movs	r3, #1
 8000bec:	4a53      	ldr	r2, [pc, #332]	@ (8000d3c <NLLS+0x18c>)
 8000bee:	443a      	add	r2, r7
 8000bf0:	7013      	strb	r3, [r2, #0]
    float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 8000bf2:	4b53      	ldr	r3, [pc, #332]	@ (8000d40 <NLLS+0x190>)
 8000bf4:	4c53      	ldr	r4, [pc, #332]	@ (8000d44 <NLLS+0x194>)
 8000bf6:	443c      	add	r4, r7
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	6023      	str	r3, [r4, #0]
    float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
    float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

    for (int i=0; i < tam; i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	4a4f      	ldr	r2, [pc, #316]	@ (8000d48 <NLLS+0x198>)
 8000c0a:	443a      	add	r2, r7
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e012      	b.n	8000c36 <NLLS+0x86>
    {
        Be[i] = 1;
 8000c10:	4b4e      	ldr	r3, [pc, #312]	@ (8000d4c <NLLS+0x19c>)
 8000c12:	443b      	add	r3, r7
 8000c14:	f5a3 72fe 	sub.w	r2, r3, #508	@ 0x1fc
 8000c18:	4b4b      	ldr	r3, [pc, #300]	@ (8000d48 <NLLS+0x198>)
 8000c1a:	443b      	add	r3, r7
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000c26:	601a      	str	r2, [r3, #0]
    for (int i=0; i < tam; i++)
 8000c28:	4b47      	ldr	r3, [pc, #284]	@ (8000d48 <NLLS+0x198>)
 8000c2a:	443b      	add	r3, r7
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	4a45      	ldr	r2, [pc, #276]	@ (8000d48 <NLLS+0x198>)
 8000c32:	443a      	add	r2, r7
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b44      	ldr	r3, [pc, #272]	@ (8000d48 <NLLS+0x198>)
 8000c38:	443b      	add	r3, r7
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f240 4256 	movw	r2, #1110	@ 0x456
 8000c40:	4293      	cmp	r3, r2
 8000c42:	dde5      	ble.n	8000c10 <NLLS+0x60>
    }

    while(loop == 1)
 8000c44:	f003 b995 	b.w	8003f72 <NLLS+0x33c2>
    {
        sx = p0[0];
 8000c48:	4b3e      	ldr	r3, [pc, #248]	@ (8000d44 <NLLS+0x194>)
 8000c4a:	443b      	add	r3, r7
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a40      	ldr	r2, [pc, #256]	@ (8000d50 <NLLS+0x1a0>)
 8000c50:	443a      	add	r2, r7
 8000c52:	6013      	str	r3, [r2, #0]
        sy = p0[1];
 8000c54:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <NLLS+0x1a4>)
 8000c56:	443b      	add	r3, r7
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d58 <NLLS+0x1a8>)
 8000c5c:	443a      	add	r2, r7
 8000c5e:	6013      	str	r3, [r2, #0]
        sz = p0[2];
 8000c60:	4b3e      	ldr	r3, [pc, #248]	@ (8000d5c <NLLS+0x1ac>)
 8000c62:	443b      	add	r3, r7
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a3e      	ldr	r2, [pc, #248]	@ (8000d60 <NLLS+0x1b0>)
 8000c68:	443a      	add	r2, r7
 8000c6a:	6013      	str	r3, [r2, #0]
        bx = p0[3];
 8000c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d64 <NLLS+0x1b4>)
 8000c6e:	443b      	add	r3, r7
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a3d      	ldr	r2, [pc, #244]	@ (8000d68 <NLLS+0x1b8>)
 8000c74:	443a      	add	r2, r7
 8000c76:	6013      	str	r3, [r2, #0]
        by = p0[4];
 8000c78:	4b3c      	ldr	r3, [pc, #240]	@ (8000d6c <NLLS+0x1bc>)
 8000c7a:	443b      	add	r3, r7
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a3c      	ldr	r2, [pc, #240]	@ (8000d70 <NLLS+0x1c0>)
 8000c80:	443a      	add	r2, r7
 8000c82:	6013      	str	r3, [r2, #0]
        bz = p0[5];
 8000c84:	4b3b      	ldr	r3, [pc, #236]	@ (8000d74 <NLLS+0x1c4>)
 8000c86:	443b      	add	r3, r7
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d78 <NLLS+0x1c8>)
 8000c8c:	443a      	add	r2, r7
 8000c8e:	6013      	str	r3, [r2, #0]
        rho = p0[6];
 8000c90:	4b3a      	ldr	r3, [pc, #232]	@ (8000d7c <NLLS+0x1cc>)
 8000c92:	443b      	add	r3, r7
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a3a      	ldr	r2, [pc, #232]	@ (8000d80 <NLLS+0x1d0>)
 8000c98:	443a      	add	r2, r7
 8000c9a:	6013      	str	r3, [r2, #0]
        phi = p0[7];
 8000c9c:	4b39      	ldr	r3, [pc, #228]	@ (8000d84 <NLLS+0x1d4>)
 8000c9e:	443b      	add	r3, r7
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a39      	ldr	r2, [pc, #228]	@ (8000d88 <NLLS+0x1d8>)
 8000ca4:	443a      	add	r2, r7
 8000ca6:	6013      	str	r3, [r2, #0]
        lambida = p0[8];
 8000ca8:	4b38      	ldr	r3, [pc, #224]	@ (8000d8c <NLLS+0x1dc>)
 8000caa:	443b      	add	r3, r7
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a38      	ldr	r2, [pc, #224]	@ (8000d90 <NLLS+0x1e0>)
 8000cb0:	443a      	add	r2, r7
 8000cb2:	6013      	str	r3, [r2, #0]

        sin_phi = sinf(phi);
 8000cb4:	4b34      	ldr	r3, [pc, #208]	@ (8000d88 <NLLS+0x1d8>)
 8000cb6:	443b      	add	r3, r7
 8000cb8:	ed93 0a00 	vldr	s0, [r3]
 8000cbc:	f008 fd4c 	bl	8009758 <sinf>
 8000cc0:	4b34      	ldr	r3, [pc, #208]	@ (8000d94 <NLLS+0x1e4>)
 8000cc2:	443b      	add	r3, r7
 8000cc4:	ed83 0a00 	vstr	s0, [r3]
        sin_rho = sinf(rho);
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <NLLS+0x1d0>)
 8000cca:	443b      	add	r3, r7
 8000ccc:	ed93 0a00 	vldr	s0, [r3]
 8000cd0:	f008 fd42 	bl	8009758 <sinf>
 8000cd4:	4b30      	ldr	r3, [pc, #192]	@ (8000d98 <NLLS+0x1e8>)
 8000cd6:	443b      	add	r3, r7
 8000cd8:	ed83 0a00 	vstr	s0, [r3]
        sin_lambda = sinf(lambida);
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <NLLS+0x1e0>)
 8000cde:	443b      	add	r3, r7
 8000ce0:	ed93 0a00 	vldr	s0, [r3]
 8000ce4:	f008 fd38 	bl	8009758 <sinf>
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d9c <NLLS+0x1ec>)
 8000cea:	443b      	add	r3, r7
 8000cec:	ed83 0a00 	vstr	s0, [r3]
        cos_phi = cosf(phi);
 8000cf0:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <NLLS+0x1d8>)
 8000cf2:	443b      	add	r3, r7
 8000cf4:	ed93 0a00 	vldr	s0, [r3]
 8000cf8:	f008 fce2 	bl	80096c0 <cosf>
 8000cfc:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <NLLS+0x1f0>)
 8000cfe:	443b      	add	r3, r7
 8000d00:	ed83 0a00 	vstr	s0, [r3]
        cos_rho = cosf(rho);
 8000d04:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <NLLS+0x1d0>)
 8000d06:	443b      	add	r3, r7
 8000d08:	ed93 0a00 	vldr	s0, [r3]
 8000d0c:	f008 fcd8 	bl	80096c0 <cosf>
 8000d10:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <NLLS+0x1f4>)
 8000d12:	443b      	add	r3, r7
 8000d14:	ed83 0a00 	vstr	s0, [r3]
        cos_lambda = cosf(lambida);
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <NLLS+0x1e0>)
 8000d1a:	443b      	add	r3, r7
 8000d1c:	ed93 0a00 	vldr	s0, [r3]
 8000d20:	f008 fcce 	bl	80096c0 <cosf>
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <NLLS+0x1f8>)
 8000d26:	443b      	add	r3, r7
 8000d28:	ed83 0a00 	vstr	s0, [r3]

        for(int i=0; i < tam; i++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dac <NLLS+0x1fc>)
 8000d30:	443a      	add	r2, r7
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	f002 be56 	b.w	80039e4 <NLLS+0x2e34>
 8000d38:	00016fe7 	.word	0x00016fe7
 8000d3c:	00016fe6 	.word	0x00016fe6
 8000d40:	0800a1dc 	.word	0x0800a1dc
 8000d44:	00016f48 	.word	0x00016f48
 8000d48:	00016fb4 	.word	0x00016fb4
 8000d4c:	00015fe8 	.word	0x00015fe8
 8000d50:	00016fe0 	.word	0x00016fe0
 8000d54:	00016f4c 	.word	0x00016f4c
 8000d58:	00016fdc 	.word	0x00016fdc
 8000d5c:	00016f50 	.word	0x00016f50
 8000d60:	00016fd8 	.word	0x00016fd8
 8000d64:	00016f54 	.word	0x00016f54
 8000d68:	00016fd4 	.word	0x00016fd4
 8000d6c:	00016f58 	.word	0x00016f58
 8000d70:	00016fd0 	.word	0x00016fd0
 8000d74:	00016f5c 	.word	0x00016f5c
 8000d78:	00016fcc 	.word	0x00016fcc
 8000d7c:	00016f60 	.word	0x00016f60
 8000d80:	00016fc8 	.word	0x00016fc8
 8000d84:	00016f64 	.word	0x00016f64
 8000d88:	00016fc4 	.word	0x00016fc4
 8000d8c:	00016f68 	.word	0x00016f68
 8000d90:	00016fc0 	.word	0x00016fc0
 8000d94:	00016f84 	.word	0x00016f84
 8000d98:	00016f80 	.word	0x00016f80
 8000d9c:	00016f7c 	.word	0x00016f7c
 8000da0:	00016f78 	.word	0x00016f78
 8000da4:	00016f74 	.word	0x00016f74
 8000da8:	00016f70 	.word	0x00016f70
 8000dac:	00016fb0 	.word	0x00016fb0
        {
            f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 8000db0:	4bbf      	ldr	r3, [pc, #764]	@ (80010b0 <NLLS+0x500>)
 8000db2:	443b      	add	r3, r7
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8000dbc:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	ed93 7a00 	vldr	s14, [r3]
 8000dc8:	4bba      	ldr	r3, [pc, #744]	@ (80010b4 <NLLS+0x504>)
 8000dca:	443b      	add	r3, r7
 8000dcc:	edd3 7a00 	vldr	s15, [r3]
 8000dd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dd4:	4bb6      	ldr	r3, [pc, #728]	@ (80010b0 <NLLS+0x500>)
 8000dd6:	443b      	add	r3, r7
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8000de0:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	edd3 6a00 	vldr	s13, [r3]
 8000dec:	4bb1      	ldr	r3, [pc, #708]	@ (80010b4 <NLLS+0x504>)
 8000dee:	443b      	add	r3, r7
 8000df0:	edd3 7a00 	vldr	s15, [r3]
 8000df4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000df8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000dfc:	4bae      	ldr	r3, [pc, #696]	@ (80010b8 <NLLS+0x508>)
 8000dfe:	443b      	add	r3, r7
 8000e00:	edd3 7a00 	vldr	s15, [r3]
 8000e04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e0c:	4ba8      	ldr	r3, [pc, #672]	@ (80010b0 <NLLS+0x500>)
 8000e0e:	443b      	add	r3, r7
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8000e18:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	edd3 6a00 	vldr	s13, [r3]
 8000e24:	4ba5      	ldr	r3, [pc, #660]	@ (80010bc <NLLS+0x50c>)
 8000e26:	443b      	add	r3, r7
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e30:	4ba1      	ldr	r3, [pc, #644]	@ (80010b8 <NLLS+0x508>)
 8000e32:	443b      	add	r3, r7
 8000e34:	edd3 7a00 	vldr	s15, [r3]
 8000e38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e3c:	4ba0      	ldr	r3, [pc, #640]	@ (80010c0 <NLLS+0x510>)
 8000e3e:	443b      	add	r3, r7
 8000e40:	ed93 6a00 	vldr	s12, [r3]
 8000e44:	4b9f      	ldr	r3, [pc, #636]	@ (80010c4 <NLLS+0x514>)
 8000e46:	443b      	add	r3, r7
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000e50:	4b97      	ldr	r3, [pc, #604]	@ (80010b0 <NLLS+0x500>)
 8000e52:	443b      	add	r3, r7
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8000e5c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8000e60:	6812      	ldr	r2, [r2, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	edd3 5a00 	vldr	s11, [r3]
 8000e68:	4b92      	ldr	r3, [pc, #584]	@ (80010b4 <NLLS+0x504>)
 8000e6a:	443b      	add	r3, r7
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000e74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80010b0 <NLLS+0x500>)
 8000e7e:	443b      	add	r3, r7
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8000e88:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	ed93 6a00 	vldr	s12, [r3]
 8000e94:	4b89      	ldr	r3, [pc, #548]	@ (80010bc <NLLS+0x50c>)
 8000e96:	443b      	add	r3, r7
 8000e98:	edd3 7a00 	vldr	s15, [r3]
 8000e9c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8000ea0:	4b85      	ldr	r3, [pc, #532]	@ (80010b8 <NLLS+0x508>)
 8000ea2:	443b      	add	r3, r7
 8000ea4:	edd3 7a00 	vldr	s15, [r3]
 8000ea8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000eac:	4b84      	ldr	r3, [pc, #528]	@ (80010c0 <NLLS+0x510>)
 8000eae:	443b      	add	r3, r7
 8000eb0:	edd3 5a00 	vldr	s11, [r3]
 8000eb4:	4b83      	ldr	r3, [pc, #524]	@ (80010c4 <NLLS+0x514>)
 8000eb6:	443b      	add	r3, r7
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80010b0 <NLLS+0x500>)
 8000ec2:	443b      	add	r3, r7
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8000ecc:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8000ed0:	6812      	ldr	r2, [r2, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	ed93 5a00 	vldr	s10, [r3]
 8000ed8:	4b76      	ldr	r3, [pc, #472]	@ (80010b4 <NLLS+0x504>)
 8000eda:	443b      	add	r3, r7
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	ee75 7a67 	vsub.f32	s15, s10, s15
 8000ee4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000ee8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000eec:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000ef0:	4b71      	ldr	r3, [pc, #452]	@ (80010b8 <NLLS+0x508>)
 8000ef2:	443b      	add	r3, r7
 8000ef4:	edd3 6a00 	vldr	s13, [r3]
 8000ef8:	4b71      	ldr	r3, [pc, #452]	@ (80010c0 <NLLS+0x510>)
 8000efa:	443b      	add	r3, r7
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f04:	4b70      	ldr	r3, [pc, #448]	@ (80010c8 <NLLS+0x518>)
 8000f06:	443b      	add	r3, r7
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f10:	4b69      	ldr	r3, [pc, #420]	@ (80010b8 <NLLS+0x508>)
 8000f12:	443b      	add	r3, r7
 8000f14:	edd3 5a00 	vldr	s11, [r3]
 8000f18:	4b69      	ldr	r3, [pc, #420]	@ (80010c0 <NLLS+0x510>)
 8000f1a:	443b      	add	r3, r7
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000f24:	4b68      	ldr	r3, [pc, #416]	@ (80010c8 <NLLS+0x518>)
 8000f26:	443b      	add	r3, r7
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000f30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f34:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80010b8 <NLLS+0x508>)
 8000f3e:	443b      	add	r3, r7
 8000f40:	edd3 6a00 	vldr	s13, [r3]
 8000f44:	4b5e      	ldr	r3, [pc, #376]	@ (80010c0 <NLLS+0x510>)
 8000f46:	443b      	add	r3, r7
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f50:	4b5d      	ldr	r3, [pc, #372]	@ (80010c8 <NLLS+0x518>)
 8000f52:	443b      	add	r3, r7
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f5c:	4b54      	ldr	r3, [pc, #336]	@ (80010b0 <NLLS+0x500>)
 8000f5e:	443b      	add	r3, r7
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8000f68:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	ed93 6a00 	vldr	s12, [r3]
 8000f74:	4b55      	ldr	r3, [pc, #340]	@ (80010cc <NLLS+0x51c>)
 8000f76:	443b      	add	r3, r7
 8000f78:	edd3 7a00 	vldr	s15, [r3]
 8000f7c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f84:	4b4c      	ldr	r3, [pc, #304]	@ (80010b8 <NLLS+0x508>)
 8000f86:	443b      	add	r3, r7
 8000f88:	ed93 6a00 	vldr	s12, [r3]
 8000f8c:	4b50      	ldr	r3, [pc, #320]	@ (80010d0 <NLLS+0x520>)
 8000f8e:	443b      	add	r3, r7
 8000f90:	edd3 7a00 	vldr	s15, [r3]
 8000f94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000f98:	4b4e      	ldr	r3, [pc, #312]	@ (80010d4 <NLLS+0x524>)
 8000f9a:	443b      	add	r3, r7
 8000f9c:	edd3 7a00 	vldr	s15, [r3]
 8000fa0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000fa4:	4b42      	ldr	r3, [pc, #264]	@ (80010b0 <NLLS+0x500>)
 8000fa6:	443b      	add	r3, r7
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8000fb0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	edd3 5a00 	vldr	s11, [r3]
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80010bc <NLLS+0x50c>)
 8000fbe:	443b      	add	r3, r7
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000fc8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000fcc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <NLLS+0x510>)
 8000fd2:	443b      	add	r3, r7
 8000fd4:	ed93 6a00 	vldr	s12, [r3]
 8000fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80010d0 <NLLS+0x520>)
 8000fda:	443b      	add	r3, r7
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <NLLS+0x524>)
 8000fe6:	443b      	add	r3, r7
 8000fe8:	edd3 5a00 	vldr	s11, [r3]
 8000fec:	4b35      	ldr	r3, [pc, #212]	@ (80010c4 <NLLS+0x514>)
 8000fee:	443b      	add	r3, r7
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000ff8:	4b33      	ldr	r3, [pc, #204]	@ (80010c8 <NLLS+0x518>)
 8000ffa:	443b      	add	r3, r7
 8000ffc:	ed93 5a00 	vldr	s10, [r3]
 8001000:	4b35      	ldr	r3, [pc, #212]	@ (80010d8 <NLLS+0x528>)
 8001002:	443b      	add	r3, r7
 8001004:	edd3 7a00 	vldr	s15, [r3]
 8001008:	ee25 5a27 	vmul.f32	s10, s10, s15
 800100c:	4b33      	ldr	r3, [pc, #204]	@ (80010dc <NLLS+0x52c>)
 800100e:	443b      	add	r3, r7
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001018:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800101c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001020:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <NLLS+0x500>)
 8001022:	443b      	add	r3, r7
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800102c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	4413      	add	r3, r2
 8001034:	edd3 5a00 	vldr	s11, [r3]
 8001038:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <NLLS+0x504>)
 800103a:	443b      	add	r3, r7
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001044:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001048:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <NLLS+0x508>)
 800104e:	443b      	add	r3, r7
 8001050:	ed93 6a00 	vldr	s12, [r3]
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <NLLS+0x510>)
 8001056:	443b      	add	r3, r7
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <NLLS+0x518>)
 8001062:	443b      	add	r3, r7
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	ee26 6a27 	vmul.f32	s12, s12, s15
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <NLLS+0x500>)
 800106e:	443b      	add	r3, r7
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001078:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	4413      	add	r3, r2
 8001080:	edd3 5a00 	vldr	s11, [r3]
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <NLLS+0x51c>)
 8001086:	443b      	add	r3, r7
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001090:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <NLLS+0x508>)
 8001096:	443b      	add	r3, r7
 8001098:	edd3 5a00 	vldr	s11, [r3]
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <NLLS+0x520>)
 800109e:	443b      	add	r3, r7
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <NLLS+0x524>)
 80010aa:	443b      	add	r3, r7
 80010ac:	e018      	b.n	80010e0 <NLLS+0x530>
 80010ae:	bf00      	nop
 80010b0:	00016fb0 	.word	0x00016fb0
 80010b4:	00016fd4 	.word	0x00016fd4
 80010b8:	00016fe0 	.word	0x00016fe0
 80010bc:	00016fd0 	.word	0x00016fd0
 80010c0:	00016fdc 	.word	0x00016fdc
 80010c4:	00016f80 	.word	0x00016f80
 80010c8:	00016f74 	.word	0x00016f74
 80010cc:	00016fcc 	.word	0x00016fcc
 80010d0:	00016fd8 	.word	0x00016fd8
 80010d4:	00016f7c 	.word	0x00016f7c
 80010d8:	00016f84 	.word	0x00016f84
 80010dc:	00016f70 	.word	0x00016f70
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010e8:	4bbd      	ldr	r3, [pc, #756]	@ (80013e0 <NLLS+0x830>)
 80010ea:	443b      	add	r3, r7
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80010f4:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	ed93 5a00 	vldr	s10, [r3]
 8001100:	4bb8      	ldr	r3, [pc, #736]	@ (80013e4 <NLLS+0x834>)
 8001102:	443b      	add	r3, r7
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	ee75 7a67 	vsub.f32	s15, s10, s15
 800110c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001110:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001114:	4bb4      	ldr	r3, [pc, #720]	@ (80013e8 <NLLS+0x838>)
 8001116:	443b      	add	r3, r7
 8001118:	edd3 5a00 	vldr	s11, [r3]
 800111c:	4bb3      	ldr	r3, [pc, #716]	@ (80013ec <NLLS+0x83c>)
 800111e:	443b      	add	r3, r7
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001128:	4bb1      	ldr	r3, [pc, #708]	@ (80013f0 <NLLS+0x840>)
 800112a:	443b      	add	r3, r7
 800112c:	ed93 5a00 	vldr	s10, [r3]
 8001130:	4bb0      	ldr	r3, [pc, #704]	@ (80013f4 <NLLS+0x844>)
 8001132:	443b      	add	r3, r7
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee25 5a27 	vmul.f32	s10, s10, s15
 800113c:	4bae      	ldr	r3, [pc, #696]	@ (80013f8 <NLLS+0x848>)
 800113e:	443b      	add	r3, r7
 8001140:	edd3 4a00 	vldr	s9, [r3]
 8001144:	4bad      	ldr	r3, [pc, #692]	@ (80013fc <NLLS+0x84c>)
 8001146:	443b      	add	r3, r7
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8001150:	4bab      	ldr	r3, [pc, #684]	@ (8001400 <NLLS+0x850>)
 8001152:	443b      	add	r3, r7
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ee64 7aa7 	vmul.f32	s15, s9, s15
 800115c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001160:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001164:	4b9e      	ldr	r3, [pc, #632]	@ (80013e0 <NLLS+0x830>)
 8001166:	443b      	add	r3, r7
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001170:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	4413      	add	r3, r2
 8001178:	ed93 5a00 	vldr	s10, [r3]
 800117c:	4ba1      	ldr	r3, [pc, #644]	@ (8001404 <NLLS+0x854>)
 800117e:	443b      	add	r3, r7
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001188:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800118c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001190:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001194:	4b9c      	ldr	r3, [pc, #624]	@ (8001408 <NLLS+0x858>)
 8001196:	443b      	add	r3, r7
 8001198:	edd3 6a00 	vldr	s13, [r3]
 800119c:	4b92      	ldr	r3, [pc, #584]	@ (80013e8 <NLLS+0x838>)
 800119e:	443b      	add	r3, r7
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011a8:	4b90      	ldr	r3, [pc, #576]	@ (80013ec <NLLS+0x83c>)
 80011aa:	443b      	add	r3, r7
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b4:	4b90      	ldr	r3, [pc, #576]	@ (80013f8 <NLLS+0x848>)
 80011b6:	443b      	add	r3, r7
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011c0:	4b92      	ldr	r3, [pc, #584]	@ (800140c <NLLS+0x85c>)
 80011c2:	443b      	add	r3, r7
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001400 <NLLS+0x850>)
 80011ce:	443b      	add	r3, r7
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011d8:	4b8b      	ldr	r3, [pc, #556]	@ (8001408 <NLLS+0x858>)
 80011da:	443b      	add	r3, r7
 80011dc:	edd3 5a00 	vldr	s11, [r3]
 80011e0:	4b81      	ldr	r3, [pc, #516]	@ (80013e8 <NLLS+0x838>)
 80011e2:	443b      	add	r3, r7
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011ec:	4b7f      	ldr	r3, [pc, #508]	@ (80013ec <NLLS+0x83c>)
 80011ee:	443b      	add	r3, r7
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011f8:	4b7f      	ldr	r3, [pc, #508]	@ (80013f8 <NLLS+0x848>)
 80011fa:	443b      	add	r3, r7
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001204:	4b81      	ldr	r3, [pc, #516]	@ (800140c <NLLS+0x85c>)
 8001206:	443b      	add	r3, r7
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001210:	4b7b      	ldr	r3, [pc, #492]	@ (8001400 <NLLS+0x850>)
 8001212:	443b      	add	r3, r7
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800121c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001220:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001228:	4b79      	ldr	r3, [pc, #484]	@ (8001410 <NLLS+0x860>)
 800122a:	443b      	add	r3, r7
 800122c:	f2a3 42b4 	subw	r2, r3, #1204	@ 0x4b4
 8001230:	4b6b      	ldr	r3, [pc, #428]	@ (80013e0 <NLLS+0x830>)
 8001232:	443b      	add	r3, r7
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	edc3 7a00 	vstr	s15, [r3]

            e[i] = (Be[i] * Be[i]) - f[i];
 800123e:	4b75      	ldr	r3, [pc, #468]	@ (8001414 <NLLS+0x864>)
 8001240:	443b      	add	r3, r7
 8001242:	f5a3 72fe 	sub.w	r2, r3, #508	@ 0x1fc
 8001246:	4b66      	ldr	r3, [pc, #408]	@ (80013e0 <NLLS+0x830>)
 8001248:	443b      	add	r3, r7
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	ed93 7a00 	vldr	s14, [r3]
 8001254:	4b6f      	ldr	r3, [pc, #444]	@ (8001414 <NLLS+0x864>)
 8001256:	443b      	add	r3, r7
 8001258:	f5a3 72fe 	sub.w	r2, r3, #508	@ 0x1fc
 800125c:	4b60      	ldr	r3, [pc, #384]	@ (80013e0 <NLLS+0x830>)
 800125e:	443b      	add	r3, r7
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126e:	4b68      	ldr	r3, [pc, #416]	@ (8001410 <NLLS+0x860>)
 8001270:	443b      	add	r3, r7
 8001272:	f2a3 42b4 	subw	r2, r3, #1204	@ 0x4b4
 8001276:	4b5a      	ldr	r3, [pc, #360]	@ (80013e0 <NLLS+0x830>)
 8001278:	443b      	add	r3, r7
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001288:	4b63      	ldr	r3, [pc, #396]	@ (8001418 <NLLS+0x868>)
 800128a:	443b      	add	r3, r7
 800128c:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 8001290:	4b53      	ldr	r3, [pc, #332]	@ (80013e0 <NLLS+0x830>)
 8001292:	443b      	add	r3, r7
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	edc3 7a00 	vstr	s15, [r3]

            mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800129e:	4b50      	ldr	r3, [pc, #320]	@ (80013e0 <NLLS+0x830>)
 80012a0:	443b      	add	r3, r7
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80012aa:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	4b4b      	ldr	r3, [pc, #300]	@ (80013e4 <NLLS+0x834>)
 80012b8:	443b      	add	r3, r7
 80012ba:	ed93 7a00 	vldr	s14, [r3]
 80012be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c2:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <NLLS+0x858>)
 80012c4:	443b      	add	r3, r7
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ce:	4b46      	ldr	r3, [pc, #280]	@ (80013e8 <NLLS+0x838>)
 80012d0:	443b      	add	r3, r7
 80012d2:	edd3 6a00 	vldr	s13, [r3]
 80012d6:	4b47      	ldr	r3, [pc, #284]	@ (80013f4 <NLLS+0x844>)
 80012d8:	443b      	add	r3, r7
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012e2:	4b3f      	ldr	r3, [pc, #252]	@ (80013e0 <NLLS+0x830>)
 80012e4:	443b      	add	r3, r7
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80012ee:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	4b42      	ldr	r3, [pc, #264]	@ (8001404 <NLLS+0x854>)
 80012fc:	443b      	add	r3, r7
 80012fe:	ed93 6a00 	vldr	s12, [r3]
 8001302:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001306:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001312:	4b33      	ldr	r3, [pc, #204]	@ (80013e0 <NLLS+0x830>)
 8001314:	443b      	add	r3, r7
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800131e:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	4413      	add	r3, r2
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <NLLS+0x834>)
 800132c:	443b      	add	r3, r7
 800132e:	edd3 6a00 	vldr	s13, [r3]
 8001332:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001336:	ee67 6a27 	vmul.f32	s13, s14, s15
 800133a:	4b33      	ldr	r3, [pc, #204]	@ (8001408 <NLLS+0x858>)
 800133c:	443b      	add	r3, r7
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001346:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <NLLS+0x838>)
 8001348:	443b      	add	r3, r7
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001352:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <NLLS+0x838>)
 8001354:	443b      	add	r3, r7
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135e:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <NLLS+0x848>)
 8001360:	443b      	add	r3, r7
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <NLLS+0x848>)
 800136c:	443b      	add	r3, r7
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <NLLS+0x830>)
 800137c:	443b      	add	r3, r7
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001386:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	4413      	add	r3, r2
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <NLLS+0x834>)
 8001394:	443b      	add	r3, r7
 8001396:	edd3 6a00 	vldr	s13, [r3]
 800139a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <NLLS+0x858>)
 80013a0:	443b      	add	r3, r7
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <NLLS+0x838>)
 80013ac:	443b      	add	r3, r7
 80013ae:	ed93 6a00 	vldr	s12, [r3]
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <NLLS+0x844>)
 80013b4:	443b      	add	r3, r7
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <NLLS+0x830>)
 80013c0:	443b      	add	r3, r7
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80013ca:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <NLLS+0x854>)
 80013d8:	443b      	add	r3, r7
 80013da:	edd3 5a00 	vldr	s11, [r3]
 80013de:	e01d      	b.n	800141c <NLLS+0x86c>
 80013e0:	00016fb0 	.word	0x00016fb0
 80013e4:	00016fd0 	.word	0x00016fd0
 80013e8:	00016fdc 	.word	0x00016fdc
 80013ec:	00016fd8 	.word	0x00016fd8
 80013f0:	00016f7c 	.word	0x00016f7c
 80013f4:	00016f80 	.word	0x00016f80
 80013f8:	00016f74 	.word	0x00016f74
 80013fc:	00016f84 	.word	0x00016f84
 8001400:	00016f70 	.word	0x00016f70
 8001404:	00016fd4 	.word	0x00016fd4
 8001408:	00016fe0 	.word	0x00016fe0
 800140c:	00016f78 	.word	0x00016f78
 8001410:	00013fe8 	.word	0x00013fe8
 8001414:	00015fe8 	.word	0x00015fe8
 8001418:	00014fe8 	.word	0x00014fe8
 800141c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001420:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001424:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001428:	4bc0      	ldr	r3, [pc, #768]	@ (800172c <NLLS+0xb7c>)
 800142a:	443b      	add	r3, r7
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001434:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	4413      	add	r3, r2
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	4bbb      	ldr	r3, [pc, #748]	@ (8001730 <NLLS+0xb80>)
 8001442:	443b      	add	r3, r7
 8001444:	ed93 6a00 	vldr	s12, [r3]
 8001448:	ee36 6a67 	vsub.f32	s12, s12, s15
 800144c:	4bb9      	ldr	r3, [pc, #740]	@ (8001734 <NLLS+0xb84>)
 800144e:	443b      	add	r3, r7
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001458:	4bb7      	ldr	r3, [pc, #732]	@ (8001738 <NLLS+0xb88>)
 800145a:	443b      	add	r3, r7
 800145c:	edd3 5a00 	vldr	s11, [r3]
 8001460:	4bb6      	ldr	r3, [pc, #728]	@ (800173c <NLLS+0xb8c>)
 8001462:	443b      	add	r3, r7
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800146c:	4baf      	ldr	r3, [pc, #700]	@ (800172c <NLLS+0xb7c>)
 800146e:	443b      	add	r3, r7
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001478:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	4413      	add	r3, r2
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	4bae      	ldr	r3, [pc, #696]	@ (8001740 <NLLS+0xb90>)
 8001486:	443b      	add	r3, r7
 8001488:	ed93 5a00 	vldr	s10, [r3]
 800148c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001490:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001494:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149c:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80014a0:	4ba4      	ldr	r3, [pc, #656]	@ (8001734 <NLLS+0xb84>)
 80014a2:	443b      	add	r3, r7
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80014ac:	4ba1      	ldr	r3, [pc, #644]	@ (8001734 <NLLS+0xb84>)
 80014ae:	443b      	add	r3, r7
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014b8:	4b9f      	ldr	r3, [pc, #636]	@ (8001738 <NLLS+0xb88>)
 80014ba:	443b      	add	r3, r7
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001738 <NLLS+0xb88>)
 80014c6:	443b      	add	r3, r7
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001744 <NLLS+0xb94>)
 80014d2:	443b      	add	r3, r7
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014dc:	4b99      	ldr	r3, [pc, #612]	@ (8001744 <NLLS+0xb94>)
 80014de:	443b      	add	r3, r7
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80014ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f0:	4b8e      	ldr	r3, [pc, #568]	@ (800172c <NLLS+0xb7c>)
 80014f2:	443b      	add	r3, r7
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80014fc:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	4413      	add	r3, r2
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	4b8d      	ldr	r3, [pc, #564]	@ (8001740 <NLLS+0xb90>)
 800150a:	443b      	add	r3, r7
 800150c:	edd3 6a00 	vldr	s13, [r3]
 8001510:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001514:	4b85      	ldr	r3, [pc, #532]	@ (800172c <NLLS+0xb7c>)
 8001516:	443b      	add	r3, r7
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001520:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	4413      	add	r3, r2
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	4b84      	ldr	r3, [pc, #528]	@ (8001740 <NLLS+0xb90>)
 800152e:	443b      	add	r3, r7
 8001530:	ed93 6a00 	vldr	s12, [r3]
 8001534:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153c:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001540:	4b7c      	ldr	r3, [pc, #496]	@ (8001734 <NLLS+0xb84>)
 8001542:	443b      	add	r3, r7
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800154c:	4b79      	ldr	r3, [pc, #484]	@ (8001734 <NLLS+0xb84>)
 800154e:	443b      	add	r3, r7
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001558:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800155c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001560:	4b75      	ldr	r3, [pc, #468]	@ (8001738 <NLLS+0xb88>)
 8001562:	443b      	add	r3, r7
 8001564:	edd3 6a00 	vldr	s13, [r3]
 8001568:	4b77      	ldr	r3, [pc, #476]	@ (8001748 <NLLS+0xb98>)
 800156a:	443b      	add	r3, r7
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001574:	4b75      	ldr	r3, [pc, #468]	@ (800174c <NLLS+0xb9c>)
 8001576:	443b      	add	r3, r7
 8001578:	ed93 6a00 	vldr	s12, [r3]
 800157c:	4b6f      	ldr	r3, [pc, #444]	@ (800173c <NLLS+0xb8c>)
 800157e:	443b      	add	r3, r7
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001588:	4b71      	ldr	r3, [pc, #452]	@ (8001750 <NLLS+0xba0>)
 800158a:	443b      	add	r3, r7
 800158c:	edd3 5a00 	vldr	s11, [r3]
 8001590:	4b6c      	ldr	r3, [pc, #432]	@ (8001744 <NLLS+0xb94>)
 8001592:	443b      	add	r3, r7
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800159c:	4b6d      	ldr	r3, [pc, #436]	@ (8001754 <NLLS+0xba4>)
 800159e:	443b      	add	r3, r7
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015b0:	4b5e      	ldr	r3, [pc, #376]	@ (800172c <NLLS+0xb7c>)
 80015b2:	443b      	add	r3, r7
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80015bc:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001740 <NLLS+0xb90>)
 80015ca:	443b      	add	r3, r7
 80015cc:	ed93 6a00 	vldr	s12, [r3]
 80015d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015d8:	4b56      	ldr	r3, [pc, #344]	@ (8001734 <NLLS+0xb84>)
 80015da:	443b      	add	r3, r7
 80015dc:	ed93 6a00 	vldr	s12, [r3]
 80015e0:	4b55      	ldr	r3, [pc, #340]	@ (8001738 <NLLS+0xb88>)
 80015e2:	443b      	add	r3, r7
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015ec:	4b55      	ldr	r3, [pc, #340]	@ (8001744 <NLLS+0xb94>)
 80015ee:	443b      	add	r3, r7
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015f8:	4b4c      	ldr	r3, [pc, #304]	@ (800172c <NLLS+0xb7c>)
 80015fa:	443b      	add	r3, r7
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001604:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	4413      	add	r3, r2
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <NLLS+0xba8>)
 8001612:	443b      	add	r3, r7
 8001614:	edd3 5a00 	vldr	s11, [r3]
 8001618:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800161c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001620:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001624:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <NLLS+0xb84>)
 8001626:	443b      	add	r3, r7
 8001628:	ed93 6a00 	vldr	s12, [r3]
 800162c:	4b46      	ldr	r3, [pc, #280]	@ (8001748 <NLLS+0xb98>)
 800162e:	443b      	add	r3, r7
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001638:	4b44      	ldr	r3, [pc, #272]	@ (800174c <NLLS+0xb9c>)
 800163a:	443b      	add	r3, r7
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001644:	4b39      	ldr	r3, [pc, #228]	@ (800172c <NLLS+0xb7c>)
 8001646:	443b      	add	r3, r7
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001650:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	4413      	add	r3, r2
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <NLLS+0xb80>)
 800165e:	443b      	add	r3, r7
 8001660:	edd3 5a00 	vldr	s11, [r3]
 8001664:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001668:	ee66 7a27 	vmul.f32	s15, s12, s15
 800166c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001670:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <NLLS+0xb88>)
 8001672:	443b      	add	r3, r7
 8001674:	ed93 6a00 	vldr	s12, [r3]
 8001678:	4b33      	ldr	r3, [pc, #204]	@ (8001748 <NLLS+0xb98>)
 800167a:	443b      	add	r3, r7
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001684:	4b31      	ldr	r3, [pc, #196]	@ (800174c <NLLS+0xb9c>)
 8001686:	443b      	add	r3, r7
 8001688:	edd3 5a00 	vldr	s11, [r3]
 800168c:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <NLLS+0xb8c>)
 800168e:	443b      	add	r3, r7
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001698:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <NLLS+0xba0>)
 800169a:	443b      	add	r3, r7
 800169c:	ed93 5a00 	vldr	s10, [r3]
 80016a0:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <NLLS+0xb94>)
 80016a2:	443b      	add	r3, r7
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee25 5a27 	vmul.f32	s10, s10, s15
 80016ac:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <NLLS+0xba4>)
 80016ae:	443b      	add	r3, r7
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee65 7a27 	vmul.f32	s15, s10, s15
 80016b8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80016bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016c0:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <NLLS+0xb7c>)
 80016c2:	443b      	add	r3, r7
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80016cc:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <NLLS+0xb90>)
 80016da:	443b      	add	r3, r7
 80016dc:	edd3 5a00 	vldr	s11, [r3]
 80016e0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80016e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <NLLS+0xb84>)
 80016ea:	443b      	add	r3, r7
 80016ec:	edd3 5a00 	vldr	s11, [r3]
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <NLLS+0xb88>)
 80016f2:	443b      	add	r3, r7
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <NLLS+0xb94>)
 80016fe:	443b      	add	r3, r7
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <NLLS+0xb7c>)
 800170a:	443b      	add	r3, r7
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001714:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	4413      	add	r3, r2
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <NLLS+0xba8>)
 8001722:	443b      	add	r3, r7
 8001724:	ed93 5a00 	vldr	s10, [r3]
 8001728:	e018      	b.n	800175c <NLLS+0xbac>
 800172a:	bf00      	nop
 800172c:	00016fb0 	.word	0x00016fb0
 8001730:	00016fd0 	.word	0x00016fd0
 8001734:	00016fe0 	.word	0x00016fe0
 8001738:	00016fdc 	.word	0x00016fdc
 800173c:	00016f80 	.word	0x00016f80
 8001740:	00016fd4 	.word	0x00016fd4
 8001744:	00016f74 	.word	0x00016f74
 8001748:	00016fd8 	.word	0x00016fd8
 800174c:	00016f7c 	.word	0x00016f7c
 8001750:	00016f70 	.word	0x00016f70
 8001754:	00016f84 	.word	0x00016f84
 8001758:	00016fcc 	.word	0x00016fcc
 800175c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001760:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001764:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001768:	4bc0      	ldr	r3, [pc, #768]	@ (8001a6c <NLLS+0xebc>)
 800176a:	443b      	add	r3, r7
 800176c:	edd3 5a00 	vldr	s11, [r3]
 8001770:	4bbf      	ldr	r3, [pc, #764]	@ (8001a70 <NLLS+0xec0>)
 8001772:	443b      	add	r3, r7
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800177c:	4bbd      	ldr	r3, [pc, #756]	@ (8001a74 <NLLS+0xec4>)
 800177e:	443b      	add	r3, r7
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001788:	4bbb      	ldr	r3, [pc, #748]	@ (8001a78 <NLLS+0xec8>)
 800178a:	443b      	add	r3, r7
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001794:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4413      	add	r3, r2
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	4bb6      	ldr	r3, [pc, #728]	@ (8001a7c <NLLS+0xecc>)
 80017a2:	443b      	add	r3, r7
 80017a4:	ed93 5a00 	vldr	s10, [r3]
 80017a8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80017ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b8:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80017bc:	4bab      	ldr	r3, [pc, #684]	@ (8001a6c <NLLS+0xebc>)
 80017be:	443b      	add	r3, r7
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80017c8:	4ba8      	ldr	r3, [pc, #672]	@ (8001a6c <NLLS+0xebc>)
 80017ca:	443b      	add	r3, r7
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017d4:	4baa      	ldr	r3, [pc, #680]	@ (8001a80 <NLLS+0xed0>)
 80017d6:	443b      	add	r3, r7
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017e0:	4ba7      	ldr	r3, [pc, #668]	@ (8001a80 <NLLS+0xed0>)
 80017e2:	443b      	add	r3, r7
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001a70 <NLLS+0xec0>)
 80017ee:	443b      	add	r3, r7
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a70 <NLLS+0xec0>)
 80017fa:	443b      	add	r3, r7
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001804:	4b9f      	ldr	r3, [pc, #636]	@ (8001a84 <NLLS+0xed4>)
 8001806:	443b      	add	r3, r7
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001810:	4b9c      	ldr	r3, [pc, #624]	@ (8001a84 <NLLS+0xed4>)
 8001812:	443b      	add	r3, r7
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800181c:	4b9a      	ldr	r3, [pc, #616]	@ (8001a88 <NLLS+0xed8>)
 800181e:	443b      	add	r3, r7
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001828:	4b97      	ldr	r3, [pc, #604]	@ (8001a88 <NLLS+0xed8>)
 800182a:	443b      	add	r3, r7
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001834:	4b95      	ldr	r3, [pc, #596]	@ (8001a8c <NLLS+0xedc>)
 8001836:	443b      	add	r3, r7
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001840:	4b92      	ldr	r3, [pc, #584]	@ (8001a8c <NLLS+0xedc>)
 8001842:	443b      	add	r3, r7
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800184c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001850:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001854:	4b8a      	ldr	r3, [pc, #552]	@ (8001a80 <NLLS+0xed0>)
 8001856:	443b      	add	r3, r7
 8001858:	edd3 6a00 	vldr	s13, [r3]
 800185c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a8c <NLLS+0xedc>)
 800185e:	443b      	add	r3, r7
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001868:	4b83      	ldr	r3, [pc, #524]	@ (8001a78 <NLLS+0xec8>)
 800186a:	443b      	add	r3, r7
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001874:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	4413      	add	r3, r2
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	4b83      	ldr	r3, [pc, #524]	@ (8001a90 <NLLS+0xee0>)
 8001882:	443b      	add	r3, r7
 8001884:	ed93 6a00 	vldr	s12, [r3]
 8001888:	ee76 7a67 	vsub.f32	s15, s12, s15
 800188c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001890:	4b77      	ldr	r3, [pc, #476]	@ (8001a70 <NLLS+0xec0>)
 8001892:	443b      	add	r3, r7
 8001894:	ed93 6a00 	vldr	s12, [r3]
 8001898:	4b76      	ldr	r3, [pc, #472]	@ (8001a74 <NLLS+0xec4>)
 800189a:	443b      	add	r3, r7
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018a4:	4b74      	ldr	r3, [pc, #464]	@ (8001a78 <NLLS+0xec8>)
 80018a6:	443b      	add	r3, r7
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80018b0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	4b6f      	ldr	r3, [pc, #444]	@ (8001a7c <NLLS+0xecc>)
 80018be:	443b      	add	r3, r7
 80018c0:	edd3 5a00 	vldr	s11, [r3]
 80018c4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80018c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018d0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a80 <NLLS+0xed0>)
 80018d6:	443b      	add	r3, r7
 80018d8:	ed93 6a00 	vldr	s12, [r3]
 80018dc:	4b64      	ldr	r3, [pc, #400]	@ (8001a70 <NLLS+0xec0>)
 80018de:	443b      	add	r3, r7
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018e8:	4b62      	ldr	r3, [pc, #392]	@ (8001a74 <NLLS+0xec4>)
 80018ea:	443b      	add	r3, r7
 80018ec:	edd3 5a00 	vldr	s11, [r3]
 80018f0:	4b68      	ldr	r3, [pc, #416]	@ (8001a94 <NLLS+0xee4>)
 80018f2:	443b      	add	r3, r7
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018fc:	4b61      	ldr	r3, [pc, #388]	@ (8001a84 <NLLS+0xed4>)
 80018fe:	443b      	add	r3, r7
 8001900:	ed93 5a00 	vldr	s10, [r3]
 8001904:	4b61      	ldr	r3, [pc, #388]	@ (8001a8c <NLLS+0xedc>)
 8001906:	443b      	add	r3, r7
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001910:	4b61      	ldr	r3, [pc, #388]	@ (8001a98 <NLLS+0xee8>)
 8001912:	443b      	add	r3, r7
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ee65 7a27 	vmul.f32	s15, s10, s15
 800191c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001920:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001924:	4b54      	ldr	r3, [pc, #336]	@ (8001a78 <NLLS+0xec8>)
 8001926:	443b      	add	r3, r7
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001930:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	4413      	add	r3, r2
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	4b57      	ldr	r3, [pc, #348]	@ (8001a9c <NLLS+0xeec>)
 800193e:	443b      	add	r3, r7
 8001940:	edd3 5a00 	vldr	s11, [r3]
 8001944:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001948:	ee26 6a27 	vmul.f32	s12, s12, s15
 800194c:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <NLLS+0xebc>)
 800194e:	443b      	add	r3, r7
 8001950:	edd3 5a00 	vldr	s11, [r3]
 8001954:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <NLLS+0xed0>)
 8001956:	443b      	add	r3, r7
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001960:	4b4a      	ldr	r3, [pc, #296]	@ (8001a8c <NLLS+0xedc>)
 8001962:	443b      	add	r3, r7
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800196c:	4b42      	ldr	r3, [pc, #264]	@ (8001a78 <NLLS+0xec8>)
 800196e:	443b      	add	r3, r7
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001978:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	4413      	add	r3, r2
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	4b42      	ldr	r3, [pc, #264]	@ (8001a90 <NLLS+0xee0>)
 8001986:	443b      	add	r3, r7
 8001988:	ed93 5a00 	vldr	s10, [r3]
 800198c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001990:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001994:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001998:	4b34      	ldr	r3, [pc, #208]	@ (8001a6c <NLLS+0xebc>)
 800199a:	443b      	add	r3, r7
 800199c:	edd3 5a00 	vldr	s11, [r3]
 80019a0:	4b33      	ldr	r3, [pc, #204]	@ (8001a70 <NLLS+0xec0>)
 80019a2:	443b      	add	r3, r7
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80019ac:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <NLLS+0xec4>)
 80019ae:	443b      	add	r3, r7
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80019b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <NLLS+0xec8>)
 80019ba:	443b      	add	r3, r7
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80019c4:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <NLLS+0xecc>)
 80019d2:	443b      	add	r3, r7
 80019d4:	ed93 5a00 	vldr	s10, [r3]
 80019d8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80019dc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019e4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80019e8:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <NLLS+0xebc>)
 80019ea:	443b      	add	r3, r7
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <NLLS+0xed0>)
 80019f6:	443b      	add	r3, r7
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <NLLS+0xed0>)
 8001a02:	443b      	add	r3, r7
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <NLLS+0xec0>)
 8001a0e:	443b      	add	r3, r7
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <NLLS+0xec0>)
 8001a1a:	443b      	add	r3, r7
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a24:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <NLLS+0xed4>)
 8001a26:	443b      	add	r3, r7
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a30:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <NLLS+0xed4>)
 8001a32:	443b      	add	r3, r7
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <NLLS+0xed8>)
 8001a3e:	443b      	add	r3, r7
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a48:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <NLLS+0xed8>)
 8001a4a:	443b      	add	r3, r7
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a54:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <NLLS+0xedc>)
 8001a56:	443b      	add	r3, r7
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a60:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <NLLS+0xedc>)
 8001a62:	443b      	add	r3, r7
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	e01a      	b.n	8001aa0 <NLLS+0xef0>
 8001a6a:	bf00      	nop
 8001a6c:	00016fe0 	.word	0x00016fe0
 8001a70:	00016fd8 	.word	0x00016fd8
 8001a74:	00016f7c 	.word	0x00016f7c
 8001a78:	00016fb0 	.word	0x00016fb0
 8001a7c:	00016fd0 	.word	0x00016fd0
 8001a80:	00016fdc 	.word	0x00016fdc
 8001a84:	00016f70 	.word	0x00016f70
 8001a88:	00016f78 	.word	0x00016f78
 8001a8c:	00016f74 	.word	0x00016f74
 8001a90:	00016fcc 	.word	0x00016fcc
 8001a94:	00016f80 	.word	0x00016f80
 8001a98:	00016f84 	.word	0x00016f84
 8001a9c:	00016fd4 	.word	0x00016fd4
 8001aa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aa4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aac:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8001ab0:	443b      	add	r3, r7
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4bbe      	ldr	r3, [pc, #760]	@ (8001db0 <NLLS+0x1200>)
 8001ab6:	443b      	add	r3, r7
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3bf0      	subs	r3, #240	@ 0xf0
 8001ac0:	edc3 7a00 	vstr	s15, [r3]

            mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001ac4:	4bba      	ldr	r3, [pc, #744]	@ (8001db0 <NLLS+0x1200>)
 8001ac6:	443b      	add	r3, r7
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001ad0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	4bb5      	ldr	r3, [pc, #724]	@ (8001db4 <NLLS+0x1204>)
 8001ade:	443b      	add	r3, r7
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001aec:	4bb1      	ldr	r3, [pc, #708]	@ (8001db4 <NLLS+0x1204>)
 8001aee:	443b      	add	r3, r7
 8001af0:	edd3 6a00 	vldr	s13, [r3]
 8001af4:	4bb0      	ldr	r3, [pc, #704]	@ (8001db8 <NLLS+0x1208>)
 8001af6:	443b      	add	r3, r7
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b00:	4bae      	ldr	r3, [pc, #696]	@ (8001dbc <NLLS+0x120c>)
 8001b02:	443b      	add	r3, r7
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b0c:	4bac      	ldr	r3, [pc, #688]	@ (8001dc0 <NLLS+0x1210>)
 8001b0e:	443b      	add	r3, r7
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b18:	4ba9      	ldr	r3, [pc, #676]	@ (8001dc0 <NLLS+0x1210>)
 8001b1a:	443b      	add	r3, r7
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b24:	4ba2      	ldr	r3, [pc, #648]	@ (8001db0 <NLLS+0x1200>)
 8001b26:	443b      	add	r3, r7
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001b30:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	ed93 6a00 	vldr	s12, [r3]
 8001b3c:	4b9e      	ldr	r3, [pc, #632]	@ (8001db8 <NLLS+0x1208>)
 8001b3e:	443b      	add	r3, r7
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b48:	4b9c      	ldr	r3, [pc, #624]	@ (8001dbc <NLLS+0x120c>)
 8001b4a:	443b      	add	r3, r7
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b54:	4b9a      	ldr	r3, [pc, #616]	@ (8001dc0 <NLLS+0x1210>)
 8001b56:	443b      	add	r3, r7
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b60:	4b97      	ldr	r3, [pc, #604]	@ (8001dc0 <NLLS+0x1210>)
 8001b62:	443b      	add	r3, r7
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b70:	4b90      	ldr	r3, [pc, #576]	@ (8001db4 <NLLS+0x1204>)
 8001b72:	443b      	add	r3, r7
 8001b74:	ed93 6a00 	vldr	s12, [r3]
 8001b78:	4b8f      	ldr	r3, [pc, #572]	@ (8001db8 <NLLS+0x1208>)
 8001b7a:	443b      	add	r3, r7
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b84:	4b8d      	ldr	r3, [pc, #564]	@ (8001dbc <NLLS+0x120c>)
 8001b86:	443b      	add	r3, r7
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b90:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc4 <NLLS+0x1214>)
 8001b92:	443b      	add	r3, r7
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b9c:	4b89      	ldr	r3, [pc, #548]	@ (8001dc4 <NLLS+0x1214>)
 8001b9e:	443b      	add	r3, r7
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ba8:	4b87      	ldr	r3, [pc, #540]	@ (8001dc8 <NLLS+0x1218>)
 8001baa:	443b      	add	r3, r7
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bb4:	4b84      	ldr	r3, [pc, #528]	@ (8001dc8 <NLLS+0x1218>)
 8001bb6:	443b      	add	r3, r7
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bc4:	4b7a      	ldr	r3, [pc, #488]	@ (8001db0 <NLLS+0x1200>)
 8001bc6:	443b      	add	r3, r7
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001bd0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	ed93 6a00 	vldr	s12, [r3]
 8001bdc:	4b76      	ldr	r3, [pc, #472]	@ (8001db8 <NLLS+0x1208>)
 8001bde:	443b      	add	r3, r7
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001be8:	4b74      	ldr	r3, [pc, #464]	@ (8001dbc <NLLS+0x120c>)
 8001bea:	443b      	add	r3, r7
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bf4:	4b73      	ldr	r3, [pc, #460]	@ (8001dc4 <NLLS+0x1214>)
 8001bf6:	443b      	add	r3, r7
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c00:	4b70      	ldr	r3, [pc, #448]	@ (8001dc4 <NLLS+0x1214>)
 8001c02:	443b      	add	r3, r7
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c0c:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc8 <NLLS+0x1218>)
 8001c0e:	443b      	add	r3, r7
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c18:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc8 <NLLS+0x1218>)
 8001c1a:	443b      	add	r3, r7
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c28:	4b68      	ldr	r3, [pc, #416]	@ (8001dcc <NLLS+0x121c>)
 8001c2a:	443b      	add	r3, r7
 8001c2c:	ed93 6a00 	vldr	s12, [r3]
 8001c30:	4b61      	ldr	r3, [pc, #388]	@ (8001db8 <NLLS+0x1208>)
 8001c32:	443b      	add	r3, r7
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c3c:	4b64      	ldr	r3, [pc, #400]	@ (8001dd0 <NLLS+0x1220>)
 8001c3e:	443b      	add	r3, r7
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c48:	4b62      	ldr	r3, [pc, #392]	@ (8001dd4 <NLLS+0x1224>)
 8001c4a:	443b      	add	r3, r7
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c54:	4b5a      	ldr	r3, [pc, #360]	@ (8001dc0 <NLLS+0x1210>)
 8001c56:	443b      	add	r3, r7
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c64:	4b52      	ldr	r3, [pc, #328]	@ (8001db0 <NLLS+0x1200>)
 8001c66:	443b      	add	r3, r7
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001c70:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	ed93 6a00 	vldr	s12, [r3]
 8001c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001db8 <NLLS+0x1208>)
 8001c7e:	443b      	add	r3, r7
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c88:	4b51      	ldr	r3, [pc, #324]	@ (8001dd0 <NLLS+0x1220>)
 8001c8a:	443b      	add	r3, r7
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c94:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd4 <NLLS+0x1224>)
 8001c96:	443b      	add	r3, r7
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ca0:	4b47      	ldr	r3, [pc, #284]	@ (8001dc0 <NLLS+0x1210>)
 8001ca2:	443b      	add	r3, r7
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cb0:	4b49      	ldr	r3, [pc, #292]	@ (8001dd8 <NLLS+0x1228>)
 8001cb2:	443b      	add	r3, r7
 8001cb4:	ed93 6a00 	vldr	s12, [r3]
 8001cb8:	4b45      	ldr	r3, [pc, #276]	@ (8001dd0 <NLLS+0x1220>)
 8001cba:	443b      	add	r3, r7
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <NLLS+0x120c>)
 8001cc6:	443b      	add	r3, r7
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <NLLS+0x1210>)
 8001cd2:	443b      	add	r3, r7
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cdc:	4b38      	ldr	r3, [pc, #224]	@ (8001dc0 <NLLS+0x1210>)
 8001cde:	443b      	add	r3, r7
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8001ddc <NLLS+0x122c>)
 8001cea:	443b      	add	r3, r7
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cf4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001db0 <NLLS+0x1200>)
 8001cfa:	443b      	add	r3, r7
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001d04:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	ed93 6a00 	vldr	s12, [r3]
 8001d10:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <NLLS+0x1220>)
 8001d12:	443b      	add	r3, r7
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d1c:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <NLLS+0x120c>)
 8001d1e:	443b      	add	r3, r7
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d28:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <NLLS+0x1210>)
 8001d2a:	443b      	add	r3, r7
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d34:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <NLLS+0x1210>)
 8001d36:	443b      	add	r3, r7
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d40:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <NLLS+0x122c>)
 8001d42:	443b      	add	r3, r7
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d50:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <NLLS+0x1228>)
 8001d52:	443b      	add	r3, r7
 8001d54:	ed93 6a00 	vldr	s12, [r3]
 8001d58:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <NLLS+0x1220>)
 8001d5a:	443b      	add	r3, r7
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <NLLS+0x120c>)
 8001d66:	443b      	add	r3, r7
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d70:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <NLLS+0x1214>)
 8001d72:	443b      	add	r3, r7
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <NLLS+0x1214>)
 8001d7e:	443b      	add	r3, r7
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <NLLS+0x1218>)
 8001d8a:	443b      	add	r3, r7
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <NLLS+0x1218>)
 8001d96:	443b      	add	r3, r7
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001da0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <NLLS+0x122c>)
 8001da2:	443b      	add	r3, r7
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dac:	e018      	b.n	8001de0 <NLLS+0x1230>
 8001dae:	bf00      	nop
 8001db0:	00016fb0 	.word	0x00016fb0
 8001db4:	00016fd0 	.word	0x00016fd0
 8001db8:	00016fe0 	.word	0x00016fe0
 8001dbc:	00016fd8 	.word	0x00016fd8
 8001dc0:	00016f7c 	.word	0x00016f7c
 8001dc4:	00016f70 	.word	0x00016f70
 8001dc8:	00016f78 	.word	0x00016f78
 8001dcc:	00016fcc 	.word	0x00016fcc
 8001dd0:	00016fdc 	.word	0x00016fdc
 8001dd4:	00016f74 	.word	0x00016f74
 8001dd8:	00016fd4 	.word	0x00016fd4
 8001ddc:	00016f80 	.word	0x00016f80
 8001de0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001de4:	4bbf      	ldr	r3, [pc, #764]	@ (80020e4 <NLLS+0x1534>)
 8001de6:	443b      	add	r3, r7
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001df0:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	ed93 6a00 	vldr	s12, [r3]
 8001dfc:	4bba      	ldr	r3, [pc, #744]	@ (80020e8 <NLLS+0x1538>)
 8001dfe:	443b      	add	r3, r7
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e08:	4bb8      	ldr	r3, [pc, #736]	@ (80020ec <NLLS+0x153c>)
 8001e0a:	443b      	add	r3, r7
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e14:	4bb6      	ldr	r3, [pc, #728]	@ (80020f0 <NLLS+0x1540>)
 8001e16:	443b      	add	r3, r7
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e20:	4bb3      	ldr	r3, [pc, #716]	@ (80020f0 <NLLS+0x1540>)
 8001e22:	443b      	add	r3, r7
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e2c:	4bb1      	ldr	r3, [pc, #708]	@ (80020f4 <NLLS+0x1544>)
 8001e2e:	443b      	add	r3, r7
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e38:	4bae      	ldr	r3, [pc, #696]	@ (80020f4 <NLLS+0x1544>)
 8001e3a:	443b      	add	r3, r7
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e44:	4bac      	ldr	r3, [pc, #688]	@ (80020f8 <NLLS+0x1548>)
 8001e46:	443b      	add	r3, r7
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e54:	4ba9      	ldr	r3, [pc, #676]	@ (80020fc <NLLS+0x154c>)
 8001e56:	443b      	add	r3, r7
 8001e58:	ed93 6a00 	vldr	s12, [r3]
 8001e5c:	4ba2      	ldr	r3, [pc, #648]	@ (80020e8 <NLLS+0x1538>)
 8001e5e:	443b      	add	r3, r7
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e68:	4ba0      	ldr	r3, [pc, #640]	@ (80020ec <NLLS+0x153c>)
 8001e6a:	443b      	add	r3, r7
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e74:	4b9e      	ldr	r3, [pc, #632]	@ (80020f0 <NLLS+0x1540>)
 8001e76:	443b      	add	r3, r7
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e80:	4b9f      	ldr	r3, [pc, #636]	@ (8002100 <NLLS+0x1550>)
 8001e82:	443b      	add	r3, r7
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e8c:	4b9d      	ldr	r3, [pc, #628]	@ (8002104 <NLLS+0x1554>)
 8001e8e:	443b      	add	r3, r7
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e98:	4b9b      	ldr	r3, [pc, #620]	@ (8002108 <NLLS+0x1558>)
 8001e9a:	443b      	add	r3, r7
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ea4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ea8:	4b8e      	ldr	r3, [pc, #568]	@ (80020e4 <NLLS+0x1534>)
 8001eaa:	443b      	add	r3, r7
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001eb4:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	ed93 6a00 	vldr	s12, [r3]
 8001ec0:	4b89      	ldr	r3, [pc, #548]	@ (80020e8 <NLLS+0x1538>)
 8001ec2:	443b      	add	r3, r7
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ecc:	4b87      	ldr	r3, [pc, #540]	@ (80020ec <NLLS+0x153c>)
 8001ece:	443b      	add	r3, r7
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ed8:	4b85      	ldr	r3, [pc, #532]	@ (80020f0 <NLLS+0x1540>)
 8001eda:	443b      	add	r3, r7
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ee4:	4b86      	ldr	r3, [pc, #536]	@ (8002100 <NLLS+0x1550>)
 8001ee6:	443b      	add	r3, r7
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ef0:	4b84      	ldr	r3, [pc, #528]	@ (8002104 <NLLS+0x1554>)
 8001ef2:	443b      	add	r3, r7
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001efc:	4b82      	ldr	r3, [pc, #520]	@ (8002108 <NLLS+0x1558>)
 8001efe:	443b      	add	r3, r7
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	eef1 6a67 	vneg.f32	s13, s15
 8001f14:	4b74      	ldr	r3, [pc, #464]	@ (80020e8 <NLLS+0x1538>)
 8001f16:	443b      	add	r3, r7
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f20:	4b71      	ldr	r3, [pc, #452]	@ (80020e8 <NLLS+0x1538>)
 8001f22:	443b      	add	r3, r7
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2c:	4b77      	ldr	r3, [pc, #476]	@ (800210c <NLLS+0x155c>)
 8001f2e:	443b      	add	r3, r7
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f38:	4b6c      	ldr	r3, [pc, #432]	@ (80020ec <NLLS+0x153c>)
 8001f3a:	443b      	add	r3, r7
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f44:	4b6a      	ldr	r3, [pc, #424]	@ (80020f0 <NLLS+0x1540>)
 8001f46:	443b      	add	r3, r7
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f50:	4b67      	ldr	r3, [pc, #412]	@ (80020f0 <NLLS+0x1540>)
 8001f52:	443b      	add	r3, r7
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5c:	4b65      	ldr	r3, [pc, #404]	@ (80020f4 <NLLS+0x1544>)
 8001f5e:	443b      	add	r3, r7
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f68:	4b62      	ldr	r3, [pc, #392]	@ (80020f4 <NLLS+0x1544>)
 8001f6a:	443b      	add	r3, r7
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f74:	4b62      	ldr	r3, [pc, #392]	@ (8002100 <NLLS+0x1550>)
 8001f76:	443b      	add	r3, r7
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f80:	4b5f      	ldr	r3, [pc, #380]	@ (8002100 <NLLS+0x1550>)
 8001f82:	443b      	add	r3, r7
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f90:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8001f94:	443b      	add	r3, r7
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b52      	ldr	r3, [pc, #328]	@ (80020e4 <NLLS+0x1534>)
 8001f9a:	443b      	add	r3, r7
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f203 4357 	addw	r3, r3, #1111	@ 0x457
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3bf0      	subs	r3, #240	@ 0xf0
 8001fa8:	edc3 7a00 	vstr	s15, [r3]

            mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8001fac:	4b4d      	ldr	r3, [pc, #308]	@ (80020e4 <NLLS+0x1534>)
 8001fae:	443b      	add	r3, r7
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001fb8:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	4b52      	ldr	r3, [pc, #328]	@ (8002110 <NLLS+0x1560>)
 8001fc6:	443b      	add	r3, r7
 8001fc8:	ed93 7a00 	vldr	s14, [r3]
 8001fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fd4:	4b4e      	ldr	r3, [pc, #312]	@ (8002110 <NLLS+0x1560>)
 8001fd6:	443b      	add	r3, r7
 8001fd8:	edd3 6a00 	vldr	s13, [r3]
 8001fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800210c <NLLS+0x155c>)
 8001fde:	443b      	add	r3, r7
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80020e8 <NLLS+0x1538>)
 8001fea:	443b      	add	r3, r7
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff4:	4b42      	ldr	r3, [pc, #264]	@ (8002100 <NLLS+0x1550>)
 8001ff6:	443b      	add	r3, r7
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002000:	4b44      	ldr	r3, [pc, #272]	@ (8002114 <NLLS+0x1564>)
 8002002:	443b      	add	r3, r7
 8002004:	ed93 6a00 	vldr	s12, [r3]
 8002008:	4b40      	ldr	r3, [pc, #256]	@ (800210c <NLLS+0x155c>)
 800200a:	443b      	add	r3, r7
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002014:	4b35      	ldr	r3, [pc, #212]	@ (80020ec <NLLS+0x153c>)
 8002016:	443b      	add	r3, r7
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002020:	4b38      	ldr	r3, [pc, #224]	@ (8002104 <NLLS+0x1554>)
 8002022:	443b      	add	r3, r7
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	ee66 7a27 	vmul.f32	s15, s12, s15
 800202c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002030:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <NLLS+0x1534>)
 8002032:	443b      	add	r3, r7
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800203c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	4413      	add	r3, r2
 8002044:	ed93 6a00 	vldr	s12, [r3]
 8002048:	4b30      	ldr	r3, [pc, #192]	@ (800210c <NLLS+0x155c>)
 800204a:	443b      	add	r3, r7
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <NLLS+0x1538>)
 8002056:	443b      	add	r3, r7
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002060:	4b27      	ldr	r3, [pc, #156]	@ (8002100 <NLLS+0x1550>)
 8002062:	443b      	add	r3, r7
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	ee66 7a27 	vmul.f32	s15, s12, s15
 800206c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002070:	4b1c      	ldr	r3, [pc, #112]	@ (80020e4 <NLLS+0x1534>)
 8002072:	443b      	add	r3, r7
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800207c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4413      	add	r3, r2
 8002084:	ed93 6a00 	vldr	s12, [r3]
 8002088:	4b20      	ldr	r3, [pc, #128]	@ (800210c <NLLS+0x155c>)
 800208a:	443b      	add	r3, r7
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002094:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <NLLS+0x153c>)
 8002096:	443b      	add	r3, r7
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020a0:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <NLLS+0x1554>)
 80020a2:	443b      	add	r3, r7
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <NLLS+0x154c>)
 80020b2:	443b      	add	r3, r7
 80020b4:	ed93 6a00 	vldr	s12, [r3]
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <NLLS+0x1538>)
 80020ba:	443b      	add	r3, r7
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020c4:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <NLLS+0x153c>)
 80020c6:	443b      	add	r3, r7
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <NLLS+0x1554>)
 80020d2:	443b      	add	r3, r7
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <NLLS+0x1548>)
 80020de:	443b      	add	r3, r7
 80020e0:	e01a      	b.n	8002118 <NLLS+0x1568>
 80020e2:	bf00      	nop
 80020e4:	00016fb0 	.word	0x00016fb0
 80020e8:	00016fdc 	.word	0x00016fdc
 80020ec:	00016fd8 	.word	0x00016fd8
 80020f0:	00016f70 	.word	0x00016f70
 80020f4:	00016f78 	.word	0x00016f78
 80020f8:	00016f80 	.word	0x00016f80
 80020fc:	00016fd4 	.word	0x00016fd4
 8002100:	00016f74 	.word	0x00016f74
 8002104:	00016f7c 	.word	0x00016f7c
 8002108:	00016f84 	.word	0x00016f84
 800210c:	00016fe0 	.word	0x00016fe0
 8002110:	00016fcc 	.word	0x00016fcc
 8002114:	00016fd0 	.word	0x00016fd0
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002120:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002124:	4bc0      	ldr	r3, [pc, #768]	@ (8002428 <NLLS+0x1878>)
 8002126:	443b      	add	r3, r7
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002130:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	4413      	add	r3, r2
 8002138:	ed93 6a00 	vldr	s12, [r3]
 800213c:	4bbb      	ldr	r3, [pc, #748]	@ (800242c <NLLS+0x187c>)
 800213e:	443b      	add	r3, r7
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002148:	4bb9      	ldr	r3, [pc, #740]	@ (8002430 <NLLS+0x1880>)
 800214a:	443b      	add	r3, r7
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002154:	4bb7      	ldr	r3, [pc, #732]	@ (8002434 <NLLS+0x1884>)
 8002156:	443b      	add	r3, r7
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002160:	4bb5      	ldr	r3, [pc, #724]	@ (8002438 <NLLS+0x1888>)
 8002162:	443b      	add	r3, r7
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee66 7a27 	vmul.f32	s15, s12, s15
 800216c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002170:	4bb2      	ldr	r3, [pc, #712]	@ (800243c <NLLS+0x188c>)
 8002172:	443b      	add	r3, r7
 8002174:	ed93 6a00 	vldr	s12, [r3]
 8002178:	4bac      	ldr	r3, [pc, #688]	@ (800242c <NLLS+0x187c>)
 800217a:	443b      	add	r3, r7
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002184:	4baa      	ldr	r3, [pc, #680]	@ (8002430 <NLLS+0x1880>)
 8002186:	443b      	add	r3, r7
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002190:	4bab      	ldr	r3, [pc, #684]	@ (8002440 <NLLS+0x1890>)
 8002192:	443b      	add	r3, r7
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ee26 6a27 	vmul.f32	s12, s12, s15
 800219c:	4ba9      	ldr	r3, [pc, #676]	@ (8002444 <NLLS+0x1894>)
 800219e:	443b      	add	r3, r7
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021a8:	4ba7      	ldr	r3, [pc, #668]	@ (8002448 <NLLS+0x1898>)
 80021aa:	443b      	add	r3, r7
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80021b8:	4b9b      	ldr	r3, [pc, #620]	@ (8002428 <NLLS+0x1878>)
 80021ba:	443b      	add	r3, r7
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80021c4:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	ed93 6a00 	vldr	s12, [r3]
 80021d0:	4b96      	ldr	r3, [pc, #600]	@ (800242c <NLLS+0x187c>)
 80021d2:	443b      	add	r3, r7
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021dc:	4b94      	ldr	r3, [pc, #592]	@ (8002430 <NLLS+0x1880>)
 80021de:	443b      	add	r3, r7
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021e8:	4b95      	ldr	r3, [pc, #596]	@ (8002440 <NLLS+0x1890>)
 80021ea:	443b      	add	r3, r7
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021f4:	4b93      	ldr	r3, [pc, #588]	@ (8002444 <NLLS+0x1894>)
 80021f6:	443b      	add	r3, r7
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002200:	4b91      	ldr	r3, [pc, #580]	@ (8002448 <NLLS+0x1898>)
 8002202:	443b      	add	r3, r7
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee66 7a27 	vmul.f32	s15, s12, s15
 800220c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002214:	eef1 6a67 	vneg.f32	s13, s15
 8002218:	4b8c      	ldr	r3, [pc, #560]	@ (800244c <NLLS+0x189c>)
 800221a:	443b      	add	r3, r7
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	4b82      	ldr	r3, [pc, #520]	@ (800242c <NLLS+0x187c>)
 8002222:	443b      	add	r3, r7
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222c:	4b80      	ldr	r3, [pc, #512]	@ (8002430 <NLLS+0x1880>)
 800222e:	443b      	add	r3, r7
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002238:	4b7d      	ldr	r3, [pc, #500]	@ (8002430 <NLLS+0x1880>)
 800223a:	443b      	add	r3, r7
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002248:	4b7d      	ldr	r3, [pc, #500]	@ (8002440 <NLLS+0x1890>)
 800224a:	443b      	add	r3, r7
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002254:	4b7a      	ldr	r3, [pc, #488]	@ (8002440 <NLLS+0x1890>)
 8002256:	443b      	add	r3, r7
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002260:	4b7b      	ldr	r3, [pc, #492]	@ (8002450 <NLLS+0x18a0>)
 8002262:	443b      	add	r3, r7
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800226c:	4b78      	ldr	r3, [pc, #480]	@ (8002450 <NLLS+0x18a0>)
 800226e:	443b      	add	r3, r7
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002278:	4b72      	ldr	r3, [pc, #456]	@ (8002444 <NLLS+0x1894>)
 800227a:	443b      	add	r3, r7
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002288:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 800228c:	443b      	add	r3, r7
 800228e:	461a      	mov	r2, r3
 8002290:	4b65      	ldr	r3, [pc, #404]	@ (8002428 <NLLS+0x1878>)
 8002292:	443b      	add	r3, r7
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f603 03ae 	addw	r3, r3, #2222	@ 0x8ae
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3bf0      	subs	r3, #240	@ 0xf0
 80022a0:	edc3 7a00 	vstr	s15, [r3]

            mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 80022a4:	4b65      	ldr	r3, [pc, #404]	@ (800243c <NLLS+0x188c>)
 80022a6:	443b      	add	r3, r7
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80022b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002428 <NLLS+0x1878>)
 80022b2:	443b      	add	r3, r7
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80022bc:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022d0:	4b5e      	ldr	r3, [pc, #376]	@ (800244c <NLLS+0x189c>)
 80022d2:	443b      	add	r3, r7
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022dc:	4b5b      	ldr	r3, [pc, #364]	@ (800244c <NLLS+0x189c>)
 80022de:	443b      	add	r3, r7
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e8:	4b53      	ldr	r3, [pc, #332]	@ (8002438 <NLLS+0x1888>)
 80022ea:	443b      	add	r3, r7
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80022f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002428 <NLLS+0x1878>)
 80022f6:	443b      	add	r3, r7
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002300:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4413      	add	r3, r2
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	4b51      	ldr	r3, [pc, #324]	@ (8002454 <NLLS+0x18a4>)
 800230e:	443b      	add	r3, r7
 8002310:	ed93 6a00 	vldr	s12, [r3]
 8002314:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002318:	4b4c      	ldr	r3, [pc, #304]	@ (800244c <NLLS+0x189c>)
 800231a:	443b      	add	r3, r7
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002324:	4b41      	ldr	r3, [pc, #260]	@ (800242c <NLLS+0x187c>)
 8002326:	443b      	add	r3, r7
 8002328:	edd3 5a00 	vldr	s11, [r3]
 800232c:	4b42      	ldr	r3, [pc, #264]	@ (8002438 <NLLS+0x1888>)
 800232e:	443b      	add	r3, r7
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002338:	4b3b      	ldr	r3, [pc, #236]	@ (8002428 <NLLS+0x1878>)
 800233a:	443b      	add	r3, r7
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002344:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	4413      	add	r3, r2
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <NLLS+0x188c>)
 8002352:	443b      	add	r3, r7
 8002354:	ed93 5a00 	vldr	s10, [r3]
 8002358:	ee75 7a67 	vsub.f32	s15, s10, s15
 800235c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002360:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002364:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002368:	4b38      	ldr	r3, [pc, #224]	@ (800244c <NLLS+0x189c>)
 800236a:	443b      	add	r3, r7
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002374:	4b2d      	ldr	r3, [pc, #180]	@ (800242c <NLLS+0x187c>)
 8002376:	443b      	add	r3, r7
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002380:	4b30      	ldr	r3, [pc, #192]	@ (8002444 <NLLS+0x1894>)
 8002382:	443b      	add	r3, r7
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800238c:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <NLLS+0x1894>)
 800238e:	443b      	add	r3, r7
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002398:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800239c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a0:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <NLLS+0x1884>)
 80023a2:	443b      	add	r3, r7
 80023a4:	edd3 6a00 	vldr	s13, [r3]
 80023a8:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <NLLS+0x1888>)
 80023aa:	443b      	add	r3, r7
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023b4:	4b22      	ldr	r3, [pc, #136]	@ (8002440 <NLLS+0x1890>)
 80023b6:	443b      	add	r3, r7
 80023b8:	ed93 6a00 	vldr	s12, [r3]
 80023bc:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <NLLS+0x1894>)
 80023be:	443b      	add	r3, r7
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002448 <NLLS+0x1898>)
 80023ca:	443b      	add	r3, r7
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80023dc:	4b13      	ldr	r3, [pc, #76]	@ (800242c <NLLS+0x187c>)
 80023de:	443b      	add	r3, r7
 80023e0:	ed93 6a00 	vldr	s12, [r3]
 80023e4:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <NLLS+0x1880>)
 80023e6:	443b      	add	r3, r7
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023f0:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <NLLS+0x1884>)
 80023f2:	443b      	add	r3, r7
 80023f4:	edd3 5a00 	vldr	s11, [r3]
 80023f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <NLLS+0x1888>)
 80023fa:	443b      	add	r3, r7
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002404:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <NLLS+0x1890>)
 8002406:	443b      	add	r3, r7
 8002408:	ed93 5a00 	vldr	s10, [r3]
 800240c:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <NLLS+0x1894>)
 800240e:	443b      	add	r3, r7
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <NLLS+0x1898>)
 800241a:	443b      	add	r3, r7
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002424:	e018      	b.n	8002458 <NLLS+0x18a8>
 8002426:	bf00      	nop
 8002428:	00016fb0 	.word	0x00016fb0
 800242c:	00016fdc 	.word	0x00016fdc
 8002430:	00016fd8 	.word	0x00016fd8
 8002434:	00016f7c 	.word	0x00016f7c
 8002438:	00016f80 	.word	0x00016f80
 800243c:	00016fd4 	.word	0x00016fd4
 8002440:	00016f70 	.word	0x00016f70
 8002444:	00016f74 	.word	0x00016f74
 8002448:	00016f84 	.word	0x00016f84
 800244c:	00016fe0 	.word	0x00016fe0
 8002450:	00016f78 	.word	0x00016f78
 8002454:	00016fd0 	.word	0x00016fd0
 8002458:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800245c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002460:	4bbf      	ldr	r3, [pc, #764]	@ (8002760 <NLLS+0x1bb0>)
 8002462:	443b      	add	r3, r7
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800246c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	4413      	add	r3, r2
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	4bba      	ldr	r3, [pc, #744]	@ (8002764 <NLLS+0x1bb4>)
 800247a:	443b      	add	r3, r7
 800247c:	edd3 5a00 	vldr	s11, [r3]
 8002480:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002484:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002488:	4bb7      	ldr	r3, [pc, #732]	@ (8002768 <NLLS+0x1bb8>)
 800248a:	443b      	add	r3, r7
 800248c:	edd3 5a00 	vldr	s11, [r3]
 8002490:	4bb6      	ldr	r3, [pc, #728]	@ (800276c <NLLS+0x1bbc>)
 8002492:	443b      	add	r3, r7
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800249c:	4bb4      	ldr	r3, [pc, #720]	@ (8002770 <NLLS+0x1bc0>)
 800249e:	443b      	add	r3, r7
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80024a8:	4bad      	ldr	r3, [pc, #692]	@ (8002760 <NLLS+0x1bb0>)
 80024aa:	443b      	add	r3, r7
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80024b4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	4bac      	ldr	r3, [pc, #688]	@ (8002774 <NLLS+0x1bc4>)
 80024c2:	443b      	add	r3, r7
 80024c4:	ed93 5a00 	vldr	s10, [r3]
 80024c8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80024cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80024d4:	4ba4      	ldr	r3, [pc, #656]	@ (8002768 <NLLS+0x1bb8>)
 80024d6:	443b      	add	r3, r7
 80024d8:	edd3 5a00 	vldr	s11, [r3]
 80024dc:	4ba6      	ldr	r3, [pc, #664]	@ (8002778 <NLLS+0x1bc8>)
 80024de:	443b      	add	r3, r7
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80024e8:	4ba4      	ldr	r3, [pc, #656]	@ (800277c <NLLS+0x1bcc>)
 80024ea:	443b      	add	r3, r7
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80024f4:	4b9a      	ldr	r3, [pc, #616]	@ (8002760 <NLLS+0x1bb0>)
 80024f6:	443b      	add	r3, r7
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002500:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	4413      	add	r3, r2
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	4b9c      	ldr	r3, [pc, #624]	@ (8002780 <NLLS+0x1bd0>)
 800250e:	443b      	add	r3, r7
 8002510:	ed93 5a00 	vldr	s10, [r3]
 8002514:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002518:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800251c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002520:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002524:	4b90      	ldr	r3, [pc, #576]	@ (8002768 <NLLS+0x1bb8>)
 8002526:	443b      	add	r3, r7
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002530:	4b8e      	ldr	r3, [pc, #568]	@ (800276c <NLLS+0x1bbc>)
 8002532:	443b      	add	r3, r7
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800253c:	4b8e      	ldr	r3, [pc, #568]	@ (8002778 <NLLS+0x1bc8>)
 800253e:	443b      	add	r3, r7
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002548:	4b8e      	ldr	r3, [pc, #568]	@ (8002784 <NLLS+0x1bd4>)
 800254a:	443b      	add	r3, r7
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002554:	4b8b      	ldr	r3, [pc, #556]	@ (8002784 <NLLS+0x1bd4>)
 8002556:	443b      	add	r3, r7
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002564:	4b88      	ldr	r3, [pc, #544]	@ (8002788 <NLLS+0x1bd8>)
 8002566:	443b      	add	r3, r7
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002570:	4b85      	ldr	r3, [pc, #532]	@ (8002788 <NLLS+0x1bd8>)
 8002572:	443b      	add	r3, r7
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800257c:	4b7c      	ldr	r3, [pc, #496]	@ (8002770 <NLLS+0x1bc0>)
 800257e:	443b      	add	r3, r7
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002588:	4b79      	ldr	r3, [pc, #484]	@ (8002770 <NLLS+0x1bc0>)
 800258a:	443b      	add	r3, r7
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002594:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259c:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80025a0:	443b      	add	r3, r7
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002760 <NLLS+0x1bb0>)
 80025a6:	443b      	add	r3, r7
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f603 5305 	addw	r3, r3, #3333	@ 0xd05
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	3bf0      	subs	r3, #240	@ 0xf0
 80025b4:	edc3 7a00 	vstr	s15, [r3]

            mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 80025b8:	4b69      	ldr	r3, [pc, #420]	@ (8002760 <NLLS+0x1bb0>)
 80025ba:	443b      	add	r3, r7
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80025c4:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002780 <NLLS+0x1bd0>)
 80025d2:	443b      	add	r3, r7
 80025d4:	ed93 7a00 	vldr	s14, [r3]
 80025d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025dc:	4b62      	ldr	r3, [pc, #392]	@ (8002768 <NLLS+0x1bb8>)
 80025de:	443b      	add	r3, r7
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e8:	4b60      	ldr	r3, [pc, #384]	@ (800276c <NLLS+0x1bbc>)
 80025ea:	443b      	add	r3, r7
 80025ec:	edd3 6a00 	vldr	s13, [r3]
 80025f0:	4b66      	ldr	r3, [pc, #408]	@ (800278c <NLLS+0x1bdc>)
 80025f2:	443b      	add	r3, r7
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025fc:	4b58      	ldr	r3, [pc, #352]	@ (8002760 <NLLS+0x1bb0>)
 80025fe:	443b      	add	r3, r7
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002608:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	4413      	add	r3, r2
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	4b53      	ldr	r3, [pc, #332]	@ (8002764 <NLLS+0x1bb4>)
 8002616:	443b      	add	r3, r7
 8002618:	ed93 6a00 	vldr	s12, [r3]
 800261c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002628:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800262c:	4b4e      	ldr	r3, [pc, #312]	@ (8002768 <NLLS+0x1bb8>)
 800262e:	443b      	add	r3, r7
 8002630:	ed93 7a00 	vldr	s14, [r3]
 8002634:	4b4d      	ldr	r3, [pc, #308]	@ (800276c <NLLS+0x1bbc>)
 8002636:	443b      	add	r3, r7
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002640:	4b4a      	ldr	r3, [pc, #296]	@ (800276c <NLLS+0x1bbc>)
 8002642:	443b      	add	r3, r7
 8002644:	edd3 7a00 	vldr	s15, [r3]
 8002648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800264c:	4b48      	ldr	r3, [pc, #288]	@ (8002770 <NLLS+0x1bc0>)
 800264e:	443b      	add	r3, r7
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002658:	4b45      	ldr	r3, [pc, #276]	@ (8002770 <NLLS+0x1bc0>)
 800265a:	443b      	add	r3, r7
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002668:	4b44      	ldr	r3, [pc, #272]	@ (800277c <NLLS+0x1bcc>)
 800266a:	443b      	add	r3, r7
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002674:	4b3d      	ldr	r3, [pc, #244]	@ (800276c <NLLS+0x1bbc>)
 8002676:	443b      	add	r3, r7
 8002678:	ed93 6a00 	vldr	s12, [r3]
 800267c:	4b3e      	ldr	r3, [pc, #248]	@ (8002778 <NLLS+0x1bc8>)
 800267e:	443b      	add	r3, r7
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002688:	4b3c      	ldr	r3, [pc, #240]	@ (800277c <NLLS+0x1bcc>)
 800268a:	443b      	add	r3, r7
 800268c:	edd3 5a00 	vldr	s11, [r3]
 8002690:	4b3e      	ldr	r3, [pc, #248]	@ (800278c <NLLS+0x1bdc>)
 8002692:	443b      	add	r3, r7
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800269c:	4b39      	ldr	r3, [pc, #228]	@ (8002784 <NLLS+0x1bd4>)
 800269e:	443b      	add	r3, r7
 80026a0:	ed93 5a00 	vldr	s10, [r3]
 80026a4:	4b32      	ldr	r3, [pc, #200]	@ (8002770 <NLLS+0x1bc0>)
 80026a6:	443b      	add	r3, r7
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee25 5a27 	vmul.f32	s10, s10, s15
 80026b0:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <NLLS+0x1be0>)
 80026b2:	443b      	add	r3, r7
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80026bc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80026c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026c4:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <NLLS+0x1bb0>)
 80026c6:	443b      	add	r3, r7
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80026d0:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	4b21      	ldr	r3, [pc, #132]	@ (8002764 <NLLS+0x1bb4>)
 80026de:	443b      	add	r3, r7
 80026e0:	edd3 5a00 	vldr	s11, [r3]
 80026e4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80026e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <NLLS+0x1bb8>)
 80026ee:	443b      	add	r3, r7
 80026f0:	edd3 5a00 	vldr	s11, [r3]
 80026f4:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <NLLS+0x1bbc>)
 80026f6:	443b      	add	r3, r7
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <NLLS+0x1bc0>)
 8002702:	443b      	add	r3, r7
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <NLLS+0x1bb0>)
 800270e:	443b      	add	r3, r7
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002718:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	4413      	add	r3, r2
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <NLLS+0x1bc4>)
 8002726:	443b      	add	r3, r7
 8002728:	ed93 5a00 	vldr	s10, [r3]
 800272c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002730:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002734:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <NLLS+0x1bb8>)
 800273a:	443b      	add	r3, r7
 800273c:	edd3 5a00 	vldr	s11, [r3]
 8002740:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <NLLS+0x1bc8>)
 8002742:	443b      	add	r3, r7
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <NLLS+0x1bcc>)
 800274e:	443b      	add	r3, r7
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002758:	4b01      	ldr	r3, [pc, #4]	@ (8002760 <NLLS+0x1bb0>)
 800275a:	443b      	add	r3, r7
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e019      	b.n	8002794 <NLLS+0x1be4>
 8002760:	00016fb0 	.word	0x00016fb0
 8002764:	00016fd4 	.word	0x00016fd4
 8002768:	00016fe0 	.word	0x00016fe0
 800276c:	00016fdc 	.word	0x00016fdc
 8002770:	00016f74 	.word	0x00016f74
 8002774:	00016fcc 	.word	0x00016fcc
 8002778:	00016fd8 	.word	0x00016fd8
 800277c:	00016f7c 	.word	0x00016f7c
 8002780:	00016fd0 	.word	0x00016fd0
 8002784:	00016f70 	.word	0x00016f70
 8002788:	00016f78 	.word	0x00016f78
 800278c:	00016f80 	.word	0x00016f80
 8002790:	00016f84 	.word	0x00016f84
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800279a:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	4bc0      	ldr	r3, [pc, #768]	@ (8002aa8 <NLLS+0x1ef8>)
 80027a8:	443b      	add	r3, r7
 80027aa:	ed93 5a00 	vldr	s10, [r3]
 80027ae:	ee75 7a67 	vsub.f32	s15, s10, s15
 80027b2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80027b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027ba:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80027be:	4bbb      	ldr	r3, [pc, #748]	@ (8002aac <NLLS+0x1efc>)
 80027c0:	443b      	add	r3, r7
 80027c2:	edd3 6a00 	vldr	s13, [r3]
 80027c6:	4bba      	ldr	r3, [pc, #744]	@ (8002ab0 <NLLS+0x1f00>)
 80027c8:	443b      	add	r3, r7
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027d2:	4bb7      	ldr	r3, [pc, #732]	@ (8002ab0 <NLLS+0x1f00>)
 80027d4:	443b      	add	r3, r7
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027de:	4bb5      	ldr	r3, [pc, #724]	@ (8002ab4 <NLLS+0x1f04>)
 80027e0:	443b      	add	r3, r7
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027ea:	4bb3      	ldr	r3, [pc, #716]	@ (8002ab8 <NLLS+0x1f08>)
 80027ec:	443b      	add	r3, r7
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027f6:	4bb0      	ldr	r3, [pc, #704]	@ (8002ab8 <NLLS+0x1f08>)
 80027f8:	443b      	add	r3, r7
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002802:	4bae      	ldr	r3, [pc, #696]	@ (8002abc <NLLS+0x1f0c>)
 8002804:	443b      	add	r3, r7
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800280e:	4bab      	ldr	r3, [pc, #684]	@ (8002abc <NLLS+0x1f0c>)
 8002810:	443b      	add	r3, r7
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800281a:	4ba9      	ldr	r3, [pc, #676]	@ (8002ac0 <NLLS+0x1f10>)
 800281c:	443b      	add	r3, r7
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002826:	4ba6      	ldr	r3, [pc, #664]	@ (8002ac0 <NLLS+0x1f10>)
 8002828:	443b      	add	r3, r7
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002832:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283a:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 800283e:	443b      	add	r3, r7
 8002840:	4619      	mov	r1, r3
 8002842:	4ba0      	ldr	r3, [pc, #640]	@ (8002ac4 <NLLS+0x1f14>)
 8002844:	443b      	add	r3, r7
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	f241 135c 	movw	r3, #4444	@ 0x115c
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3bf0      	subs	r3, #240	@ 0xf0
 8002854:	edc3 7a00 	vstr	s15, [r3]

            mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002858:	4b95      	ldr	r3, [pc, #596]	@ (8002ab0 <NLLS+0x1f00>)
 800285a:	443b      	add	r3, r7
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	4b94      	ldr	r3, [pc, #592]	@ (8002ab4 <NLLS+0x1f04>)
 8002862:	443b      	add	r3, r7
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286c:	4b96      	ldr	r3, [pc, #600]	@ (8002ac8 <NLLS+0x1f18>)
 800286e:	443b      	add	r3, r7
 8002870:	edd3 6a00 	vldr	s13, [r3]
 8002874:	4b95      	ldr	r3, [pc, #596]	@ (8002acc <NLLS+0x1f1c>)
 8002876:	443b      	add	r3, r7
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002880:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab8 <NLLS+0x1f08>)
 8002882:	443b      	add	r3, r7
 8002884:	ed93 6a00 	vldr	s12, [r3]
 8002888:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac0 <NLLS+0x1f10>)
 800288a:	443b      	add	r3, r7
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002894:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad0 <NLLS+0x1f20>)
 8002896:	443b      	add	r3, r7
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a8:	4b86      	ldr	r3, [pc, #536]	@ (8002ac4 <NLLS+0x1f14>)
 80028aa:	443b      	add	r3, r7
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80028b4:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	4b84      	ldr	r3, [pc, #528]	@ (8002ad4 <NLLS+0x1f24>)
 80028c2:	443b      	add	r3, r7
 80028c4:	edd3 6a00 	vldr	s13, [r3]
 80028c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d0:	4b76      	ldr	r3, [pc, #472]	@ (8002aac <NLLS+0x1efc>)
 80028d2:	443b      	add	r3, r7
 80028d4:	edd3 6a00 	vldr	s13, [r3]
 80028d8:	4b75      	ldr	r3, [pc, #468]	@ (8002ab0 <NLLS+0x1f00>)
 80028da:	443b      	add	r3, r7
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028e4:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <NLLS+0x1f10>)
 80028e6:	443b      	add	r3, r7
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028f0:	4b74      	ldr	r3, [pc, #464]	@ (8002ac4 <NLLS+0x1f14>)
 80028f2:	443b      	add	r3, r7
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80028fc:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	4413      	add	r3, r2
 8002904:	edd3 7a00 	vldr	s15, [r3]
 8002908:	4b73      	ldr	r3, [pc, #460]	@ (8002ad8 <NLLS+0x1f28>)
 800290a:	443b      	add	r3, r7
 800290c:	ed93 6a00 	vldr	s12, [r3]
 8002910:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291c:	4b63      	ldr	r3, [pc, #396]	@ (8002aac <NLLS+0x1efc>)
 800291e:	443b      	add	r3, r7
 8002920:	edd3 6a00 	vldr	s13, [r3]
 8002924:	4b63      	ldr	r3, [pc, #396]	@ (8002ab4 <NLLS+0x1f04>)
 8002926:	443b      	add	r3, r7
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002930:	4b65      	ldr	r3, [pc, #404]	@ (8002ac8 <NLLS+0x1f18>)
 8002932:	443b      	add	r3, r7
 8002934:	edd3 7a00 	vldr	s15, [r3]
 8002938:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800293c:	4b61      	ldr	r3, [pc, #388]	@ (8002ac4 <NLLS+0x1f14>)
 800293e:	443b      	add	r3, r7
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002948:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	4413      	add	r3, r2
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	4b54      	ldr	r3, [pc, #336]	@ (8002aa8 <NLLS+0x1ef8>)
 8002956:	443b      	add	r3, r7
 8002958:	ed93 6a00 	vldr	s12, [r3]
 800295c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002968:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800296c:	4b4f      	ldr	r3, [pc, #316]	@ (8002aac <NLLS+0x1efc>)
 800296e:	443b      	add	r3, r7
 8002970:	ed93 7a00 	vldr	s14, [r3]
 8002974:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab0 <NLLS+0x1f00>)
 8002976:	443b      	add	r3, r7
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002980:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab4 <NLLS+0x1f04>)
 8002982:	443b      	add	r3, r7
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	ee27 7a27 	vmul.f32	s14, s14, s15
 800298c:	4b49      	ldr	r3, [pc, #292]	@ (8002ab4 <NLLS+0x1f04>)
 800298e:	443b      	add	r3, r7
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002998:	4b47      	ldr	r3, [pc, #284]	@ (8002ab8 <NLLS+0x1f08>)
 800299a:	443b      	add	r3, r7
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a4:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <NLLS+0x1f08>)
 80029a6:	443b      	add	r3, r7
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b0:	4b42      	ldr	r3, [pc, #264]	@ (8002abc <NLLS+0x1f0c>)
 80029b2:	443b      	add	r3, r7
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029bc:	4b3f      	ldr	r3, [pc, #252]	@ (8002abc <NLLS+0x1f0c>)
 80029be:	443b      	add	r3, r7
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <NLLS+0x1f10>)
 80029ca:	443b      	add	r3, r7
 80029cc:	edd3 7a00 	vldr	s15, [r3]
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029d8:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80029dc:	443b      	add	r3, r7
 80029de:	4619      	mov	r1, r3
 80029e0:	4b38      	ldr	r3, [pc, #224]	@ (8002ac4 <NLLS+0x1f14>)
 80029e2:	443b      	add	r3, r7
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3bf0      	subs	r3, #240	@ 0xf0
 80029f2:	edc3 7a00 	vstr	s15, [r3]

            mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 80029f6:	4b37      	ldr	r3, [pc, #220]	@ (8002ad4 <NLLS+0x1f24>)
 80029f8:	443b      	add	r3, r7
 80029fa:	ed93 7a00 	vldr	s14, [r3]
 80029fe:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab0 <NLLS+0x1f00>)
 8002a00:	443b      	add	r3, r7
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac4 <NLLS+0x1f14>)
 8002a0c:	443b      	add	r3, r7
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002a16:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	edd3 6a00 	vldr	s13, [r3]
 8002a22:	4b23      	ldr	r3, [pc, #140]	@ (8002ab0 <NLLS+0x1f00>)
 8002a24:	443b      	add	r3, r7
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a32:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <NLLS+0x1ef8>)
 8002a34:	443b      	add	r3, r7
 8002a36:	edd3 6a00 	vldr	s13, [r3]
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002aac <NLLS+0x1efc>)
 8002a3c:	443b      	add	r3, r7
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a46:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <NLLS+0x1f1c>)
 8002a48:	443b      	add	r3, r7
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <NLLS+0x1f14>)
 8002a58:	443b      	add	r3, r7
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002a62:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	4413      	add	r3, r2
 8002a6a:	edd3 6a00 	vldr	s13, [r3]
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <NLLS+0x1efc>)
 8002a70:	443b      	add	r3, r7
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a7a:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <NLLS+0x1f1c>)
 8002a7c:	443b      	add	r3, r7
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <NLLS+0x1ef8>)
 8002a90:	443b      	add	r3, r7
 8002a92:	edd3 6a00 	vldr	s13, [r3]
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <NLLS+0x1efc>)
 8002a98:	443b      	add	r3, r7
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002aa2:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <NLLS+0x1f04>)
 8002aa4:	443b      	add	r3, r7
 8002aa6:	e019      	b.n	8002adc <NLLS+0x1f2c>
 8002aa8:	00016fd0 	.word	0x00016fd0
 8002aac:	00016fe0 	.word	0x00016fe0
 8002ab0:	00016fdc 	.word	0x00016fdc
 8002ab4:	00016fd8 	.word	0x00016fd8
 8002ab8:	00016f70 	.word	0x00016f70
 8002abc:	00016f78 	.word	0x00016f78
 8002ac0:	00016f74 	.word	0x00016f74
 8002ac4:	00016fb0 	.word	0x00016fb0
 8002ac8:	00016f7c 	.word	0x00016f7c
 8002acc:	00016f80 	.word	0x00016f80
 8002ad0:	00016f84 	.word	0x00016f84
 8002ad4:	00016fd4 	.word	0x00016fd4
 8002ad8:	00016fcc 	.word	0x00016fcc
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ae4:	4bbe      	ldr	r3, [pc, #760]	@ (8002de0 <NLLS+0x2230>)
 8002ae6:	443b      	add	r3, r7
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002af0:	4bbb      	ldr	r3, [pc, #748]	@ (8002de0 <NLLS+0x2230>)
 8002af2:	443b      	add	r3, r7
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002afc:	4bb9      	ldr	r3, [pc, #740]	@ (8002de4 <NLLS+0x2234>)
 8002afe:	443b      	add	r3, r7
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002b08:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	ed93 6a00 	vldr	s12, [r3]
 8002b14:	4bb4      	ldr	r3, [pc, #720]	@ (8002de8 <NLLS+0x2238>)
 8002b16:	443b      	add	r3, r7
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b20:	4bb2      	ldr	r3, [pc, #712]	@ (8002dec <NLLS+0x223c>)
 8002b22:	443b      	add	r3, r7
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b2c:	4bac      	ldr	r3, [pc, #688]	@ (8002de0 <NLLS+0x2230>)
 8002b2e:	443b      	add	r3, r7
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b38:	4ba9      	ldr	r3, [pc, #676]	@ (8002de0 <NLLS+0x2230>)
 8002b3a:	443b      	add	r3, r7
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b48:	4ba9      	ldr	r3, [pc, #676]	@ (8002df0 <NLLS+0x2240>)
 8002b4a:	443b      	add	r3, r7
 8002b4c:	ed93 6a00 	vldr	s12, [r3]
 8002b50:	4ba5      	ldr	r3, [pc, #660]	@ (8002de8 <NLLS+0x2238>)
 8002b52:	443b      	add	r3, r7
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b5c:	4ba3      	ldr	r3, [pc, #652]	@ (8002dec <NLLS+0x223c>)
 8002b5e:	443b      	add	r3, r7
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b68:	4ba2      	ldr	r3, [pc, #648]	@ (8002df4 <NLLS+0x2244>)
 8002b6a:	443b      	add	r3, r7
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b74:	4b9f      	ldr	r3, [pc, #636]	@ (8002df4 <NLLS+0x2244>)
 8002b76:	443b      	add	r3, r7
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b80:	4b9d      	ldr	r3, [pc, #628]	@ (8002df8 <NLLS+0x2248>)
 8002b82:	443b      	add	r3, r7
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b8c:	4b9a      	ldr	r3, [pc, #616]	@ (8002df8 <NLLS+0x2248>)
 8002b8e:	443b      	add	r3, r7
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b98:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b9c:	4b91      	ldr	r3, [pc, #580]	@ (8002de4 <NLLS+0x2234>)
 8002b9e:	443b      	add	r3, r7
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002ba8:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	ed93 6a00 	vldr	s12, [r3]
 8002bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002de8 <NLLS+0x2238>)
 8002bb6:	443b      	add	r3, r7
 8002bb8:	edd3 7a00 	vldr	s15, [r3]
 8002bbc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bc0:	4b8a      	ldr	r3, [pc, #552]	@ (8002dec <NLLS+0x223c>)
 8002bc2:	443b      	add	r3, r7
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bcc:	4b89      	ldr	r3, [pc, #548]	@ (8002df4 <NLLS+0x2244>)
 8002bce:	443b      	add	r3, r7
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bd8:	4b86      	ldr	r3, [pc, #536]	@ (8002df4 <NLLS+0x2244>)
 8002bda:	443b      	add	r3, r7
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002be4:	4b84      	ldr	r3, [pc, #528]	@ (8002df8 <NLLS+0x2248>)
 8002be6:	443b      	add	r3, r7
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bf0:	4b81      	ldr	r3, [pc, #516]	@ (8002df8 <NLLS+0x2248>)
 8002bf2:	443b      	add	r3, r7
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c00:	4b7e      	ldr	r3, [pc, #504]	@ (8002dfc <NLLS+0x224c>)
 8002c02:	443b      	add	r3, r7
 8002c04:	ed93 6a00 	vldr	s12, [r3]
 8002c08:	4b77      	ldr	r3, [pc, #476]	@ (8002de8 <NLLS+0x2238>)
 8002c0a:	443b      	add	r3, r7
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c14:	4b7a      	ldr	r3, [pc, #488]	@ (8002e00 <NLLS+0x2250>)
 8002c16:	443b      	add	r3, r7
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c20:	4b78      	ldr	r3, [pc, #480]	@ (8002e04 <NLLS+0x2254>)
 8002c22:	443b      	add	r3, r7
 8002c24:	edd3 7a00 	vldr	s15, [r3]
 8002c28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002de0 <NLLS+0x2230>)
 8002c2e:	443b      	add	r3, r7
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c38:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c3c:	4b69      	ldr	r3, [pc, #420]	@ (8002de4 <NLLS+0x2234>)
 8002c3e:	443b      	add	r3, r7
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002c48:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	ed93 6a00 	vldr	s12, [r3]
 8002c54:	4b64      	ldr	r3, [pc, #400]	@ (8002de8 <NLLS+0x2238>)
 8002c56:	443b      	add	r3, r7
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c60:	4b67      	ldr	r3, [pc, #412]	@ (8002e00 <NLLS+0x2250>)
 8002c62:	443b      	add	r3, r7
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c6c:	4b65      	ldr	r3, [pc, #404]	@ (8002e04 <NLLS+0x2254>)
 8002c6e:	443b      	add	r3, r7
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c78:	4b59      	ldr	r3, [pc, #356]	@ (8002de0 <NLLS+0x2230>)
 8002c7a:	443b      	add	r3, r7
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c88:	4b5f      	ldr	r3, [pc, #380]	@ (8002e08 <NLLS+0x2258>)
 8002c8a:	443b      	add	r3, r7
 8002c8c:	ed93 6a00 	vldr	s12, [r3]
 8002c90:	4b5b      	ldr	r3, [pc, #364]	@ (8002e00 <NLLS+0x2250>)
 8002c92:	443b      	add	r3, r7
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c9c:	4b53      	ldr	r3, [pc, #332]	@ (8002dec <NLLS+0x223c>)
 8002c9e:	443b      	add	r3, r7
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8002de0 <NLLS+0x2230>)
 8002caa:	443b      	add	r3, r7
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cb4:	4b4a      	ldr	r3, [pc, #296]	@ (8002de0 <NLLS+0x2230>)
 8002cb6:	443b      	add	r3, r7
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cc0:	4b52      	ldr	r3, [pc, #328]	@ (8002e0c <NLLS+0x225c>)
 8002cc2:	443b      	add	r3, r7
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ccc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cd0:	4b44      	ldr	r3, [pc, #272]	@ (8002de4 <NLLS+0x2234>)
 8002cd2:	443b      	add	r3, r7
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002cdc:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	ed93 6a00 	vldr	s12, [r3]
 8002ce8:	4b45      	ldr	r3, [pc, #276]	@ (8002e00 <NLLS+0x2250>)
 8002cea:	443b      	add	r3, r7
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dec <NLLS+0x223c>)
 8002cf6:	443b      	add	r3, r7
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d00:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <NLLS+0x2230>)
 8002d02:	443b      	add	r3, r7
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d0c:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <NLLS+0x2230>)
 8002d0e:	443b      	add	r3, r7
 8002d10:	edd3 7a00 	vldr	s15, [r3]
 8002d14:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d18:	4b3c      	ldr	r3, [pc, #240]	@ (8002e0c <NLLS+0x225c>)
 8002d1a:	443b      	add	r3, r7
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d28:	4b37      	ldr	r3, [pc, #220]	@ (8002e08 <NLLS+0x2258>)
 8002d2a:	443b      	add	r3, r7
 8002d2c:	ed93 6a00 	vldr	s12, [r3]
 8002d30:	4b33      	ldr	r3, [pc, #204]	@ (8002e00 <NLLS+0x2250>)
 8002d32:	443b      	add	r3, r7
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dec <NLLS+0x223c>)
 8002d3e:	443b      	add	r3, r7
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d48:	4b2a      	ldr	r3, [pc, #168]	@ (8002df4 <NLLS+0x2244>)
 8002d4a:	443b      	add	r3, r7
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d54:	4b27      	ldr	r3, [pc, #156]	@ (8002df4 <NLLS+0x2244>)
 8002d56:	443b      	add	r3, r7
 8002d58:	edd3 7a00 	vldr	s15, [r3]
 8002d5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d60:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <NLLS+0x2248>)
 8002d62:	443b      	add	r3, r7
 8002d64:	edd3 7a00 	vldr	s15, [r3]
 8002d68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d6c:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <NLLS+0x2248>)
 8002d6e:	443b      	add	r3, r7
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d78:	4b24      	ldr	r3, [pc, #144]	@ (8002e0c <NLLS+0x225c>)
 8002d7a:	443b      	add	r3, r7
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d88:	4b16      	ldr	r3, [pc, #88]	@ (8002de4 <NLLS+0x2234>)
 8002d8a:	443b      	add	r3, r7
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002d94:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	ed93 6a00 	vldr	s12, [r3]
 8002da0:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <NLLS+0x2250>)
 8002da2:	443b      	add	r3, r7
 8002da4:	edd3 7a00 	vldr	s15, [r3]
 8002da8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <NLLS+0x223c>)
 8002dae:	443b      	add	r3, r7
 8002db0:	edd3 7a00 	vldr	s15, [r3]
 8002db4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <NLLS+0x2244>)
 8002dba:	443b      	add	r3, r7
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <NLLS+0x2244>)
 8002dc6:	443b      	add	r3, r7
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <NLLS+0x2248>)
 8002dd2:	443b      	add	r3, r7
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ddc:	e018      	b.n	8002e10 <NLLS+0x2260>
 8002dde:	bf00      	nop
 8002de0:	00016f7c 	.word	0x00016f7c
 8002de4:	00016fb0 	.word	0x00016fb0
 8002de8:	00016fe0 	.word	0x00016fe0
 8002dec:	00016fd8 	.word	0x00016fd8
 8002df0:	00016fd0 	.word	0x00016fd0
 8002df4:	00016f70 	.word	0x00016f70
 8002df8:	00016f78 	.word	0x00016f78
 8002dfc:	00016fcc 	.word	0x00016fcc
 8002e00:	00016fdc 	.word	0x00016fdc
 8002e04:	00016f74 	.word	0x00016f74
 8002e08:	00016fd4 	.word	0x00016fd4
 8002e0c:	00016f80 	.word	0x00016f80
 8002e10:	4bbf      	ldr	r3, [pc, #764]	@ (8003110 <NLLS+0x2560>)
 8002e12:	443b      	add	r3, r7
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e1c:	4bbd      	ldr	r3, [pc, #756]	@ (8003114 <NLLS+0x2564>)
 8002e1e:	443b      	add	r3, r7
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e2c:	4bba      	ldr	r3, [pc, #744]	@ (8003118 <NLLS+0x2568>)
 8002e2e:	443b      	add	r3, r7
 8002e30:	ed93 6a00 	vldr	s12, [r3]
 8002e34:	4bb9      	ldr	r3, [pc, #740]	@ (800311c <NLLS+0x256c>)
 8002e36:	443b      	add	r3, r7
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e40:	4bb7      	ldr	r3, [pc, #732]	@ (8003120 <NLLS+0x2570>)
 8002e42:	443b      	add	r3, r7
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e4c:	4bb5      	ldr	r3, [pc, #724]	@ (8003124 <NLLS+0x2574>)
 8002e4e:	443b      	add	r3, r7
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e58:	4bb3      	ldr	r3, [pc, #716]	@ (8003128 <NLLS+0x2578>)
 8002e5a:	443b      	add	r3, r7
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e64:	4bb1      	ldr	r3, [pc, #708]	@ (800312c <NLLS+0x257c>)
 8002e66:	443b      	add	r3, r7
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e70:	4baf      	ldr	r3, [pc, #700]	@ (8003130 <NLLS+0x2580>)
 8002e72:	443b      	add	r3, r7
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e7c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e80:	4bac      	ldr	r3, [pc, #688]	@ (8003134 <NLLS+0x2584>)
 8002e82:	443b      	add	r3, r7
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002e8c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	ed93 6a00 	vldr	s12, [r3]
 8002e98:	4ba0      	ldr	r3, [pc, #640]	@ (800311c <NLLS+0x256c>)
 8002e9a:	443b      	add	r3, r7
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ea4:	4b9e      	ldr	r3, [pc, #632]	@ (8003120 <NLLS+0x2570>)
 8002ea6:	443b      	add	r3, r7
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002eb0:	4b9c      	ldr	r3, [pc, #624]	@ (8003124 <NLLS+0x2574>)
 8002eb2:	443b      	add	r3, r7
 8002eb4:	edd3 7a00 	vldr	s15, [r3]
 8002eb8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ebc:	4b9a      	ldr	r3, [pc, #616]	@ (8003128 <NLLS+0x2578>)
 8002ebe:	443b      	add	r3, r7
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ec8:	4b98      	ldr	r3, [pc, #608]	@ (800312c <NLLS+0x257c>)
 8002eca:	443b      	add	r3, r7
 8002ecc:	edd3 7a00 	vldr	s15, [r3]
 8002ed0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ed4:	4b96      	ldr	r3, [pc, #600]	@ (8003130 <NLLS+0x2580>)
 8002ed6:	443b      	add	r3, r7
 8002ed8:	edd3 7a00 	vldr	s15, [r3]
 8002edc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ee0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee8:	eef1 6a67 	vneg.f32	s13, s15
 8002eec:	4b92      	ldr	r3, [pc, #584]	@ (8003138 <NLLS+0x2588>)
 8002eee:	443b      	add	r3, r7
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ef8:	4b88      	ldr	r3, [pc, #544]	@ (800311c <NLLS+0x256c>)
 8002efa:	443b      	add	r3, r7
 8002efc:	edd3 7a00 	vldr	s15, [r3]
 8002f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f04:	4b85      	ldr	r3, [pc, #532]	@ (800311c <NLLS+0x256c>)
 8002f06:	443b      	add	r3, r7
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f10:	4b83      	ldr	r3, [pc, #524]	@ (8003120 <NLLS+0x2570>)
 8002f12:	443b      	add	r3, r7
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1c:	4b81      	ldr	r3, [pc, #516]	@ (8003124 <NLLS+0x2574>)
 8002f1e:	443b      	add	r3, r7
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f28:	4b7e      	ldr	r3, [pc, #504]	@ (8003124 <NLLS+0x2574>)
 8002f2a:	443b      	add	r3, r7
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f34:	4b76      	ldr	r3, [pc, #472]	@ (8003110 <NLLS+0x2560>)
 8002f36:	443b      	add	r3, r7
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f40:	4b73      	ldr	r3, [pc, #460]	@ (8003110 <NLLS+0x2560>)
 8002f42:	443b      	add	r3, r7
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f4c:	4b76      	ldr	r3, [pc, #472]	@ (8003128 <NLLS+0x2578>)
 8002f4e:	443b      	add	r3, r7
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002f58:	4b73      	ldr	r3, [pc, #460]	@ (8003128 <NLLS+0x2578>)
 8002f5a:	443b      	add	r3, r7
 8002f5c:	edd3 7a00 	vldr	s15, [r3]
 8002f60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f6c:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8002f70:	443b      	add	r3, r7
 8002f72:	4619      	mov	r1, r3
 8002f74:	4b6f      	ldr	r3, [pc, #444]	@ (8003134 <NLLS+0x2584>)
 8002f76:	443b      	add	r3, r7
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3bf0      	subs	r3, #240	@ 0xf0
 8002f86:	edc3 7a00 	vstr	s15, [r3]

            mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 8002f8a:	4b69      	ldr	r3, [pc, #420]	@ (8003130 <NLLS+0x2580>)
 8002f8c:	443b      	add	r3, r7
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f96:	4b61      	ldr	r3, [pc, #388]	@ (800311c <NLLS+0x256c>)
 8002f98:	443b      	add	r3, r7
 8002f9a:	edd3 6a00 	vldr	s13, [r3]
 8002f9e:	4b60      	ldr	r3, [pc, #384]	@ (8003120 <NLLS+0x2570>)
 8002fa0:	443b      	add	r3, r7
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002faa:	4b60      	ldr	r3, [pc, #384]	@ (800312c <NLLS+0x257c>)
 8002fac:	443b      	add	r3, r7
 8002fae:	ed93 6a00 	vldr	s12, [r3]
 8002fb2:	4b58      	ldr	r3, [pc, #352]	@ (8003114 <NLLS+0x2564>)
 8002fb4:	443b      	add	r3, r7
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002fbe:	4b59      	ldr	r3, [pc, #356]	@ (8003124 <NLLS+0x2574>)
 8002fc0:	443b      	add	r3, r7
 8002fc2:	edd3 5a00 	vldr	s11, [r3]
 8002fc6:	4b58      	ldr	r3, [pc, #352]	@ (8003128 <NLLS+0x2578>)
 8002fc8:	443b      	add	r3, r7
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002fd2:	4b57      	ldr	r3, [pc, #348]	@ (8003130 <NLLS+0x2580>)
 8002fd4:	443b      	add	r3, r7
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002fde:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fe2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fe6:	4b53      	ldr	r3, [pc, #332]	@ (8003134 <NLLS+0x2584>)
 8002fe8:	443b      	add	r3, r7
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002ff2:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	4b46      	ldr	r3, [pc, #280]	@ (8003118 <NLLS+0x2568>)
 8003000:	443b      	add	r3, r7
 8003002:	ed93 6a00 	vldr	s12, [r3]
 8003006:	ee76 7a67 	vsub.f32	s15, s12, s15
 800300a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800300e:	4b4a      	ldr	r3, [pc, #296]	@ (8003138 <NLLS+0x2588>)
 8003010:	443b      	add	r3, r7
 8003012:	ed93 6a00 	vldr	s12, [r3]
 8003016:	4b41      	ldr	r3, [pc, #260]	@ (800311c <NLLS+0x256c>)
 8003018:	443b      	add	r3, r7
 800301a:	edd3 7a00 	vldr	s15, [r3]
 800301e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <NLLS+0x2578>)
 8003024:	443b      	add	r3, r7
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800302e:	4b41      	ldr	r3, [pc, #260]	@ (8003134 <NLLS+0x2584>)
 8003030:	443b      	add	r3, r7
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800303a:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	4413      	add	r3, r2
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	4b3d      	ldr	r3, [pc, #244]	@ (800313c <NLLS+0x258c>)
 8003048:	443b      	add	r3, r7
 800304a:	edd3 5a00 	vldr	s11, [r3]
 800304e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003052:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003056:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800305a:	4b37      	ldr	r3, [pc, #220]	@ (8003138 <NLLS+0x2588>)
 800305c:	443b      	add	r3, r7
 800305e:	ed93 6a00 	vldr	s12, [r3]
 8003062:	4b2f      	ldr	r3, [pc, #188]	@ (8003120 <NLLS+0x2570>)
 8003064:	443b      	add	r3, r7
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800306e:	4b2f      	ldr	r3, [pc, #188]	@ (800312c <NLLS+0x257c>)
 8003070:	443b      	add	r3, r7
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	ee26 6a27 	vmul.f32	s12, s12, s15
 800307a:	4b2e      	ldr	r3, [pc, #184]	@ (8003134 <NLLS+0x2584>)
 800307c:	443b      	add	r3, r7
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003086:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	4413      	add	r3, r2
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	4b2b      	ldr	r3, [pc, #172]	@ (8003140 <NLLS+0x2590>)
 8003094:	443b      	add	r3, r7
 8003096:	edd3 5a00 	vldr	s11, [r3]
 800309a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800309e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80030a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80030a6:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <NLLS+0x256c>)
 80030a8:	443b      	add	r3, r7
 80030aa:	ed93 6a00 	vldr	s12, [r3]
 80030ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003120 <NLLS+0x2570>)
 80030b0:	443b      	add	r3, r7
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80030ba:	4b1c      	ldr	r3, [pc, #112]	@ (800312c <NLLS+0x257c>)
 80030bc:	443b      	add	r3, r7
 80030be:	edd3 5a00 	vldr	s11, [r3]
 80030c2:	4b14      	ldr	r3, [pc, #80]	@ (8003114 <NLLS+0x2564>)
 80030c4:	443b      	add	r3, r7
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <NLLS+0x2574>)
 80030d0:	443b      	add	r3, r7
 80030d2:	ed93 5a00 	vldr	s10, [r3]
 80030d6:	4b14      	ldr	r3, [pc, #80]	@ (8003128 <NLLS+0x2578>)
 80030d8:	443b      	add	r3, r7
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	ee25 5a27 	vmul.f32	s10, s10, s15
 80030e2:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <NLLS+0x2580>)
 80030e4:	443b      	add	r3, r7
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee65 7a27 	vmul.f32	s15, s10, s15
 80030ee:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80030f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80030f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <NLLS+0x2584>)
 80030f8:	443b      	add	r3, r7
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003102:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	4413      	add	r3, r2
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	e019      	b.n	8003144 <NLLS+0x2594>
 8003110:	00016f78 	.word	0x00016f78
 8003114:	00016f80 	.word	0x00016f80
 8003118:	00016fd4 	.word	0x00016fd4
 800311c:	00016fdc 	.word	0x00016fdc
 8003120:	00016fd8 	.word	0x00016fd8
 8003124:	00016f70 	.word	0x00016f70
 8003128:	00016f74 	.word	0x00016f74
 800312c:	00016f7c 	.word	0x00016f7c
 8003130:	00016f84 	.word	0x00016f84
 8003134:	00016fb0 	.word	0x00016fb0
 8003138:	00016fe0 	.word	0x00016fe0
 800313c:	00016fcc 	.word	0x00016fcc
 8003140:	00016fd0 	.word	0x00016fd0
 8003144:	4bc0      	ldr	r3, [pc, #768]	@ (8003448 <NLLS+0x2898>)
 8003146:	443b      	add	r3, r7
 8003148:	edd3 5a00 	vldr	s11, [r3]
 800314c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003150:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003154:	4bbd      	ldr	r3, [pc, #756]	@ (800344c <NLLS+0x289c>)
 8003156:	443b      	add	r3, r7
 8003158:	edd3 5a00 	vldr	s11, [r3]
 800315c:	4bbc      	ldr	r3, [pc, #752]	@ (8003450 <NLLS+0x28a0>)
 800315e:	443b      	add	r3, r7
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003168:	4bba      	ldr	r3, [pc, #744]	@ (8003454 <NLLS+0x28a4>)
 800316a:	443b      	add	r3, r7
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003174:	4bb8      	ldr	r3, [pc, #736]	@ (8003458 <NLLS+0x28a8>)
 8003176:	443b      	add	r3, r7
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003180:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	4413      	add	r3, r2
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	4bb3      	ldr	r3, [pc, #716]	@ (800345c <NLLS+0x28ac>)
 800318e:	443b      	add	r3, r7
 8003190:	ed93 5a00 	vldr	s10, [r3]
 8003194:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003198:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800319c:	ee36 6a27 	vadd.f32	s12, s12, s15
 80031a0:	4baa      	ldr	r3, [pc, #680]	@ (800344c <NLLS+0x289c>)
 80031a2:	443b      	add	r3, r7
 80031a4:	edd3 5a00 	vldr	s11, [r3]
 80031a8:	4bad      	ldr	r3, [pc, #692]	@ (8003460 <NLLS+0x28b0>)
 80031aa:	443b      	add	r3, r7
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80031b4:	4bab      	ldr	r3, [pc, #684]	@ (8003464 <NLLS+0x28b4>)
 80031b6:	443b      	add	r3, r7
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80031c0:	4ba5      	ldr	r3, [pc, #660]	@ (8003458 <NLLS+0x28a8>)
 80031c2:	443b      	add	r3, r7
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80031cc:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	4ba3      	ldr	r3, [pc, #652]	@ (8003468 <NLLS+0x28b8>)
 80031da:	443b      	add	r3, r7
 80031dc:	ed93 5a00 	vldr	s10, [r3]
 80031e0:	ee75 7a67 	vsub.f32	s15, s10, s15
 80031e4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80031e8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80031f4:	4b95      	ldr	r3, [pc, #596]	@ (800344c <NLLS+0x289c>)
 80031f6:	443b      	add	r3, r7
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003200:	4b93      	ldr	r3, [pc, #588]	@ (8003450 <NLLS+0x28a0>)
 8003202:	443b      	add	r3, r7
 8003204:	edd3 7a00 	vldr	s15, [r3]
 8003208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320c:	4b90      	ldr	r3, [pc, #576]	@ (8003450 <NLLS+0x28a0>)
 800320e:	443b      	add	r3, r7
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003218:	4b91      	ldr	r3, [pc, #580]	@ (8003460 <NLLS+0x28b0>)
 800321a:	443b      	add	r3, r7
 800321c:	edd3 7a00 	vldr	s15, [r3]
 8003220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003224:	4b8e      	ldr	r3, [pc, #568]	@ (8003460 <NLLS+0x28b0>)
 8003226:	443b      	add	r3, r7
 8003228:	edd3 7a00 	vldr	s15, [r3]
 800322c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003230:	4b8e      	ldr	r3, [pc, #568]	@ (800346c <NLLS+0x28bc>)
 8003232:	443b      	add	r3, r7
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800323c:	4b8b      	ldr	r3, [pc, #556]	@ (800346c <NLLS+0x28bc>)
 800323e:	443b      	add	r3, r7
 8003240:	edd3 7a00 	vldr	s15, [r3]
 8003244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003248:	4b89      	ldr	r3, [pc, #548]	@ (8003470 <NLLS+0x28c0>)
 800324a:	443b      	add	r3, r7
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003254:	4b86      	ldr	r3, [pc, #536]	@ (8003470 <NLLS+0x28c0>)
 8003256:	443b      	add	r3, r7
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003264:	4b7b      	ldr	r3, [pc, #492]	@ (8003454 <NLLS+0x28a4>)
 8003266:	443b      	add	r3, r7
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003270:	4b78      	ldr	r3, [pc, #480]	@ (8003454 <NLLS+0x28a4>)
 8003272:	443b      	add	r3, r7
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003280:	4b75      	ldr	r3, [pc, #468]	@ (8003458 <NLLS+0x28a8>)
 8003282:	443b      	add	r3, r7
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800328c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	4413      	add	r3, r2
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	4b6b      	ldr	r3, [pc, #428]	@ (8003448 <NLLS+0x2898>)
 800329a:	443b      	add	r3, r7
 800329c:	edd3 6a00 	vldr	s13, [r3]
 80032a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80032a8:	4b69      	ldr	r3, [pc, #420]	@ (8003450 <NLLS+0x28a0>)
 80032aa:	443b      	add	r3, r7
 80032ac:	ed93 6a00 	vldr	s12, [r3]
 80032b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003460 <NLLS+0x28b0>)
 80032b2:	443b      	add	r3, r7
 80032b4:	edd3 7a00 	vldr	s15, [r3]
 80032b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032bc:	4b69      	ldr	r3, [pc, #420]	@ (8003464 <NLLS+0x28b4>)
 80032be:	443b      	add	r3, r7
 80032c0:	edd3 5a00 	vldr	s11, [r3]
 80032c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003474 <NLLS+0x28c4>)
 80032c6:	443b      	add	r3, r7
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80032d0:	4b66      	ldr	r3, [pc, #408]	@ (800346c <NLLS+0x28bc>)
 80032d2:	443b      	add	r3, r7
 80032d4:	ed93 5a00 	vldr	s10, [r3]
 80032d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003454 <NLLS+0x28a4>)
 80032da:	443b      	add	r3, r7
 80032dc:	edd3 7a00 	vldr	s15, [r3]
 80032e0:	ee25 5a27 	vmul.f32	s10, s10, s15
 80032e4:	4b64      	ldr	r3, [pc, #400]	@ (8003478 <NLLS+0x28c8>)
 80032e6:	443b      	add	r3, r7
 80032e8:	edd3 7a00 	vldr	s15, [r3]
 80032ec:	ee65 7a27 	vmul.f32	s15, s10, s15
 80032f0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80032f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032f8:	4b57      	ldr	r3, [pc, #348]	@ (8003458 <NLLS+0x28a8>)
 80032fa:	443b      	add	r3, r7
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003304:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	4413      	add	r3, r2
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	4b4d      	ldr	r3, [pc, #308]	@ (8003448 <NLLS+0x2898>)
 8003312:	443b      	add	r3, r7
 8003314:	edd3 5a00 	vldr	s11, [r3]
 8003318:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800331c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003320:	4b4a      	ldr	r3, [pc, #296]	@ (800344c <NLLS+0x289c>)
 8003322:	443b      	add	r3, r7
 8003324:	edd3 5a00 	vldr	s11, [r3]
 8003328:	4b49      	ldr	r3, [pc, #292]	@ (8003450 <NLLS+0x28a0>)
 800332a:	443b      	add	r3, r7
 800332c:	edd3 7a00 	vldr	s15, [r3]
 8003330:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003334:	4b47      	ldr	r3, [pc, #284]	@ (8003454 <NLLS+0x28a4>)
 8003336:	443b      	add	r3, r7
 8003338:	edd3 7a00 	vldr	s15, [r3]
 800333c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003340:	4b45      	ldr	r3, [pc, #276]	@ (8003458 <NLLS+0x28a8>)
 8003342:	443b      	add	r3, r7
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800334c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	4413      	add	r3, r2
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	4b40      	ldr	r3, [pc, #256]	@ (800345c <NLLS+0x28ac>)
 800335a:	443b      	add	r3, r7
 800335c:	ed93 5a00 	vldr	s10, [r3]
 8003360:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003364:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003368:	ee36 6a27 	vadd.f32	s12, s12, s15
 800336c:	4b37      	ldr	r3, [pc, #220]	@ (800344c <NLLS+0x289c>)
 800336e:	443b      	add	r3, r7
 8003370:	edd3 5a00 	vldr	s11, [r3]
 8003374:	4b3a      	ldr	r3, [pc, #232]	@ (8003460 <NLLS+0x28b0>)
 8003376:	443b      	add	r3, r7
 8003378:	edd3 7a00 	vldr	s15, [r3]
 800337c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003380:	4b38      	ldr	r3, [pc, #224]	@ (8003464 <NLLS+0x28b4>)
 8003382:	443b      	add	r3, r7
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800338c:	4b32      	ldr	r3, [pc, #200]	@ (8003458 <NLLS+0x28a8>)
 800338e:	443b      	add	r3, r7
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003398:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	4b30      	ldr	r3, [pc, #192]	@ (8003468 <NLLS+0x28b8>)
 80033a6:	443b      	add	r3, r7
 80033a8:	ed93 5a00 	vldr	s10, [r3]
 80033ac:	ee75 7a67 	vsub.f32	s15, s10, s15
 80033b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80033b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80033b8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80033bc:	4b23      	ldr	r3, [pc, #140]	@ (800344c <NLLS+0x289c>)
 80033be:	443b      	add	r3, r7
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80033c8:	4b21      	ldr	r3, [pc, #132]	@ (8003450 <NLLS+0x28a0>)
 80033ca:	443b      	add	r3, r7
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033d4:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <NLLS+0x28b0>)
 80033d6:	443b      	add	r3, r7
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033e0:	4b22      	ldr	r3, [pc, #136]	@ (800346c <NLLS+0x28bc>)
 80033e2:	443b      	add	r3, r7
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033ec:	4b20      	ldr	r3, [pc, #128]	@ (8003470 <NLLS+0x28c0>)
 80033ee:	443b      	add	r3, r7
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033f8:	4b16      	ldr	r3, [pc, #88]	@ (8003454 <NLLS+0x28a4>)
 80033fa:	443b      	add	r3, r7
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003404:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340c:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003410:	443b      	add	r3, r7
 8003412:	4619      	mov	r1, r3
 8003414:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <NLLS+0x28a8>)
 8003416:	443b      	add	r3, r7
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	f641 6361 	movw	r3, #7777	@ 0x1e61
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3bf0      	subs	r3, #240	@ 0xf0
 8003426:	edc3 7a00 	vstr	s15, [r3]

            mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800342a:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <NLLS+0x28b4>)
 800342c:	443b      	add	r3, r7
 800342e:	edd3 7a00 	vldr	s15, [r3]
 8003432:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003436:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <NLLS+0x28a0>)
 8003438:	443b      	add	r3, r7
 800343a:	edd3 6a00 	vldr	s13, [r3]
 800343e:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <NLLS+0x28b0>)
 8003440:	443b      	add	r3, r7
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	e019      	b.n	800347c <NLLS+0x28cc>
 8003448:	00016fd4 	.word	0x00016fd4
 800344c:	00016fe0 	.word	0x00016fe0
 8003450:	00016fdc 	.word	0x00016fdc
 8003454:	00016f74 	.word	0x00016f74
 8003458:	00016fb0 	.word	0x00016fb0
 800345c:	00016fcc 	.word	0x00016fcc
 8003460:	00016fd8 	.word	0x00016fd8
 8003464:	00016f7c 	.word	0x00016f7c
 8003468:	00016fd0 	.word	0x00016fd0
 800346c:	00016f70 	.word	0x00016f70
 8003470:	00016f78 	.word	0x00016f78
 8003474:	00016f80 	.word	0x00016f80
 8003478:	00016f84 	.word	0x00016f84
 800347c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003480:	4bc0      	ldr	r3, [pc, #768]	@ (8003784 <NLLS+0x2bd4>)
 8003482:	443b      	add	r3, r7
 8003484:	ed93 6a00 	vldr	s12, [r3]
 8003488:	4bbf      	ldr	r3, [pc, #764]	@ (8003788 <NLLS+0x2bd8>)
 800348a:	443b      	add	r3, r7
 800348c:	edd3 7a00 	vldr	s15, [r3]
 8003490:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003494:	4bbd      	ldr	r3, [pc, #756]	@ (800378c <NLLS+0x2bdc>)
 8003496:	443b      	add	r3, r7
 8003498:	edd3 5a00 	vldr	s11, [r3]
 800349c:	4bbc      	ldr	r3, [pc, #752]	@ (8003790 <NLLS+0x2be0>)
 800349e:	443b      	add	r3, r7
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80034a8:	4bba      	ldr	r3, [pc, #744]	@ (8003794 <NLLS+0x2be4>)
 80034aa:	443b      	add	r3, r7
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80034b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034bc:	4bb6      	ldr	r3, [pc, #728]	@ (8003798 <NLLS+0x2be8>)
 80034be:	443b      	add	r3, r7
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80034c8:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4413      	add	r3, r2
 80034d0:	edd3 7a00 	vldr	s15, [r3]
 80034d4:	4bb1      	ldr	r3, [pc, #708]	@ (800379c <NLLS+0x2bec>)
 80034d6:	443b      	add	r3, r7
 80034d8:	ed93 6a00 	vldr	s12, [r3]
 80034dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034e4:	4bae      	ldr	r3, [pc, #696]	@ (80037a0 <NLLS+0x2bf0>)
 80034e6:	443b      	add	r3, r7
 80034e8:	ed93 6a00 	vldr	s12, [r3]
 80034ec:	4bad      	ldr	r3, [pc, #692]	@ (80037a4 <NLLS+0x2bf4>)
 80034ee:	443b      	add	r3, r7
 80034f0:	edd3 7a00 	vldr	s15, [r3]
 80034f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034f8:	4ba5      	ldr	r3, [pc, #660]	@ (8003790 <NLLS+0x2be0>)
 80034fa:	443b      	add	r3, r7
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003504:	4ba4      	ldr	r3, [pc, #656]	@ (8003798 <NLLS+0x2be8>)
 8003506:	443b      	add	r3, r7
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003510:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	4413      	add	r3, r2
 8003518:	edd3 7a00 	vldr	s15, [r3]
 800351c:	4ba2      	ldr	r3, [pc, #648]	@ (80037a8 <NLLS+0x2bf8>)
 800351e:	443b      	add	r3, r7
 8003520:	edd3 5a00 	vldr	s11, [r3]
 8003524:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003528:	ee66 7a27 	vmul.f32	s15, s12, s15
 800352c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003530:	4b9b      	ldr	r3, [pc, #620]	@ (80037a0 <NLLS+0x2bf0>)
 8003532:	443b      	add	r3, r7
 8003534:	ed93 6a00 	vldr	s12, [r3]
 8003538:	4b9c      	ldr	r3, [pc, #624]	@ (80037ac <NLLS+0x2bfc>)
 800353a:	443b      	add	r3, r7
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003544:	4b8f      	ldr	r3, [pc, #572]	@ (8003784 <NLLS+0x2bd4>)
 8003546:	443b      	add	r3, r7
 8003548:	edd3 7a00 	vldr	s15, [r3]
 800354c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003550:	4b91      	ldr	r3, [pc, #580]	@ (8003798 <NLLS+0x2be8>)
 8003552:	443b      	add	r3, r7
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800355c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	4413      	add	r3, r2
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	4b91      	ldr	r3, [pc, #580]	@ (80037b0 <NLLS+0x2c00>)
 800356a:	443b      	add	r3, r7
 800356c:	edd3 5a00 	vldr	s11, [r3]
 8003570:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003574:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003578:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800357c:	4b89      	ldr	r3, [pc, #548]	@ (80037a4 <NLLS+0x2bf4>)
 800357e:	443b      	add	r3, r7
 8003580:	ed93 6a00 	vldr	s12, [r3]
 8003584:	4b89      	ldr	r3, [pc, #548]	@ (80037ac <NLLS+0x2bfc>)
 8003586:	443b      	add	r3, r7
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003590:	4b7c      	ldr	r3, [pc, #496]	@ (8003784 <NLLS+0x2bd4>)
 8003592:	443b      	add	r3, r7
 8003594:	edd3 5a00 	vldr	s11, [r3]
 8003598:	4b7b      	ldr	r3, [pc, #492]	@ (8003788 <NLLS+0x2bd8>)
 800359a:	443b      	add	r3, r7
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80035a4:	4b79      	ldr	r3, [pc, #484]	@ (800378c <NLLS+0x2bdc>)
 80035a6:	443b      	add	r3, r7
 80035a8:	ed93 5a00 	vldr	s10, [r3]
 80035ac:	4b78      	ldr	r3, [pc, #480]	@ (8003790 <NLLS+0x2be0>)
 80035ae:	443b      	add	r3, r7
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee25 5a27 	vmul.f32	s10, s10, s15
 80035b8:	4b76      	ldr	r3, [pc, #472]	@ (8003794 <NLLS+0x2be4>)
 80035ba:	443b      	add	r3, r7
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80035c4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80035c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035cc:	4b72      	ldr	r3, [pc, #456]	@ (8003798 <NLLS+0x2be8>)
 80035ce:	443b      	add	r3, r7
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80035d8:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	4b6d      	ldr	r3, [pc, #436]	@ (800379c <NLLS+0x2bec>)
 80035e6:	443b      	add	r3, r7
 80035e8:	edd3 5a00 	vldr	s11, [r3]
 80035ec:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80035f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035f4:	4b6a      	ldr	r3, [pc, #424]	@ (80037a0 <NLLS+0x2bf0>)
 80035f6:	443b      	add	r3, r7
 80035f8:	edd3 5a00 	vldr	s11, [r3]
 80035fc:	4b69      	ldr	r3, [pc, #420]	@ (80037a4 <NLLS+0x2bf4>)
 80035fe:	443b      	add	r3, r7
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003608:	4b61      	ldr	r3, [pc, #388]	@ (8003790 <NLLS+0x2be0>)
 800360a:	443b      	add	r3, r7
 800360c:	edd3 7a00 	vldr	s15, [r3]
 8003610:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003614:	4b60      	ldr	r3, [pc, #384]	@ (8003798 <NLLS+0x2be8>)
 8003616:	443b      	add	r3, r7
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003620:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	4413      	add	r3, r2
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	4b5e      	ldr	r3, [pc, #376]	@ (80037a8 <NLLS+0x2bf8>)
 800362e:	443b      	add	r3, r7
 8003630:	ed93 5a00 	vldr	s10, [r3]
 8003634:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003638:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800363c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003640:	4b57      	ldr	r3, [pc, #348]	@ (80037a0 <NLLS+0x2bf0>)
 8003642:	443b      	add	r3, r7
 8003644:	edd3 5a00 	vldr	s11, [r3]
 8003648:	4b58      	ldr	r3, [pc, #352]	@ (80037ac <NLLS+0x2bfc>)
 800364a:	443b      	add	r3, r7
 800364c:	edd3 7a00 	vldr	s15, [r3]
 8003650:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003654:	4b4b      	ldr	r3, [pc, #300]	@ (8003784 <NLLS+0x2bd4>)
 8003656:	443b      	add	r3, r7
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003660:	4b4d      	ldr	r3, [pc, #308]	@ (8003798 <NLLS+0x2be8>)
 8003662:	443b      	add	r3, r7
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800366c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	4413      	add	r3, r2
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	4b4d      	ldr	r3, [pc, #308]	@ (80037b0 <NLLS+0x2c00>)
 800367a:	443b      	add	r3, r7
 800367c:	ed93 5a00 	vldr	s10, [r3]
 8003680:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003684:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003688:	ee76 7a67 	vsub.f32	s15, s12, s15
 800368c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003690:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003694:	4b42      	ldr	r3, [pc, #264]	@ (80037a0 <NLLS+0x2bf0>)
 8003696:	443b      	add	r3, r7
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80036a0:	4b40      	ldr	r3, [pc, #256]	@ (80037a4 <NLLS+0x2bf4>)
 80036a2:	443b      	add	r3, r7
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ac:	4b3d      	ldr	r3, [pc, #244]	@ (80037a4 <NLLS+0x2bf4>)
 80036ae:	443b      	add	r3, r7
 80036b0:	edd3 7a00 	vldr	s15, [r3]
 80036b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036b8:	4b3c      	ldr	r3, [pc, #240]	@ (80037ac <NLLS+0x2bfc>)
 80036ba:	443b      	add	r3, r7
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c4:	4b39      	ldr	r3, [pc, #228]	@ (80037ac <NLLS+0x2bfc>)
 80036c6:	443b      	add	r3, r7
 80036c8:	edd3 7a00 	vldr	s15, [r3]
 80036cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036d0:	4b2e      	ldr	r3, [pc, #184]	@ (800378c <NLLS+0x2bdc>)
 80036d2:	443b      	add	r3, r7
 80036d4:	edd3 7a00 	vldr	s15, [r3]
 80036d8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80036dc:	4b2b      	ldr	r3, [pc, #172]	@ (800378c <NLLS+0x2bdc>)
 80036de:	443b      	add	r3, r7
 80036e0:	edd3 7a00 	vldr	s15, [r3]
 80036e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ec:	4b31      	ldr	r3, [pc, #196]	@ (80037b4 <NLLS+0x2c04>)
 80036ee:	443b      	add	r3, r7
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f8:	4b2e      	ldr	r3, [pc, #184]	@ (80037b4 <NLLS+0x2c04>)
 80036fa:	443b      	add	r3, r7
 80036fc:	edd3 7a00 	vldr	s15, [r3]
 8003700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003704:	4b22      	ldr	r3, [pc, #136]	@ (8003790 <NLLS+0x2be0>)
 8003706:	443b      	add	r3, r7
 8003708:	edd3 7a00 	vldr	s15, [r3]
 800370c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003718:	4b22      	ldr	r3, [pc, #136]	@ (80037a4 <NLLS+0x2bf4>)
 800371a:	443b      	add	r3, r7
 800371c:	edd3 6a00 	vldr	s13, [r3]
 8003720:	4b22      	ldr	r3, [pc, #136]	@ (80037ac <NLLS+0x2bfc>)
 8003722:	443b      	add	r3, r7
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800372c:	4b17      	ldr	r3, [pc, #92]	@ (800378c <NLLS+0x2bdc>)
 800372e:	443b      	add	r3, r7
 8003730:	ed93 6a00 	vldr	s12, [r3]
 8003734:	4b14      	ldr	r3, [pc, #80]	@ (8003788 <NLLS+0x2bd8>)
 8003736:	443b      	add	r3, r7
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <NLLS+0x2be0>)
 8003742:	443b      	add	r3, r7
 8003744:	edd3 5a00 	vldr	s11, [r3]
 8003748:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <NLLS+0x2bd4>)
 800374a:	443b      	add	r3, r7
 800374c:	edd3 7a00 	vldr	s15, [r3]
 8003750:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003754:	4b0f      	ldr	r3, [pc, #60]	@ (8003794 <NLLS+0x2be4>)
 8003756:	443b      	add	r3, r7
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003760:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003764:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003768:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <NLLS+0x2be8>)
 800376a:	443b      	add	r3, r7
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003774:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	4413      	add	r3, r2
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	e01a      	b.n	80037b8 <NLLS+0x2c08>
 8003782:	bf00      	nop
 8003784:	00016f7c 	.word	0x00016f7c
 8003788:	00016f80 	.word	0x00016f80
 800378c:	00016f70 	.word	0x00016f70
 8003790:	00016f74 	.word	0x00016f74
 8003794:	00016f84 	.word	0x00016f84
 8003798:	00016fb0 	.word	0x00016fb0
 800379c:	00016fd4 	.word	0x00016fd4
 80037a0:	00016fe0 	.word	0x00016fe0
 80037a4:	00016fdc 	.word	0x00016fdc
 80037a8:	00016fcc 	.word	0x00016fcc
 80037ac:	00016fd8 	.word	0x00016fd8
 80037b0:	00016fd0 	.word	0x00016fd0
 80037b4:	00016f78 	.word	0x00016f78
 80037b8:	4bb3      	ldr	r3, [pc, #716]	@ (8003a88 <NLLS+0x2ed8>)
 80037ba:	443b      	add	r3, r7
 80037bc:	ed93 6a00 	vldr	s12, [r3]
 80037c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80037c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037c8:	4bb0      	ldr	r3, [pc, #704]	@ (8003a8c <NLLS+0x2edc>)
 80037ca:	443b      	add	r3, r7
 80037cc:	ed93 6a00 	vldr	s12, [r3]
 80037d0:	4baf      	ldr	r3, [pc, #700]	@ (8003a90 <NLLS+0x2ee0>)
 80037d2:	443b      	add	r3, r7
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037dc:	4bad      	ldr	r3, [pc, #692]	@ (8003a94 <NLLS+0x2ee4>)
 80037de:	443b      	add	r3, r7
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037e8:	4bab      	ldr	r3, [pc, #684]	@ (8003a98 <NLLS+0x2ee8>)
 80037ea:	443b      	add	r3, r7
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80037f4:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	4413      	add	r3, r2
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	4ba6      	ldr	r3, [pc, #664]	@ (8003a9c <NLLS+0x2eec>)
 8003802:	443b      	add	r3, r7
 8003804:	edd3 5a00 	vldr	s11, [r3]
 8003808:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800380c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003810:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003814:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003818:	4ba1      	ldr	r3, [pc, #644]	@ (8003aa0 <NLLS+0x2ef0>)
 800381a:	443b      	add	r3, r7
 800381c:	ed93 6a00 	vldr	s12, [r3]
 8003820:	4b9b      	ldr	r3, [pc, #620]	@ (8003a90 <NLLS+0x2ee0>)
 8003822:	443b      	add	r3, r7
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	ee26 6a27 	vmul.f32	s12, s12, s15
 800382c:	4b9d      	ldr	r3, [pc, #628]	@ (8003aa4 <NLLS+0x2ef4>)
 800382e:	443b      	add	r3, r7
 8003830:	edd3 5a00 	vldr	s11, [r3]
 8003834:	4b9c      	ldr	r3, [pc, #624]	@ (8003aa8 <NLLS+0x2ef8>)
 8003836:	443b      	add	r3, r7
 8003838:	edd3 7a00 	vldr	s15, [r3]
 800383c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003840:	4b94      	ldr	r3, [pc, #592]	@ (8003a94 <NLLS+0x2ee4>)
 8003842:	443b      	add	r3, r7
 8003844:	ed93 5a00 	vldr	s10, [r3]
 8003848:	4b98      	ldr	r3, [pc, #608]	@ (8003aac <NLLS+0x2efc>)
 800384a:	443b      	add	r3, r7
 800384c:	edd3 7a00 	vldr	s15, [r3]
 8003850:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003854:	4b96      	ldr	r3, [pc, #600]	@ (8003ab0 <NLLS+0x2f00>)
 8003856:	443b      	add	r3, r7
 8003858:	edd3 7a00 	vldr	s15, [r3]
 800385c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003860:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003864:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003868:	4b8b      	ldr	r3, [pc, #556]	@ (8003a98 <NLLS+0x2ee8>)
 800386a:	443b      	add	r3, r7
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003874:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	4413      	add	r3, r2
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	4b81      	ldr	r3, [pc, #516]	@ (8003a88 <NLLS+0x2ed8>)
 8003882:	443b      	add	r3, r7
 8003884:	edd3 5a00 	vldr	s11, [r3]
 8003888:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800388c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003890:	4b7e      	ldr	r3, [pc, #504]	@ (8003a8c <NLLS+0x2edc>)
 8003892:	443b      	add	r3, r7
 8003894:	edd3 5a00 	vldr	s11, [r3]
 8003898:	4b81      	ldr	r3, [pc, #516]	@ (8003aa0 <NLLS+0x2ef0>)
 800389a:	443b      	add	r3, r7
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80038a4:	4b81      	ldr	r3, [pc, #516]	@ (8003aac <NLLS+0x2efc>)
 80038a6:	443b      	add	r3, r7
 80038a8:	edd3 7a00 	vldr	s15, [r3]
 80038ac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80038b0:	4b79      	ldr	r3, [pc, #484]	@ (8003a98 <NLLS+0x2ee8>)
 80038b2:	443b      	add	r3, r7
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80038bc:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	4413      	add	r3, r2
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	4b7a      	ldr	r3, [pc, #488]	@ (8003ab4 <NLLS+0x2f04>)
 80038ca:	443b      	add	r3, r7
 80038cc:	ed93 5a00 	vldr	s10, [r3]
 80038d0:	ee75 7a67 	vsub.f32	s15, s10, s15
 80038d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80038d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80038dc:	4b6b      	ldr	r3, [pc, #428]	@ (8003a8c <NLLS+0x2edc>)
 80038de:	443b      	add	r3, r7
 80038e0:	edd3 5a00 	vldr	s11, [r3]
 80038e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a90 <NLLS+0x2ee0>)
 80038e6:	443b      	add	r3, r7
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80038f0:	4b6c      	ldr	r3, [pc, #432]	@ (8003aa4 <NLLS+0x2ef4>)
 80038f2:	443b      	add	r3, r7
 80038f4:	edd3 7a00 	vldr	s15, [r3]
 80038f8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80038fc:	4b66      	ldr	r3, [pc, #408]	@ (8003a98 <NLLS+0x2ee8>)
 80038fe:	443b      	add	r3, r7
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003908:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	4413      	add	r3, r2
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	4b61      	ldr	r3, [pc, #388]	@ (8003a9c <NLLS+0x2eec>)
 8003916:	443b      	add	r3, r7
 8003918:	ed93 5a00 	vldr	s10, [r3]
 800391c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003920:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003924:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003928:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800392c:	4b57      	ldr	r3, [pc, #348]	@ (8003a8c <NLLS+0x2edc>)
 800392e:	443b      	add	r3, r7
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003938:	4b59      	ldr	r3, [pc, #356]	@ (8003aa0 <NLLS+0x2ef0>)
 800393a:	443b      	add	r3, r7
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003944:	4b56      	ldr	r3, [pc, #344]	@ (8003aa0 <NLLS+0x2ef0>)
 8003946:	443b      	add	r3, r7
 8003948:	edd3 7a00 	vldr	s15, [r3]
 800394c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003950:	4b4f      	ldr	r3, [pc, #316]	@ (8003a90 <NLLS+0x2ee0>)
 8003952:	443b      	add	r3, r7
 8003954:	edd3 7a00 	vldr	s15, [r3]
 8003958:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800395c:	4b4c      	ldr	r3, [pc, #304]	@ (8003a90 <NLLS+0x2ee0>)
 800395e:	443b      	add	r3, r7
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003968:	4b4a      	ldr	r3, [pc, #296]	@ (8003a94 <NLLS+0x2ee4>)
 800396a:	443b      	add	r3, r7
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003974:	4b47      	ldr	r3, [pc, #284]	@ (8003a94 <NLLS+0x2ee4>)
 8003976:	443b      	add	r3, r7
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003980:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab8 <NLLS+0x2f08>)
 8003982:	443b      	add	r3, r7
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800398c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab8 <NLLS+0x2f08>)
 800398e:	443b      	add	r3, r7
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003998:	4b44      	ldr	r3, [pc, #272]	@ (8003aac <NLLS+0x2efc>)
 800399a:	443b      	add	r3, r7
 800399c:	edd3 7a00 	vldr	s15, [r3]
 80039a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039a4:	4b41      	ldr	r3, [pc, #260]	@ (8003aac <NLLS+0x2efc>)
 80039a6:	443b      	add	r3, r7
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80039b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b8:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80039bc:	443b      	add	r3, r7
 80039be:	4619      	mov	r1, r3
 80039c0:	4b35      	ldr	r3, [pc, #212]	@ (8003a98 <NLLS+0x2ee8>)
 80039c2:	443b      	add	r3, r7
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	3bf0      	subs	r3, #240	@ 0xf0
 80039d2:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i < tam; i++)
 80039d6:	4b30      	ldr	r3, [pc, #192]	@ (8003a98 <NLLS+0x2ee8>)
 80039d8:	443b      	add	r3, r7
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	4a2e      	ldr	r2, [pc, #184]	@ (8003a98 <NLLS+0x2ee8>)
 80039e0:	443a      	add	r2, r7
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a98 <NLLS+0x2ee8>)
 80039e6:	443b      	add	r3, r7
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f240 4256 	movw	r2, #1110	@ 0x456
 80039ee:	4293      	cmp	r3, r2
 80039f0:	f77d a9de 	ble.w	8000db0 <NLLS+0x200>
        }

        J = 0;
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	4a30      	ldr	r2, [pc, #192]	@ (8003abc <NLLS+0x2f0c>)
 80039fa:	443a      	add	r2, r7
 80039fc:	6013      	str	r3, [r2, #0]

        for(int i=0; i < tam; i++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac0 <NLLS+0x2f10>)
 8003a02:	443a      	add	r2, r7
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e02c      	b.n	8003a62 <NLLS+0x2eb2>
        {
            J += (e[i] * e[i])/2;
 8003a08:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac4 <NLLS+0x2f14>)
 8003a0a:	443b      	add	r3, r7
 8003a0c:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 8003a10:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac0 <NLLS+0x2f10>)
 8003a12:	443b      	add	r3, r7
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	ed93 7a00 	vldr	s14, [r3]
 8003a1e:	4b29      	ldr	r3, [pc, #164]	@ (8003ac4 <NLLS+0x2f14>)
 8003a20:	443b      	add	r3, r7
 8003a22:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 8003a26:	4b26      	ldr	r3, [pc, #152]	@ (8003ac0 <NLLS+0x2f10>)
 8003a28:	443b      	add	r3, r7
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a38:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a40:	4b1e      	ldr	r3, [pc, #120]	@ (8003abc <NLLS+0x2f0c>)
 8003a42:	443b      	add	r3, r7
 8003a44:	ed93 7a00 	vldr	s14, [r3]
 8003a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <NLLS+0x2f0c>)
 8003a4e:	443b      	add	r3, r7
 8003a50:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i < tam; i++)
 8003a54:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <NLLS+0x2f10>)
 8003a56:	443b      	add	r3, r7
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	4a18      	ldr	r2, [pc, #96]	@ (8003ac0 <NLLS+0x2f10>)
 8003a5e:	443a      	add	r2, r7
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <NLLS+0x2f10>)
 8003a64:	443b      	add	r3, r7
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f240 4256 	movw	r2, #1110	@ 0x456
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	ddcb      	ble.n	8003a08 <NLLS+0x2e58>
        }

        if(passo < 2)
 8003a70:	4b15      	ldr	r3, [pc, #84]	@ (8003ac8 <NLLS+0x2f18>)
 8003a72:	443b      	add	r3, r7
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d82a      	bhi.n	8003ad0 <NLLS+0x2f20>
        {
            error_ant = J;
 8003a7a:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <NLLS+0x2f0c>)
 8003a7c:	443b      	add	r3, r7
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a12      	ldr	r2, [pc, #72]	@ (8003acc <NLLS+0x2f1c>)
 8003a82:	443a      	add	r2, r7
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e054      	b.n	8003b32 <NLLS+0x2f82>
 8003a88:	00016fd4 	.word	0x00016fd4
 8003a8c:	00016fe0 	.word	0x00016fe0
 8003a90:	00016fd8 	.word	0x00016fd8
 8003a94:	00016f70 	.word	0x00016f70
 8003a98:	00016fb0 	.word	0x00016fb0
 8003a9c:	00016fd0 	.word	0x00016fd0
 8003aa0:	00016fdc 	.word	0x00016fdc
 8003aa4:	00016f7c 	.word	0x00016f7c
 8003aa8:	00016f80 	.word	0x00016f80
 8003aac:	00016f74 	.word	0x00016f74
 8003ab0:	00016f84 	.word	0x00016f84
 8003ab4:	00016fcc 	.word	0x00016fcc
 8003ab8:	00016f78 	.word	0x00016f78
 8003abc:	00016fb8 	.word	0x00016fb8
 8003ac0:	00016fac 	.word	0x00016fac
 8003ac4:	00014fe8 	.word	0x00014fe8
 8003ac8:	00016fe7 	.word	0x00016fe7
 8003acc:	00016fbc 	.word	0x00016fbc
        }
        else
        {
            delta_J = 100*fabsf(J-error_ant)/J;
 8003ad0:	4b81      	ldr	r3, [pc, #516]	@ (8003cd8 <NLLS+0x3128>)
 8003ad2:	443b      	add	r3, r7
 8003ad4:	ed93 7a00 	vldr	s14, [r3]
 8003ad8:	4b80      	ldr	r3, [pc, #512]	@ (8003cdc <NLLS+0x312c>)
 8003ada:	443b      	add	r3, r7
 8003adc:	edd3 7a00 	vldr	s15, [r3]
 8003ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae4:	eef0 7ae7 	vabs.f32	s15, s15
 8003ae8:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8003ce0 <NLLS+0x3130>
 8003aec:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003af0:	4b79      	ldr	r3, [pc, #484]	@ (8003cd8 <NLLS+0x3128>)
 8003af2:	443b      	add	r3, r7
 8003af4:	ed93 7a00 	vldr	s14, [r3]
 8003af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afc:	4b79      	ldr	r3, [pc, #484]	@ (8003ce4 <NLLS+0x3134>)
 8003afe:	443b      	add	r3, r7
 8003b00:	edc3 7a00 	vstr	s15, [r3]
            if(delta_J < 0.05)
 8003b04:	4b77      	ldr	r3, [pc, #476]	@ (8003ce4 <NLLS+0x3134>)
 8003b06:	443b      	add	r3, r7
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	f7fc fce1 	bl	80004d0 <__aeabi_f2d>
 8003b0e:	a370      	add	r3, pc, #448	@ (adr r3, 8003cd0 <NLLS+0x3120>)
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f7fc fd94 	bl	8000640 <__aeabi_dcmplt>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <NLLS+0x2f76>
            {
                loop = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	4a71      	ldr	r2, [pc, #452]	@ (8003ce8 <NLLS+0x3138>)
 8003b22:	443a      	add	r2, r7
 8003b24:	7013      	strb	r3, [r2, #0]
            }
            error_ant = J;
 8003b26:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd8 <NLLS+0x3128>)
 8003b28:	443b      	add	r3, r7
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6b      	ldr	r2, [pc, #428]	@ (8003cdc <NLLS+0x312c>)
 8003b2e:	443a      	add	r2, r7
 8003b30:	6013      	str	r3, [r2, #0]
        }

        for(int i = 0; i < N; i++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	4a6d      	ldr	r2, [pc, #436]	@ (8003cec <NLLS+0x313c>)
 8003b36:	443a      	add	r2, r7
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e091      	b.n	8003c60 <NLLS+0x30b0>
        {
            for(int j = 0; j < N; j++)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	4a6c      	ldr	r2, [pc, #432]	@ (8003cf0 <NLLS+0x3140>)
 8003b40:	443a      	add	r2, r7
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e07f      	b.n	8003c46 <NLLS+0x3096>
            {
                Ht_H[i][j] = 0;
 8003b46:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003b4a:	443b      	add	r3, r7
 8003b4c:	f5a3 710d 	sub.w	r1, r3, #564	@ 0x234
 8003b50:	4b66      	ldr	r3, [pc, #408]	@ (8003cec <NLLS+0x313c>)
 8003b52:	443b      	add	r3, r7
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	4a64      	ldr	r2, [pc, #400]	@ (8003cf0 <NLLS+0x3140>)
 8003b5e:	443a      	add	r2, r7
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
                for(int k = 0; k < tam; k++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	4a60      	ldr	r2, [pc, #384]	@ (8003cf4 <NLLS+0x3144>)
 8003b72:	443a      	add	r2, r7
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e058      	b.n	8003c2a <NLLS+0x307a>
                {
                    Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 8003b78:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003b7c:	443b      	add	r3, r7
 8003b7e:	f5a3 710d 	sub.w	r1, r3, #564	@ 0x234
 8003b82:	4b5a      	ldr	r3, [pc, #360]	@ (8003cec <NLLS+0x313c>)
 8003b84:	443b      	add	r3, r7
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4a58      	ldr	r2, [pc, #352]	@ (8003cf0 <NLLS+0x3140>)
 8003b90:	443a      	add	r2, r7
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	ed93 7a00 	vldr	s14, [r3]
 8003b9e:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003ba2:	443b      	add	r3, r7
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4b51      	ldr	r3, [pc, #324]	@ (8003cec <NLLS+0x313c>)
 8003ba8:	443b      	add	r3, r7
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f240 4257 	movw	r2, #1111	@ 0x457
 8003bb0:	fb03 f202 	mul.w	r2, r3, r2
 8003bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf4 <NLLS+0x3144>)
 8003bb6:	443b      	add	r3, r7
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3bf0      	subs	r3, #240	@ 0xf0
 8003bc2:	edd3 6a00 	vldr	s13, [r3]
 8003bc6:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003bca:	443b      	add	r3, r7
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4b48      	ldr	r3, [pc, #288]	@ (8003cf0 <NLLS+0x3140>)
 8003bd0:	443b      	add	r3, r7
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f240 4257 	movw	r2, #1111	@ 0x457
 8003bd8:	fb03 f202 	mul.w	r2, r3, r2
 8003bdc:	4b45      	ldr	r3, [pc, #276]	@ (8003cf4 <NLLS+0x3144>)
 8003bde:	443b      	add	r3, r7
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3bf0      	subs	r3, #240	@ 0xf0
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf6:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003bfa:	443b      	add	r3, r7
 8003bfc:	f5a3 710d 	sub.w	r1, r3, #564	@ 0x234
 8003c00:	4b3a      	ldr	r3, [pc, #232]	@ (8003cec <NLLS+0x313c>)
 8003c02:	443b      	add	r3, r7
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	4a38      	ldr	r2, [pc, #224]	@ (8003cf0 <NLLS+0x3140>)
 8003c0e:	443a      	add	r2, r7
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	edc3 7a00 	vstr	s15, [r3]
                for(int k = 0; k < tam; k++)
 8003c1c:	4b35      	ldr	r3, [pc, #212]	@ (8003cf4 <NLLS+0x3144>)
 8003c1e:	443b      	add	r3, r7
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	4a33      	ldr	r2, [pc, #204]	@ (8003cf4 <NLLS+0x3144>)
 8003c26:	443a      	add	r2, r7
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b32      	ldr	r3, [pc, #200]	@ (8003cf4 <NLLS+0x3144>)
 8003c2c:	443b      	add	r3, r7
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f240 4256 	movw	r2, #1110	@ 0x456
 8003c34:	4293      	cmp	r3, r2
 8003c36:	dd9f      	ble.n	8003b78 <NLLS+0x2fc8>
            for(int j = 0; j < N; j++)
 8003c38:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <NLLS+0x3140>)
 8003c3a:	443b      	add	r3, r7
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf0 <NLLS+0x3140>)
 8003c42:	443a      	add	r2, r7
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf0 <NLLS+0x3140>)
 8003c48:	443b      	add	r3, r7
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	f77f af7a 	ble.w	8003b46 <NLLS+0x2f96>
        for(int i = 0; i < N; i++)
 8003c52:	4b26      	ldr	r3, [pc, #152]	@ (8003cec <NLLS+0x313c>)
 8003c54:	443b      	add	r3, r7
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	4a24      	ldr	r2, [pc, #144]	@ (8003cec <NLLS+0x313c>)
 8003c5c:	443a      	add	r2, r7
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <NLLS+0x313c>)
 8003c62:	443b      	add	r3, r7
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	f77f af68 	ble.w	8003b3c <NLLS+0x2f8c>
                }
            }
        }

        inverter_matriz(Ht_H, inv);
 8003c6c:	4a22      	ldr	r2, [pc, #136]	@ (8003cf8 <NLLS+0x3148>)
 8003c6e:	4b23      	ldr	r3, [pc, #140]	@ (8003cfc <NLLS+0x314c>)
 8003c70:	4413      	add	r3, r2
 8003c72:	19da      	adds	r2, r3, r7
 8003c74:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <NLLS+0x3150>)
 8003c76:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 8003c7a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003c7e:	443b      	add	r3, r7
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fe7c 	bl	8000980 <inverter_matriz>

        for(int i = 0; i < N; i++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d04 <NLLS+0x3154>)
 8003c8c:	443a      	add	r2, r7
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e0b1      	b.n	8003df6 <NLLS+0x3246>
        {
            for(int j = 0; j < tam; j++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <NLLS+0x3158>)
 8003c96:	443a      	add	r2, r7
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e09d      	b.n	8003dd8 <NLLS+0x3228>
            {
                mul_mat[i][j] = 0;
 8003c9c:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003ca0:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 8003ca4:	4b17      	ldr	r3, [pc, #92]	@ (8003d04 <NLLS+0x3154>)
 8003ca6:	443b      	add	r3, r7
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f240 4157 	movw	r1, #1111	@ 0x457
 8003cae:	fb03 f101 	mul.w	r1, r3, r1
 8003cb2:	4b15      	ldr	r3, [pc, #84]	@ (8003d08 <NLLS+0x3158>)
 8003cb4:	443b      	add	r3, r7
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	440b      	add	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
                for(int k = 0; k < N; k++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4a11      	ldr	r2, [pc, #68]	@ (8003d0c <NLLS+0x315c>)
 8003cc8:	443a      	add	r2, r7
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	e078      	b.n	8003dc0 <NLLS+0x3210>
 8003cce:	bf00      	nop
 8003cd0:	9999999a 	.word	0x9999999a
 8003cd4:	3fa99999 	.word	0x3fa99999
 8003cd8:	00016fb8 	.word	0x00016fb8
 8003cdc:	00016fbc 	.word	0x00016fbc
 8003ce0:	42c80000 	.word	0x42c80000
 8003ce4:	00016f6c 	.word	0x00016f6c
 8003ce8:	00016fe6 	.word	0x00016fe6
 8003cec:	00016fa8 	.word	0x00016fa8
 8003cf0:	00016fa4 	.word	0x00016fa4
 8003cf4:	00016fa0 	.word	0x00016fa0
 8003cf8:	ffff2c64 	.word	0xffff2c64
 8003cfc:	00016fe8 	.word	0x00016fe8
 8003d00:	ffff2dcc 	.word	0xffff2dcc
 8003d04:	00016f9c 	.word	0x00016f9c
 8003d08:	00016f98 	.word	0x00016f98
 8003d0c:	00016f94 	.word	0x00016f94
                {
                    mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8003d10:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003d14:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 8003d18:	4b72      	ldr	r3, [pc, #456]	@ (8003ee4 <NLLS+0x3334>)
 8003d1a:	443b      	add	r3, r7
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f240 4157 	movw	r1, #1111	@ 0x457
 8003d22:	fb03 f101 	mul.w	r1, r3, r1
 8003d26:	4b70      	ldr	r3, [pc, #448]	@ (8003ee8 <NLLS+0x3338>)
 8003d28:	443b      	add	r3, r7
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	440b      	add	r3, r1
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	ed93 7a00 	vldr	s14, [r3]
 8003d36:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003d3a:	443b      	add	r3, r7
 8003d3c:	f5a3 7167 	sub.w	r1, r3, #924	@ 0x39c
 8003d40:	4b68      	ldr	r3, [pc, #416]	@ (8003ee4 <NLLS+0x3334>)
 8003d42:	443b      	add	r3, r7
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4a67      	ldr	r2, [pc, #412]	@ (8003eec <NLLS+0x333c>)
 8003d4e:	443a      	add	r2, r7
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	edd3 6a00 	vldr	s13, [r3]
 8003d5c:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003d60:	443b      	add	r3, r7
 8003d62:	4619      	mov	r1, r3
 8003d64:	4b61      	ldr	r3, [pc, #388]	@ (8003eec <NLLS+0x333c>)
 8003d66:	443b      	add	r3, r7
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f240 4257 	movw	r2, #1111	@ 0x457
 8003d6e:	fb03 f202 	mul.w	r2, r3, r2
 8003d72:	4b5d      	ldr	r3, [pc, #372]	@ (8003ee8 <NLLS+0x3338>)
 8003d74:	443b      	add	r3, r7
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3bf0      	subs	r3, #240	@ 0xf0
 8003d80:	edd3 7a00 	vldr	s15, [r3]
 8003d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8c:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003d90:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 8003d94:	4b53      	ldr	r3, [pc, #332]	@ (8003ee4 <NLLS+0x3334>)
 8003d96:	443b      	add	r3, r7
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f240 4157 	movw	r1, #1111	@ 0x457
 8003d9e:	fb03 f101 	mul.w	r1, r3, r1
 8003da2:	4b51      	ldr	r3, [pc, #324]	@ (8003ee8 <NLLS+0x3338>)
 8003da4:	443b      	add	r3, r7
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	440b      	add	r3, r1
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	edc3 7a00 	vstr	s15, [r3]
                for(int k = 0; k < N; k++)
 8003db2:	4b4e      	ldr	r3, [pc, #312]	@ (8003eec <NLLS+0x333c>)
 8003db4:	443b      	add	r3, r7
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	4a4c      	ldr	r2, [pc, #304]	@ (8003eec <NLLS+0x333c>)
 8003dbc:	443a      	add	r2, r7
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b4a      	ldr	r3, [pc, #296]	@ (8003eec <NLLS+0x333c>)
 8003dc2:	443b      	add	r3, r7
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	dda2      	ble.n	8003d10 <NLLS+0x3160>
            for(int j = 0; j < tam; j++)
 8003dca:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <NLLS+0x3338>)
 8003dcc:	443b      	add	r3, r7
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	4a45      	ldr	r2, [pc, #276]	@ (8003ee8 <NLLS+0x3338>)
 8003dd4:	443a      	add	r2, r7
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b43      	ldr	r3, [pc, #268]	@ (8003ee8 <NLLS+0x3338>)
 8003dda:	443b      	add	r3, r7
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f240 4256 	movw	r2, #1110	@ 0x456
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f77f af5a 	ble.w	8003c9c <NLLS+0x30ec>
        for(int i = 0; i < N; i++)
 8003de8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ee4 <NLLS+0x3334>)
 8003dea:	443b      	add	r3, r7
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3301      	adds	r3, #1
 8003df0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ee4 <NLLS+0x3334>)
 8003df2:	443a      	add	r2, r7
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee4 <NLLS+0x3334>)
 8003df8:	443b      	add	r3, r7
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	f77f af48 	ble.w	8003c92 <NLLS+0x30e2>
                }
            }
        }

        for(int i = 0; i < N; i++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef0 <NLLS+0x3340>)
 8003e06:	443a      	add	r2, r7
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e060      	b.n	8003ece <NLLS+0x331e>
        {
            Ht_e[i] = 0;
 8003e0c:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003e10:	443b      	add	r3, r7
 8003e12:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 8003e16:	4b36      	ldr	r3, [pc, #216]	@ (8003ef0 <NLLS+0x3340>)
 8003e18:	443b      	add	r3, r7
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
            for(int j = 0; j < tam; j++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	4a32      	ldr	r2, [pc, #200]	@ (8003ef4 <NLLS+0x3344>)
 8003e2a:	443a      	add	r2, r7
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	e040      	b.n	8003eb2 <NLLS+0x3302>
            {
                Ht_e[i] += mul_mat[i][j]*e[j];
 8003e30:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003e34:	443b      	add	r3, r7
 8003e36:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef0 <NLLS+0x3340>)
 8003e3c:	443b      	add	r3, r7
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	ed93 7a00 	vldr	s14, [r3]
 8003e48:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003e4c:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 8003e50:	4b27      	ldr	r3, [pc, #156]	@ (8003ef0 <NLLS+0x3340>)
 8003e52:	443b      	add	r3, r7
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f240 4157 	movw	r1, #1111	@ 0x457
 8003e5a:	fb03 f101 	mul.w	r1, r3, r1
 8003e5e:	4b25      	ldr	r3, [pc, #148]	@ (8003ef4 <NLLS+0x3344>)
 8003e60:	443b      	add	r3, r7
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	440b      	add	r3, r1
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	edd3 6a00 	vldr	s13, [r3]
 8003e6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <NLLS+0x3348>)
 8003e70:	443b      	add	r3, r7
 8003e72:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 8003e76:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef4 <NLLS+0x3344>)
 8003e78:	443b      	add	r3, r7
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	edd3 7a00 	vldr	s15, [r3]
 8003e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e8c:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003e90:	443b      	add	r3, r7
 8003e92:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 8003e96:	4b16      	ldr	r3, [pc, #88]	@ (8003ef0 <NLLS+0x3340>)
 8003e98:	443b      	add	r3, r7
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	edc3 7a00 	vstr	s15, [r3]
            for(int j = 0; j < tam; j++)
 8003ea4:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <NLLS+0x3344>)
 8003ea6:	443b      	add	r3, r7
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <NLLS+0x3344>)
 8003eae:	443a      	add	r2, r7
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <NLLS+0x3344>)
 8003eb4:	443b      	add	r3, r7
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f240 4256 	movw	r2, #1110	@ 0x456
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	ddb7      	ble.n	8003e30 <NLLS+0x3280>
        for(int i = 0; i < N; i++)
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <NLLS+0x3340>)
 8003ec2:	443b      	add	r3, r7
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	4a09      	ldr	r2, [pc, #36]	@ (8003ef0 <NLLS+0x3340>)
 8003eca:	443a      	add	r2, r7
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <NLLS+0x3340>)
 8003ed0:	443b      	add	r3, r7
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	dd99      	ble.n	8003e0c <NLLS+0x325c>
            }
        }

        for(int i = 0; i < N; i++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	4a08      	ldr	r2, [pc, #32]	@ (8003efc <NLLS+0x334c>)
 8003edc:	443a      	add	r2, r7
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	e03b      	b.n	8003f5a <NLLS+0x33aa>
 8003ee2:	bf00      	nop
 8003ee4:	00016f9c 	.word	0x00016f9c
 8003ee8:	00016f98 	.word	0x00016f98
 8003eec:	00016f94 	.word	0x00016f94
 8003ef0:	00016f90 	.word	0x00016f90
 8003ef4:	00016f8c 	.word	0x00016f8c
 8003ef8:	00014fe8 	.word	0x00014fe8
 8003efc:	00016f88 	.word	0x00016f88
        {
            p0[i] += Ht_e[i];
 8003f00:	4b50      	ldr	r3, [pc, #320]	@ (8004044 <NLLS+0x3494>)
 8003f02:	443b      	add	r3, r7
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 8003f0c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003f10:	443b      	add	r3, r7
 8003f12:	3ba0      	subs	r3, #160	@ 0xa0
 8003f14:	ed93 7a00 	vldr	s14, [r3]
 8003f18:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003f1c:	443b      	add	r3, r7
 8003f1e:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 8003f22:	4b48      	ldr	r3, [pc, #288]	@ (8004044 <NLLS+0x3494>)
 8003f24:	443b      	add	r3, r7
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	edd3 7a00 	vldr	s15, [r3]
 8003f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f34:	4b43      	ldr	r3, [pc, #268]	@ (8004044 <NLLS+0x3494>)
 8003f36:	443b      	add	r3, r7
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 8003f40:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003f44:	443b      	add	r3, r7
 8003f46:	3ba0      	subs	r3, #160	@ 0xa0
 8003f48:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i < N; i++)
 8003f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004044 <NLLS+0x3494>)
 8003f4e:	443b      	add	r3, r7
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	4a3b      	ldr	r2, [pc, #236]	@ (8004044 <NLLS+0x3494>)
 8003f56:	443a      	add	r2, r7
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004044 <NLLS+0x3494>)
 8003f5c:	443b      	add	r3, r7
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	ddcd      	ble.n	8003f00 <NLLS+0x3350>
        }

        passo++;
 8003f64:	4b38      	ldr	r3, [pc, #224]	@ (8004048 <NLLS+0x3498>)
 8003f66:	443b      	add	r3, r7
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	4a36      	ldr	r2, [pc, #216]	@ (8004048 <NLLS+0x3498>)
 8003f6e:	443a      	add	r2, r7
 8003f70:	7013      	strb	r3, [r2, #0]
    while(loop == 1)
 8003f72:	4b36      	ldr	r3, [pc, #216]	@ (800404c <NLLS+0x349c>)
 8003f74:	443b      	add	r3, r7
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f43c ae65 	beq.w	8000c48 <NLLS+0x98>
    }
    p[0] = sx;
 8003f7e:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003f82:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a31      	ldr	r2, [pc, #196]	@ (8004050 <NLLS+0x34a0>)
 8003f8a:	443a      	add	r2, r7
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8003f90:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003f94:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8004054 <NLLS+0x34a4>)
 8003f9e:	443a      	add	r2, r7
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8003fa4:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003fa8:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	4a29      	ldr	r2, [pc, #164]	@ (8004058 <NLLS+0x34a8>)
 8003fb2:	443a      	add	r2, r7
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8003fb8:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003fbc:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	4a25      	ldr	r2, [pc, #148]	@ (800405c <NLLS+0x34ac>)
 8003fc6:	443a      	add	r2, r7
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8003fcc:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003fd0:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3310      	adds	r3, #16
 8003fd8:	4a21      	ldr	r2, [pc, #132]	@ (8004060 <NLLS+0x34b0>)
 8003fda:	443a      	add	r2, r7
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8003fe0:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003fe4:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	4a1d      	ldr	r2, [pc, #116]	@ (8004064 <NLLS+0x34b4>)
 8003fee:	443a      	add	r2, r7
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8003ff4:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8003ff8:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3318      	adds	r3, #24
 8004000:	4a19      	ldr	r2, [pc, #100]	@ (8004068 <NLLS+0x34b8>)
 8004002:	443a      	add	r2, r7
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8004008:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 800400c:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	331c      	adds	r3, #28
 8004014:	4a15      	ldr	r2, [pc, #84]	@ (800406c <NLLS+0x34bc>)
 8004016:	443a      	add	r2, r7
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 800401c:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004020:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3320      	adds	r3, #32
 8004028:	4a11      	ldr	r2, [pc, #68]	@ (8004070 <NLLS+0x34c0>)
 800402a:	443a      	add	r2, r7
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	601a      	str	r2, [r3, #0]

    return passo;
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <NLLS+0x3498>)
 8004032:	443b      	add	r3, r7
 8004034:	781b      	ldrb	r3, [r3, #0]
}
 8004036:	4618      	mov	r0, r3
 8004038:	f507 37b7 	add.w	r7, r7, #93696	@ 0x16e00
 800403c:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 8004040:	46bd      	mov	sp, r7
 8004042:	bdb0      	pop	{r4, r5, r7, pc}
 8004044:	00016f88 	.word	0x00016f88
 8004048:	00016fe7 	.word	0x00016fe7
 800404c:	00016fe6 	.word	0x00016fe6
 8004050:	00016fe0 	.word	0x00016fe0
 8004054:	00016fdc 	.word	0x00016fdc
 8004058:	00016fd8 	.word	0x00016fd8
 800405c:	00016fd4 	.word	0x00016fd4
 8004060:	00016fd0 	.word	0x00016fd0
 8004064:	00016fcc 	.word	0x00016fcc
 8004068:	00016fc8 	.word	0x00016fc8
 800406c:	00016fc4 	.word	0x00016fc4
 8004070:	00016fc0 	.word	0x00016fc0

08004074 <ETS>:

void ETS(float *mx, float *my, float *mz, float *p)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	ed2d 8b02 	vpush	{d8}
 800407a:	f5ad 3da6 	sub.w	sp, sp, #84992	@ 0x14c00
 800407e:	b0c9      	sub	sp, #292	@ 0x124
 8004080:	af00      	add	r7, sp, #0
 8004082:	f507 6452 	add.w	r4, r7, #3360	@ 0xd20
 8004086:	f6a4 5414 	subw	r4, r4, #3348	@ 0xd14
 800408a:	6020      	str	r0, [r4, #0]
 800408c:	f507 6052 	add.w	r0, r7, #3360	@ 0xd20
 8004090:	f6a0 5018 	subw	r0, r0, #3352	@ 0xd18
 8004094:	6001      	str	r1, [r0, #0]
 8004096:	f507 6152 	add.w	r1, r7, #3360	@ 0xd20
 800409a:	f6a1 511c 	subw	r1, r1, #3356	@ 0xd1c
 800409e:	600a      	str	r2, [r1, #0]
 80040a0:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80040a4:	f5a2 6252 	sub.w	r2, r2, #3360	@ 0xd20
 80040a8:	6013      	str	r3, [r2, #0]
    //Cria a matriz H
    float mat_H[N][tam], my_2[tam];
    float H_Ht[N][N], inv[N][N];
    float mul_mat[N][tam];
    float X[N];
    float psi7 = 0, psi8 = 0, divs = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, bx = 0, by = 0, bz = 0, sx = 0, sy = 0, sz = 0, rho = 0, phi = 0, lambida = 0;
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	4a42      	ldr	r2, [pc, #264]	@ (80041b8 <ETS+0x144>)
 80040b0:	443a      	add	r2, r7
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	4a40      	ldr	r2, [pc, #256]	@ (80041bc <ETS+0x148>)
 80040ba:	443a      	add	r2, r7
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	4a3f      	ldr	r2, [pc, #252]	@ (80041c0 <ETS+0x14c>)
 80040c4:	443a      	add	r2, r7
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	4a3d      	ldr	r2, [pc, #244]	@ (80041c4 <ETS+0x150>)
 80040ce:	443a      	add	r2, r7
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	4a3c      	ldr	r2, [pc, #240]	@ (80041c8 <ETS+0x154>)
 80040d8:	443a      	add	r2, r7
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	4a3a      	ldr	r2, [pc, #232]	@ (80041cc <ETS+0x158>)
 80040e2:	443a      	add	r2, r7
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	4a39      	ldr	r2, [pc, #228]	@ (80041d0 <ETS+0x15c>)
 80040ec:	443a      	add	r2, r7
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	4a37      	ldr	r2, [pc, #220]	@ (80041d4 <ETS+0x160>)
 80040f6:	443a      	add	r2, r7
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	4a36      	ldr	r2, [pc, #216]	@ (80041d8 <ETS+0x164>)
 8004100:	443a      	add	r2, r7
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	4a34      	ldr	r2, [pc, #208]	@ (80041dc <ETS+0x168>)
 800410a:	443a      	add	r2, r7
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	4a33      	ldr	r2, [pc, #204]	@ (80041e0 <ETS+0x16c>)
 8004114:	443a      	add	r2, r7
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	4a31      	ldr	r2, [pc, #196]	@ (80041e4 <ETS+0x170>)
 800411e:	443a      	add	r2, r7
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	4a30      	ldr	r2, [pc, #192]	@ (80041e8 <ETS+0x174>)
 8004128:	443a      	add	r2, r7
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	4a2e      	ldr	r2, [pc, #184]	@ (80041ec <ETS+0x178>)
 8004132:	443a      	add	r2, r7
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	4a2d      	ldr	r2, [pc, #180]	@ (80041f0 <ETS+0x17c>)
 800413c:	443a      	add	r2, r7
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	4a2b      	ldr	r2, [pc, #172]	@ (80041f4 <ETS+0x180>)
 8004146:	443a      	add	r2, r7
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	4a2a      	ldr	r2, [pc, #168]	@ (80041f8 <ETS+0x184>)
 8004150:	443a      	add	r2, r7
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	4a28      	ldr	r2, [pc, #160]	@ (80041fc <ETS+0x188>)
 800415a:	443a      	add	r2, r7
 800415c:	6013      	str	r3, [r2, #0]
    float X1_2 = 0, X2_2 = 0, X3_2 = 0, X4_2 = 0, X5_2 = 0, X6_2 = 0, X7_2 = 0, X8_2 = 0;
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	4a27      	ldr	r2, [pc, #156]	@ (8004200 <ETS+0x18c>)
 8004164:	443a      	add	r2, r7
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	4a25      	ldr	r2, [pc, #148]	@ (8004204 <ETS+0x190>)
 800416e:	443a      	add	r2, r7
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	4a24      	ldr	r2, [pc, #144]	@ (8004208 <ETS+0x194>)
 8004178:	443a      	add	r2, r7
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	4a22      	ldr	r2, [pc, #136]	@ (800420c <ETS+0x198>)
 8004182:	443a      	add	r2, r7
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <ETS+0x19c>)
 800418c:	443a      	add	r2, r7
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	4a1f      	ldr	r2, [pc, #124]	@ (8004214 <ETS+0x1a0>)
 8004196:	443a      	add	r2, r7
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	4a1e      	ldr	r2, [pc, #120]	@ (8004218 <ETS+0x1a4>)
 80041a0:	443a      	add	r2, r7
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	4a1c      	ldr	r2, [pc, #112]	@ (800421c <ETS+0x1a8>)
 80041aa:	443a      	add	r2, r7
 80041ac:	6013      	str	r3, [r2, #0]
    for(int i=0; i < tam; i++)
 80041ae:	2300      	movs	r3, #0
 80041b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004220 <ETS+0x1ac>)
 80041b2:	443a      	add	r2, r7
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e186      	b.n	80044c6 <ETS+0x452>
 80041b8:	00014cf8 	.word	0x00014cf8
 80041bc:	00014cf4 	.word	0x00014cf4
 80041c0:	00014cf0 	.word	0x00014cf0
 80041c4:	00014cec 	.word	0x00014cec
 80041c8:	00014ce8 	.word	0x00014ce8
 80041cc:	00014ce4 	.word	0x00014ce4
 80041d0:	00014ce0 	.word	0x00014ce0
 80041d4:	00014cdc 	.word	0x00014cdc
 80041d8:	00014cd8 	.word	0x00014cd8
 80041dc:	00014cd4 	.word	0x00014cd4
 80041e0:	00014cd0 	.word	0x00014cd0
 80041e4:	00014ccc 	.word	0x00014ccc
 80041e8:	00014cc8 	.word	0x00014cc8
 80041ec:	00014cc4 	.word	0x00014cc4
 80041f0:	00014cc0 	.word	0x00014cc0
 80041f4:	00014cbc 	.word	0x00014cbc
 80041f8:	00014cb8 	.word	0x00014cb8
 80041fc:	00014cb4 	.word	0x00014cb4
 8004200:	00014cb0 	.word	0x00014cb0
 8004204:	00014cac 	.word	0x00014cac
 8004208:	00014ca8 	.word	0x00014ca8
 800420c:	00014ca4 	.word	0x00014ca4
 8004210:	00014ca0 	.word	0x00014ca0
 8004214:	00014c9c 	.word	0x00014c9c
 8004218:	00014c98 	.word	0x00014c98
 800421c:	00014c94 	.word	0x00014c94
 8004220:	00014d1c 	.word	0x00014d1c
    {
        mat_H[0][i] = mx[i]*mx[i];
 8004224:	4bb1      	ldr	r3, [pc, #708]	@ (80044ec <ETS+0x478>)
 8004226:	443b      	add	r3, r7
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004230:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	4413      	add	r3, r2
 8004238:	ed93 7a00 	vldr	s14, [r3]
 800423c:	4bab      	ldr	r3, [pc, #684]	@ (80044ec <ETS+0x478>)
 800423e:	443b      	add	r3, r7
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004248:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	4413      	add	r3, r2
 8004250:	edd3 7a00 	vldr	s15, [r3]
 8004254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004258:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 800425c:	443b      	add	r3, r7
 800425e:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004262:	4ba2      	ldr	r3, [pc, #648]	@ (80044ec <ETS+0x478>)
 8004264:	443b      	add	r3, r7
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	edc3 7a00 	vstr	s15, [r3]
        mat_H[1][i] = mx[i]*my[i];
 8004270:	4b9e      	ldr	r3, [pc, #632]	@ (80044ec <ETS+0x478>)
 8004272:	443b      	add	r3, r7
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800427c:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	4413      	add	r3, r2
 8004284:	ed93 7a00 	vldr	s14, [r3]
 8004288:	4b98      	ldr	r3, [pc, #608]	@ (80044ec <ETS+0x478>)
 800428a:	443b      	add	r3, r7
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004294:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	4413      	add	r3, r2
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a4:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80042a8:	443b      	add	r3, r7
 80042aa:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 80042ae:	4b8f      	ldr	r3, [pc, #572]	@ (80044ec <ETS+0x478>)
 80042b0:	443b      	add	r3, r7
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f203 4357 	addw	r3, r3, #1111	@ 0x457
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	edc3 7a00 	vstr	s15, [r3]
        mat_H[2][i] = mx[i]*mz[i];
 80042c0:	4b8a      	ldr	r3, [pc, #552]	@ (80044ec <ETS+0x478>)
 80042c2:	443b      	add	r3, r7
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80042cc:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	4413      	add	r3, r2
 80042d4:	ed93 7a00 	vldr	s14, [r3]
 80042d8:	4b84      	ldr	r3, [pc, #528]	@ (80044ec <ETS+0x478>)
 80042da:	443b      	add	r3, r7
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80042e4:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	4413      	add	r3, r2
 80042ec:	edd3 7a00 	vldr	s15, [r3]
 80042f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f4:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80042f8:	443b      	add	r3, r7
 80042fa:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 80042fe:	4b7b      	ldr	r3, [pc, #492]	@ (80044ec <ETS+0x478>)
 8004300:	443b      	add	r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f603 03ae 	addw	r3, r3, #2222	@ 0x8ae
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	edc3 7a00 	vstr	s15, [r3]
        mat_H[3][i] = my[i]*mz[i];
 8004310:	4b76      	ldr	r3, [pc, #472]	@ (80044ec <ETS+0x478>)
 8004312:	443b      	add	r3, r7
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800431c:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	4413      	add	r3, r2
 8004324:	ed93 7a00 	vldr	s14, [r3]
 8004328:	4b70      	ldr	r3, [pc, #448]	@ (80044ec <ETS+0x478>)
 800432a:	443b      	add	r3, r7
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004334:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	4413      	add	r3, r2
 800433c:	edd3 7a00 	vldr	s15, [r3]
 8004340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004344:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004348:	443b      	add	r3, r7
 800434a:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 800434e:	4b67      	ldr	r3, [pc, #412]	@ (80044ec <ETS+0x478>)
 8004350:	443b      	add	r3, r7
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f603 5305 	addw	r3, r3, #3333	@ 0xd05
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	edc3 7a00 	vstr	s15, [r3]
        mat_H[4][i] = mz[i]*mz[i];
 8004360:	4b62      	ldr	r3, [pc, #392]	@ (80044ec <ETS+0x478>)
 8004362:	443b      	add	r3, r7
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800436c:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	4413      	add	r3, r2
 8004374:	ed93 7a00 	vldr	s14, [r3]
 8004378:	4b5c      	ldr	r3, [pc, #368]	@ (80044ec <ETS+0x478>)
 800437a:	443b      	add	r3, r7
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004384:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	4413      	add	r3, r2
 800438c:	edd3 7a00 	vldr	s15, [r3]
 8004390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004394:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004398:	443b      	add	r3, r7
 800439a:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 800439e:	4b53      	ldr	r3, [pc, #332]	@ (80044ec <ETS+0x478>)
 80043a0:	443b      	add	r3, r7
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	f241 135c 	movw	r3, #4444	@ 0x115c
 80043a8:	440b      	add	r3, r1
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	edc3 7a00 	vstr	s15, [r3]
        mat_H[5][i] = mx[i];
 80043b2:	4b4e      	ldr	r3, [pc, #312]	@ (80044ec <ETS+0x478>)
 80043b4:	443b      	add	r3, r7
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80043be:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	4413      	add	r3, r2
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80043cc:	443b      	add	r3, r7
 80043ce:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 80043d2:	4b46      	ldr	r3, [pc, #280]	@ (80044ec <ETS+0x478>)
 80043d4:	443b      	add	r3, r7
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 80043dc:	4403      	add	r3, r0
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	601a      	str	r2, [r3, #0]
        mat_H[6][i] = my[i];
 80043e4:	4b41      	ldr	r3, [pc, #260]	@ (80044ec <ETS+0x478>)
 80043e6:	443b      	add	r3, r7
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80043f0:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 80043f4:	6812      	ldr	r2, [r2, #0]
 80043f6:	4413      	add	r3, r2
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80043fe:	443b      	add	r3, r7
 8004400:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8004404:	4b39      	ldr	r3, [pc, #228]	@ (80044ec <ETS+0x478>)
 8004406:	443b      	add	r3, r7
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 800440e:	4403      	add	r3, r0
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	601a      	str	r2, [r3, #0]
        mat_H[7][i] = mz[i];
 8004416:	4b35      	ldr	r3, [pc, #212]	@ (80044ec <ETS+0x478>)
 8004418:	443b      	add	r3, r7
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004422:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	4413      	add	r3, r2
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004430:	443b      	add	r3, r7
 8004432:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8004436:	4b2d      	ldr	r3, [pc, #180]	@ (80044ec <ETS+0x478>)
 8004438:	443b      	add	r3, r7
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	f641 6361 	movw	r3, #7777	@ 0x1e61
 8004440:	4403      	add	r3, r0
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	601a      	str	r2, [r3, #0]
        mat_H[8][i] = 1;
 8004448:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 800444c:	443b      	add	r3, r7
 800444e:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004452:	4b26      	ldr	r3, [pc, #152]	@ (80044ec <ETS+0x478>)
 8004454:	443b      	add	r3, r7
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800445c:	440b      	add	r3, r1
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004466:	601a      	str	r2, [r3, #0]
        my_2[i] = -(my[i]*my[i]);
 8004468:	4b20      	ldr	r3, [pc, #128]	@ (80044ec <ETS+0x478>)
 800446a:	443b      	add	r3, r7
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004474:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	4413      	add	r3, r2
 800447c:	ed93 7a00 	vldr	s14, [r3]
 8004480:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <ETS+0x478>)
 8004482:	443b      	add	r3, r7
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800448c:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	4413      	add	r3, r2
 8004494:	edd3 7a00 	vldr	s15, [r3]
 8004498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449c:	eef1 7a67 	vneg.f32	s15, s15
 80044a0:	f64a 5320 	movw	r3, #44320	@ 0xad20
 80044a4:	443b      	add	r3, r7
 80044a6:	f6a3 6224 	subw	r2, r3, #3620	@ 0xe24
 80044aa:	4b10      	ldr	r3, [pc, #64]	@ (80044ec <ETS+0x478>)
 80044ac:	443b      	add	r3, r7
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0; i < tam; i++)
 80044b8:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <ETS+0x478>)
 80044ba:	443b      	add	r3, r7
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <ETS+0x478>)
 80044c2:	443a      	add	r2, r7
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <ETS+0x478>)
 80044c8:	443b      	add	r3, r7
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f240 4256 	movw	r2, #1110	@ 0x456
 80044d0:	4293      	cmp	r3, r2
 80044d2:	f77f aea7 	ble.w	8004224 <ETS+0x1b0>
    }

    //Multiplicação da matriz H por sua transposta
    for(int i=0; i < N; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	4a05      	ldr	r2, [pc, #20]	@ (80044f0 <ETS+0x47c>)
 80044da:	443a      	add	r2, r7
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e098      	b.n	8004612 <ETS+0x59e>
    {
        for(int j=0; j < N; j++)
 80044e0:	2300      	movs	r3, #0
 80044e2:	4a04      	ldr	r2, [pc, #16]	@ (80044f4 <ETS+0x480>)
 80044e4:	443a      	add	r2, r7
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e086      	b.n	80045f8 <ETS+0x584>
 80044ea:	bf00      	nop
 80044ec:	00014d1c 	.word	0x00014d1c
 80044f0:	00014d18 	.word	0x00014d18
 80044f4:	00014d14 	.word	0x00014d14
        {
            H_Ht[i][j] = 0;
 80044f8:	f64a 5320 	movw	r3, #44320	@ 0xad20
 80044fc:	443b      	add	r3, r7
 80044fe:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8004502:	4ba7      	ldr	r3, [pc, #668]	@ (80047a0 <ETS+0x72c>)
 8004504:	443b      	add	r3, r7
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	4aa5      	ldr	r2, [pc, #660]	@ (80047a4 <ETS+0x730>)
 8004510:	443a      	add	r2, r7
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
            for(int k = 0; k < tam; k++)
 8004520:	2300      	movs	r3, #0
 8004522:	4aa1      	ldr	r2, [pc, #644]	@ (80047a8 <ETS+0x734>)
 8004524:	443a      	add	r2, r7
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e058      	b.n	80045dc <ETS+0x568>
            {
                H_Ht[i][j] += mat_H[i][k]*mat_H[j][k];
 800452a:	f64a 5320 	movw	r3, #44320	@ 0xad20
 800452e:	443b      	add	r3, r7
 8004530:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8004534:	4b9a      	ldr	r3, [pc, #616]	@ (80047a0 <ETS+0x72c>)
 8004536:	443b      	add	r3, r7
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	4a98      	ldr	r2, [pc, #608]	@ (80047a4 <ETS+0x730>)
 8004542:	443a      	add	r2, r7
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	ed93 7a00 	vldr	s14, [r3]
 8004550:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004554:	443b      	add	r3, r7
 8004556:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 800455a:	4b91      	ldr	r3, [pc, #580]	@ (80047a0 <ETS+0x72c>)
 800455c:	443b      	add	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f240 4157 	movw	r1, #1111	@ 0x457
 8004564:	fb03 f101 	mul.w	r1, r3, r1
 8004568:	4b8f      	ldr	r3, [pc, #572]	@ (80047a8 <ETS+0x734>)
 800456a:	443b      	add	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	440b      	add	r3, r1
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	edd3 6a00 	vldr	s13, [r3]
 8004578:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 800457c:	443b      	add	r3, r7
 800457e:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004582:	4b88      	ldr	r3, [pc, #544]	@ (80047a4 <ETS+0x730>)
 8004584:	443b      	add	r3, r7
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f240 4157 	movw	r1, #1111	@ 0x457
 800458c:	fb03 f101 	mul.w	r1, r3, r1
 8004590:	4b85      	ldr	r3, [pc, #532]	@ (80047a8 <ETS+0x734>)
 8004592:	443b      	add	r3, r7
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	440b      	add	r3, r1
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045a8:	f64a 5320 	movw	r3, #44320	@ 0xad20
 80045ac:	443b      	add	r3, r7
 80045ae:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 80045b2:	4b7b      	ldr	r3, [pc, #492]	@ (80047a0 <ETS+0x72c>)
 80045b4:	443b      	add	r3, r7
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	4a79      	ldr	r2, [pc, #484]	@ (80047a4 <ETS+0x730>)
 80045c0:	443a      	add	r2, r7
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < tam; k++)
 80045ce:	4b76      	ldr	r3, [pc, #472]	@ (80047a8 <ETS+0x734>)
 80045d0:	443b      	add	r3, r7
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3301      	adds	r3, #1
 80045d6:	4a74      	ldr	r2, [pc, #464]	@ (80047a8 <ETS+0x734>)
 80045d8:	443a      	add	r2, r7
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	4b72      	ldr	r3, [pc, #456]	@ (80047a8 <ETS+0x734>)
 80045de:	443b      	add	r3, r7
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f240 4256 	movw	r2, #1110	@ 0x456
 80045e6:	4293      	cmp	r3, r2
 80045e8:	dd9f      	ble.n	800452a <ETS+0x4b6>
        for(int j=0; j < N; j++)
 80045ea:	4b6e      	ldr	r3, [pc, #440]	@ (80047a4 <ETS+0x730>)
 80045ec:	443b      	add	r3, r7
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	4a6c      	ldr	r2, [pc, #432]	@ (80047a4 <ETS+0x730>)
 80045f4:	443a      	add	r2, r7
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b6a      	ldr	r3, [pc, #424]	@ (80047a4 <ETS+0x730>)
 80045fa:	443b      	add	r3, r7
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b08      	cmp	r3, #8
 8004600:	f77f af7a 	ble.w	80044f8 <ETS+0x484>
    for(int i=0; i < N; i++)
 8004604:	4b66      	ldr	r3, [pc, #408]	@ (80047a0 <ETS+0x72c>)
 8004606:	443b      	add	r3, r7
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	4a64      	ldr	r2, [pc, #400]	@ (80047a0 <ETS+0x72c>)
 800460e:	443a      	add	r2, r7
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b63      	ldr	r3, [pc, #396]	@ (80047a0 <ETS+0x72c>)
 8004614:	443b      	add	r3, r7
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b08      	cmp	r3, #8
 800461a:	f77f af61 	ble.w	80044e0 <ETS+0x46c>
            }
        }
    }

    inverter_matriz(H_Ht, inv);
 800461e:	4a63      	ldr	r2, [pc, #396]	@ (80047ac <ETS+0x738>)
 8004620:	4b63      	ldr	r3, [pc, #396]	@ (80047b0 <ETS+0x73c>)
 8004622:	4413      	add	r3, r2
 8004624:	19da      	adds	r2, r3, r7
 8004626:	4b63      	ldr	r3, [pc, #396]	@ (80047b4 <ETS+0x740>)
 8004628:	f503 33a6 	add.w	r3, r3, #84992	@ 0x14c00
 800462c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004630:	443b      	add	r3, r7
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f7fc f9a3 	bl	8000980 <inverter_matriz>

    //Multiplica a inversa por H transposta
    for(int i=0; i < N; i++)
 800463a:	2300      	movs	r3, #0
 800463c:	4a5e      	ldr	r2, [pc, #376]	@ (80047b8 <ETS+0x744>)
 800463e:	443a      	add	r2, r7
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e090      	b.n	8004766 <ETS+0x6f2>
    {
        for(int j=0; j < tam; j++)
 8004644:	2300      	movs	r3, #0
 8004646:	4a5d      	ldr	r2, [pc, #372]	@ (80047bc <ETS+0x748>)
 8004648:	443a      	add	r2, r7
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	e07c      	b.n	8004748 <ETS+0x6d4>
        {
            mul_mat[i][j] = 0;
 800464e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004652:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004656:	4b58      	ldr	r3, [pc, #352]	@ (80047b8 <ETS+0x744>)
 8004658:	443b      	add	r3, r7
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f240 4157 	movw	r1, #1111	@ 0x457
 8004660:	fb03 f101 	mul.w	r1, r3, r1
 8004664:	4b55      	ldr	r3, [pc, #340]	@ (80047bc <ETS+0x748>)
 8004666:	443b      	add	r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	440b      	add	r3, r1
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
            for(int k=0; k < N; k++)
 8004676:	2300      	movs	r3, #0
 8004678:	4a51      	ldr	r2, [pc, #324]	@ (80047c0 <ETS+0x74c>)
 800467a:	443a      	add	r2, r7
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e057      	b.n	8004730 <ETS+0x6bc>
            {
                mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8004680:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004684:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004688:	4b4b      	ldr	r3, [pc, #300]	@ (80047b8 <ETS+0x744>)
 800468a:	443b      	add	r3, r7
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f240 4157 	movw	r1, #1111	@ 0x457
 8004692:	fb03 f101 	mul.w	r1, r3, r1
 8004696:	4b49      	ldr	r3, [pc, #292]	@ (80047bc <ETS+0x748>)
 8004698:	443b      	add	r3, r7
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	440b      	add	r3, r1
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	ed93 7a00 	vldr	s14, [r3]
 80046a6:	f649 5320 	movw	r3, #40224	@ 0x9d20
 80046aa:	443b      	add	r3, r7
 80046ac:	4619      	mov	r1, r3
 80046ae:	4b42      	ldr	r3, [pc, #264]	@ (80047b8 <ETS+0x744>)
 80046b0:	443b      	add	r3, r7
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	4a41      	ldr	r2, [pc, #260]	@ (80047c0 <ETS+0x74c>)
 80046bc:	443a      	add	r2, r7
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3bac      	subs	r3, #172	@ 0xac
 80046c8:	edd3 6a00 	vldr	s13, [r3]
 80046cc:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80046d0:	443b      	add	r3, r7
 80046d2:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 80046d6:	4b3a      	ldr	r3, [pc, #232]	@ (80047c0 <ETS+0x74c>)
 80046d8:	443b      	add	r3, r7
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f240 4157 	movw	r1, #1111	@ 0x457
 80046e0:	fb03 f101 	mul.w	r1, r3, r1
 80046e4:	4b35      	ldr	r3, [pc, #212]	@ (80047bc <ETS+0x748>)
 80046e6:	443b      	add	r3, r7
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	440b      	add	r3, r1
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	edd3 7a00 	vldr	s15, [r3]
 80046f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004700:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004704:	4b2c      	ldr	r3, [pc, #176]	@ (80047b8 <ETS+0x744>)
 8004706:	443b      	add	r3, r7
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f240 4157 	movw	r1, #1111	@ 0x457
 800470e:	fb03 f101 	mul.w	r1, r3, r1
 8004712:	4b2a      	ldr	r3, [pc, #168]	@ (80047bc <ETS+0x748>)
 8004714:	443b      	add	r3, r7
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	440b      	add	r3, r1
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	edc3 7a00 	vstr	s15, [r3]
            for(int k=0; k < N; k++)
 8004722:	4b27      	ldr	r3, [pc, #156]	@ (80047c0 <ETS+0x74c>)
 8004724:	443b      	add	r3, r7
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a25      	ldr	r2, [pc, #148]	@ (80047c0 <ETS+0x74c>)
 800472c:	443a      	add	r2, r7
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b23      	ldr	r3, [pc, #140]	@ (80047c0 <ETS+0x74c>)
 8004732:	443b      	add	r3, r7
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b08      	cmp	r3, #8
 8004738:	dda2      	ble.n	8004680 <ETS+0x60c>
        for(int j=0; j < tam; j++)
 800473a:	4b20      	ldr	r3, [pc, #128]	@ (80047bc <ETS+0x748>)
 800473c:	443b      	add	r3, r7
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	4a1e      	ldr	r2, [pc, #120]	@ (80047bc <ETS+0x748>)
 8004744:	443a      	add	r2, r7
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b1c      	ldr	r3, [pc, #112]	@ (80047bc <ETS+0x748>)
 800474a:	443b      	add	r3, r7
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f240 4256 	movw	r2, #1110	@ 0x456
 8004752:	4293      	cmp	r3, r2
 8004754:	f77f af7b 	ble.w	800464e <ETS+0x5da>
    for(int i=0; i < N; i++)
 8004758:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <ETS+0x744>)
 800475a:	443b      	add	r3, r7
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	4a15      	ldr	r2, [pc, #84]	@ (80047b8 <ETS+0x744>)
 8004762:	443a      	add	r2, r7
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <ETS+0x744>)
 8004768:	443b      	add	r3, r7
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b08      	cmp	r3, #8
 800476e:	f77f af69 	ble.w	8004644 <ETS+0x5d0>
            }
        }
    }

    //Resultado da psedo-inversa
    for(int i=0; i < N; i++)
 8004772:	2300      	movs	r3, #0
 8004774:	4a13      	ldr	r2, [pc, #76]	@ (80047c4 <ETS+0x750>)
 8004776:	443a      	add	r2, r7
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e075      	b.n	8004868 <ETS+0x7f4>
    {
        X[i] = 0;
 800477c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004780:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8004784:	4b0f      	ldr	r3, [pc, #60]	@ (80047c4 <ETS+0x750>)
 8004786:	443b      	add	r3, r7
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
        for(int j=0; j < tam; j++)
 8004794:	2300      	movs	r3, #0
 8004796:	4a0c      	ldr	r2, [pc, #48]	@ (80047c8 <ETS+0x754>)
 8004798:	443a      	add	r2, r7
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e056      	b.n	800484c <ETS+0x7d8>
 800479e:	bf00      	nop
 80047a0:	00014d18 	.word	0x00014d18
 80047a4:	00014d14 	.word	0x00014d14
 80047a8:	00014d10 	.word	0x00014d10
 80047ac:	ffff4f54 	.word	0xffff4f54
 80047b0:	00014d20 	.word	0x00014d20
 80047b4:	ffff5098 	.word	0xffff5098
 80047b8:	00014d0c 	.word	0x00014d0c
 80047bc:	00014d08 	.word	0x00014d08
 80047c0:	00014d04 	.word	0x00014d04
 80047c4:	00014d00 	.word	0x00014d00
 80047c8:	00014cfc 	.word	0x00014cfc
        {
            X[i] += mul_mat[i][j]*my_2[j];
 80047cc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80047d0:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 80047d4:	4bdb      	ldr	r3, [pc, #876]	@ (8004b44 <ETS+0xad0>)
 80047d6:	443b      	add	r3, r7
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	ed93 7a00 	vldr	s14, [r3]
 80047e2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80047e6:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 80047ea:	4bd6      	ldr	r3, [pc, #856]	@ (8004b44 <ETS+0xad0>)
 80047ec:	443b      	add	r3, r7
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f240 4157 	movw	r1, #1111	@ 0x457
 80047f4:	fb03 f101 	mul.w	r1, r3, r1
 80047f8:	4bd3      	ldr	r3, [pc, #844]	@ (8004b48 <ETS+0xad4>)
 80047fa:	443b      	add	r3, r7
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	440b      	add	r3, r1
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	edd3 6a00 	vldr	s13, [r3]
 8004808:	f64a 5320 	movw	r3, #44320	@ 0xad20
 800480c:	443b      	add	r3, r7
 800480e:	f6a3 6224 	subw	r2, r3, #3620	@ 0xe24
 8004812:	4bcd      	ldr	r3, [pc, #820]	@ (8004b48 <ETS+0xad4>)
 8004814:	443b      	add	r3, r7
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	edd3 7a00 	vldr	s15, [r3]
 8004820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004828:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800482c:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8004830:	4bc4      	ldr	r3, [pc, #784]	@ (8004b44 <ETS+0xad0>)
 8004832:	443b      	add	r3, r7
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	edc3 7a00 	vstr	s15, [r3]
        for(int j=0; j < tam; j++)
 800483e:	4bc2      	ldr	r3, [pc, #776]	@ (8004b48 <ETS+0xad4>)
 8004840:	443b      	add	r3, r7
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3301      	adds	r3, #1
 8004846:	4ac0      	ldr	r2, [pc, #768]	@ (8004b48 <ETS+0xad4>)
 8004848:	443a      	add	r2, r7
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4bbe      	ldr	r3, [pc, #760]	@ (8004b48 <ETS+0xad4>)
 800484e:	443b      	add	r3, r7
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f240 4256 	movw	r2, #1110	@ 0x456
 8004856:	4293      	cmp	r3, r2
 8004858:	ddb8      	ble.n	80047cc <ETS+0x758>
    for(int i=0; i < N; i++)
 800485a:	4bba      	ldr	r3, [pc, #744]	@ (8004b44 <ETS+0xad0>)
 800485c:	443b      	add	r3, r7
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	4ab8      	ldr	r2, [pc, #736]	@ (8004b44 <ETS+0xad0>)
 8004864:	443a      	add	r2, r7
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4bb6      	ldr	r3, [pc, #728]	@ (8004b44 <ETS+0xad0>)
 800486a:	443b      	add	r3, r7
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b08      	cmp	r3, #8
 8004870:	dd84      	ble.n	800477c <ETS+0x708>
        }
    }


    // Segundo passo, encontrando os parâmetros
    X1_2 = X[1]*X[1];
 8004872:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004876:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800487a:	ed93 7a01 	vldr	s14, [r3, #4]
 800487e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004882:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004886:	edd3 7a01 	vldr	s15, [r3, #4]
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488e:	4baf      	ldr	r3, [pc, #700]	@ (8004b4c <ETS+0xad8>)
 8004890:	443b      	add	r3, r7
 8004892:	edc3 7a00 	vstr	s15, [r3]
    X2_2 = X[2]*X[2];
 8004896:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800489a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800489e:	ed93 7a02 	vldr	s14, [r3, #8]
 80048a2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80048a6:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80048aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b2:	4ba7      	ldr	r3, [pc, #668]	@ (8004b50 <ETS+0xadc>)
 80048b4:	443b      	add	r3, r7
 80048b6:	edc3 7a00 	vstr	s15, [r3]
    X3_2 = X[3]*X[3];
 80048ba:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80048be:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80048c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80048c6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80048ca:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80048ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	4b9f      	ldr	r3, [pc, #636]	@ (8004b54 <ETS+0xae0>)
 80048d8:	443b      	add	r3, r7
 80048da:	edc3 7a00 	vstr	s15, [r3]
    X4_2 = X[4]*X[4];
 80048de:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80048e2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80048e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80048ea:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80048ee:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80048f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	4b97      	ldr	r3, [pc, #604]	@ (8004b58 <ETS+0xae4>)
 80048fc:	443b      	add	r3, r7
 80048fe:	edc3 7a00 	vstr	s15, [r3]
    X5_2 = X[5]*X[5];
 8004902:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004906:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800490a:	ed93 7a05 	vldr	s14, [r3, #20]
 800490e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004912:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004916:	edd3 7a05 	vldr	s15, [r3, #20]
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	4b8f      	ldr	r3, [pc, #572]	@ (8004b5c <ETS+0xae8>)
 8004920:	443b      	add	r3, r7
 8004922:	edc3 7a00 	vstr	s15, [r3]
    X6_2 = X[6]*X[6];
 8004926:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800492a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800492e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004932:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004936:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800493a:	edd3 7a06 	vldr	s15, [r3, #24]
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	4b87      	ldr	r3, [pc, #540]	@ (8004b60 <ETS+0xaec>)
 8004944:	443b      	add	r3, r7
 8004946:	edc3 7a00 	vstr	s15, [r3]
    X7_2 = X[7]*X[7];
 800494a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800494e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004952:	ed93 7a07 	vldr	s14, [r3, #28]
 8004956:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800495a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800495e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	4b7f      	ldr	r3, [pc, #508]	@ (8004b64 <ETS+0xaf0>)
 8004968:	443b      	add	r3, r7
 800496a:	edc3 7a00 	vstr	s15, [r3]
    X8_2 = X[8]*X[8];
 800496e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004972:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004976:	ed93 7a08 	vldr	s14, [r3, #32]
 800497a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800497e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004982:	edd3 7a08 	vldr	s15, [r3, #32]
 8004986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498a:	4b77      	ldr	r3, [pc, #476]	@ (8004b68 <ETS+0xaf4>)
 800498c:	443b      	add	r3, r7
 800498e:	edc3 7a00 	vstr	s15, [r3]

    psi7 = 2*(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]);
 8004992:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004996:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800499a:	ed93 7a04 	vldr	s14, [r3, #16]
 800499e:	4b6b      	ldr	r3, [pc, #428]	@ (8004b4c <ETS+0xad8>)
 80049a0:	443b      	add	r3, r7
 80049a2:	edd3 7a00 	vldr	s15, [r3]
 80049a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049aa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80049ae:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80049b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80049b6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80049ba:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80049be:	edd3 7a02 	vldr	s15, [r3, #8]
 80049c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80049c6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80049ca:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80049ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80049d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049da:	4b5d      	ldr	r3, [pc, #372]	@ (8004b50 <ETS+0xadc>)
 80049dc:	443b      	add	r3, r7
 80049de:	edd3 7a00 	vldr	s15, [r3]
 80049e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049e6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80049ea:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80049ee:	edd3 6a00 	vldr	s13, [r3]
 80049f2:	4b58      	ldr	r3, [pc, #352]	@ (8004b54 <ETS+0xae0>)
 80049f4:	443b      	add	r3, r7
 80049f6:	edd3 7a00 	vldr	s15, [r3]
 80049fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a02:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004a06:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004a0a:	edd3 7a00 	vldr	s15, [r3]
 8004a0e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004a12:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004a16:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004a1a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004a1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004b6c <ETS+0xaf8>)
 8004a30:	443b      	add	r3, r7
 8004a32:	edc3 7a00 	vstr	s15, [r3]
    bx = -(X3_2 * X[5] + 2*X[2]*X[7] - 4*X[4]*X[5] - X[1]*X[3]*X[7] + 2*X[1]*X[4]*X[6] - X[2]*X[3]*X[6]) / psi7;
 8004a36:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004a3a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004a3e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004a42:	4b44      	ldr	r3, [pc, #272]	@ (8004b54 <ETS+0xae0>)
 8004a44:	443b      	add	r3, r7
 8004a46:	edd3 7a00 	vldr	s15, [r3]
 8004a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a4e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004a52:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004a56:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a5a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004a5e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004a62:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004a66:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a72:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004a76:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004a7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a7e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004a82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004a86:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004a8a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004a8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a9a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004a9e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004aa2:	edd3 6a01 	vldr	s13, [r3, #4]
 8004aa6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004aaa:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004aae:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ab2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ab6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004aba:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004abe:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004aca:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ace:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004ad2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ad6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004ada:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ade:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004ae2:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ae6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004aea:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004aee:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004af2:	edd3 7a06 	vldr	s15, [r3, #24]
 8004af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004afe:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004b02:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004b06:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b0a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004b0e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004b12:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004b1a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004b1e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004b22:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b2e:	eef1 6a67 	vneg.f32	s13, s15
 8004b32:	4b0e      	ldr	r3, [pc, #56]	@ (8004b6c <ETS+0xaf8>)
 8004b34:	443b      	add	r3, r7
 8004b36:	ed93 7a00 	vldr	s14, [r3]
 8004b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <ETS+0xafc>)
 8004b40:	443b      	add	r3, r7
 8004b42:	e017      	b.n	8004b74 <ETS+0xb00>
 8004b44:	00014d00 	.word	0x00014d00
 8004b48:	00014cfc 	.word	0x00014cfc
 8004b4c:	00014cb0 	.word	0x00014cb0
 8004b50:	00014cac 	.word	0x00014cac
 8004b54:	00014ca8 	.word	0x00014ca8
 8004b58:	00014ca4 	.word	0x00014ca4
 8004b5c:	00014ca0 	.word	0x00014ca0
 8004b60:	00014c9c 	.word	0x00014c9c
 8004b64:	00014c98 	.word	0x00014c98
 8004b68:	00014c94 	.word	0x00014c94
 8004b6c:	00014cf8 	.word	0x00014cf8
 8004b70:	00014cd4 	.word	0x00014cd4
 8004b74:	edc3 7a00 	vstr	s15, [r3]
    by = -(X2_2 * X[6] + 2*X[0]*X[3]*X[7] - 4*X[0]*X[4]*X[6] - X[1]*X[2]*X[7] + 2*X[1]*X[4]*X[5] - X[2]*X[3]*X[5]) / psi7;
 8004b78:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004b7c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004b80:	ed93 7a06 	vldr	s14, [r3, #24]
 8004b84:	4bf2      	ldr	r3, [pc, #968]	@ (8004f50 <ETS+0xedc>)
 8004b86:	443b      	add	r3, r7
 8004b88:	edd3 7a00 	vldr	s15, [r3]
 8004b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b90:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004b94:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004b98:	edd3 7a00 	vldr	s15, [r3]
 8004b9c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004ba0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ba4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004ba8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004bb0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004bb4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004bb8:	edd3 7a07 	vldr	s15, [r3, #28]
 8004bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bc4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004bc8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004bcc:	edd3 7a00 	vldr	s15, [r3]
 8004bd0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004bd4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004bd8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004bdc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004be0:	edd3 7a04 	vldr	s15, [r3, #16]
 8004be4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004be8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004bec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004bf0:	edd3 7a06 	vldr	s15, [r3, #24]
 8004bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bfc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004c00:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004c04:	edd3 6a01 	vldr	s13, [r3, #4]
 8004c08:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004c0c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004c10:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004c18:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004c1c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004c20:	edd3 7a07 	vldr	s15, [r3, #28]
 8004c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c2c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004c30:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004c34:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004c3c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004c40:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004c44:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004c4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004c50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004c54:	edd3 7a05 	vldr	s15, [r3, #20]
 8004c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c60:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004c64:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004c68:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c6c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004c70:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004c74:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004c7c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004c80:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004c84:	edd3 7a05 	vldr	s15, [r3, #20]
 8004c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c90:	eef1 6a67 	vneg.f32	s13, s15
 8004c94:	4baf      	ldr	r3, [pc, #700]	@ (8004f54 <ETS+0xee0>)
 8004c96:	443b      	add	r3, r7
 8004c98:	ed93 7a00 	vldr	s14, [r3]
 8004c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca0:	4bad      	ldr	r3, [pc, #692]	@ (8004f58 <ETS+0xee4>)
 8004ca2:	443b      	add	r3, r7
 8004ca4:	edc3 7a00 	vstr	s15, [r3]
    bz = -(X1_2*X[7] - 4*X[0]*X[7] + 2*X[2]*X[5] + 2*X[0]*X[3]*X[6] - X[1]*X[2]*X[6] - X[1]*X[3]*X[5]) / psi7;
 8004ca8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004cac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004cb0:	ed93 7a07 	vldr	s14, [r3, #28]
 8004cb4:	4ba9      	ldr	r3, [pc, #676]	@ (8004f5c <ETS+0xee8>)
 8004cb6:	443b      	add	r3, r7
 8004cb8:	edd3 7a00 	vldr	s15, [r3]
 8004cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cc0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004cc4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004cc8:	edd3 7a00 	vldr	s15, [r3]
 8004ccc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004cd0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004cd4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004cd8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004cdc:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ce4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ce8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004cec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004cf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cf4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004cf8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004cfc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d00:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d0c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d10:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d14:	edd3 7a00 	vldr	s15, [r3]
 8004d18:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d1c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d20:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d24:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d2c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d30:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d34:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d40:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d44:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d48:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d5c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d60:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d64:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d70:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d74:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d78:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d7c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d80:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d84:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d8c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d90:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004d94:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004da0:	eef1 6a67 	vneg.f32	s13, s15
 8004da4:	4b6b      	ldr	r3, [pc, #428]	@ (8004f54 <ETS+0xee0>)
 8004da6:	443b      	add	r3, r7
 8004da8:	ed93 7a00 	vldr	s14, [r3]
 8004dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db0:	4b6b      	ldr	r3, [pc, #428]	@ (8004f60 <ETS+0xeec>)
 8004db2:	443b      	add	r3, r7
 8004db4:	edc3 7a00 	vstr	s15, [r3]

    psi8 = -X1_2*X7_2 + 4*X[4]*X[8]*X1_2 - 4*X[8]*X[1]*X[2]*X[3] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[4]*X[1]*X[5]*X[6] - X2_2*X6_2 + 4*X[8]*X2_2 + 2*X[2]*X[3]*X[5]*X[6] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[0]*X[8]*X3_2 + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8] - 4*X[0]*X[3]*X[6]*X[7];
 8004db8:	4b68      	ldr	r3, [pc, #416]	@ (8004f5c <ETS+0xee8>)
 8004dba:	443b      	add	r3, r7
 8004dbc:	edd3 7a00 	vldr	s15, [r3]
 8004dc0:	eeb1 7a67 	vneg.f32	s14, s15
 8004dc4:	4b67      	ldr	r3, [pc, #412]	@ (8004f64 <ETS+0xef0>)
 8004dc6:	443b      	add	r3, r7
 8004dc8:	edd3 7a00 	vldr	s15, [r3]
 8004dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dd0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004dd4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004dd8:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ddc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004de0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004de4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004de8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004dec:	edd3 7a08 	vldr	s15, [r3, #32]
 8004df0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004df4:	4b59      	ldr	r3, [pc, #356]	@ (8004f5c <ETS+0xee8>)
 8004df6:	443b      	add	r3, r7
 8004df8:	edd3 7a00 	vldr	s15, [r3]
 8004dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e04:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e08:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004e0c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e10:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004e14:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004e18:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e1c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004e20:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e28:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e2c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004e30:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e38:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e3c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004e40:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004e54:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e58:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004e5c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e60:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004e64:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e6c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e70:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004e74:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e7c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e80:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004e84:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e90:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e94:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004e98:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e9c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004ea0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ea4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004ea8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004eac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004eb0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004eb4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004eb8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ebc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ec0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ec4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004ec8:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ed4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ed8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004edc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ee0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004ee4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004ee8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004eec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004ef0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ef4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ef8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004efc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8004f04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f08:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f0c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f10:	edd3 7a06 	vldr	s15, [r3, #24]
 8004f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <ETS+0xedc>)
 8004f1e:	443b      	add	r3, r7
 8004f20:	edd3 6a00 	vldr	s13, [r3]
 8004f24:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <ETS+0xef4>)
 8004f26:	443b      	add	r3, r7
 8004f28:	edd3 7a00 	vldr	s15, [r3]
 8004f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f34:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f38:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f40:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004f44:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004f48:	4b01      	ldr	r3, [pc, #4]	@ (8004f50 <ETS+0xedc>)
 8004f4a:	443b      	add	r3, r7
 8004f4c:	e00e      	b.n	8004f6c <ETS+0xef8>
 8004f4e:	bf00      	nop
 8004f50:	00014cac 	.word	0x00014cac
 8004f54:	00014cf8 	.word	0x00014cf8
 8004f58:	00014cd0 	.word	0x00014cd0
 8004f5c:	00014cb0 	.word	0x00014cb0
 8004f60:	00014ccc 	.word	0x00014ccc
 8004f64:	00014c98 	.word	0x00014c98
 8004f68:	00014c9c 	.word	0x00014c9c
 8004f6c:	edd3 7a00 	vldr	s15, [r3]
 8004f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f78:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f7c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f80:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f84:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004f88:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f8c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f90:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f98:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f9c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fa0:	edd3 7a05 	vldr	s15, [r3, #20]
 8004fa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004fa8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fb0:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fbc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fc0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fc8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004fcc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004fd0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fd4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004fdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004fe0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fe4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fe8:	edd3 7a07 	vldr	s15, [r3, #28]
 8004fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ff4:	4be4      	ldr	r3, [pc, #912]	@ (8005388 <ETS+0x1314>)
 8004ff6:	443b      	add	r3, r7
 8004ff8:	edd3 6a00 	vldr	s13, [r3]
 8004ffc:	4be3      	ldr	r3, [pc, #908]	@ (800538c <ETS+0x1318>)
 8004ffe:	443b      	add	r3, r7
 8005000:	edd3 7a00 	vldr	s15, [r3]
 8005004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005008:	ee37 7a67 	vsub.f32	s14, s14, s15
 800500c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005010:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005014:	edd3 7a00 	vldr	s15, [r3]
 8005018:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800501c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005020:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005024:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005028:	edd3 7a08 	vldr	s15, [r3, #32]
 800502c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005030:	4bd5      	ldr	r3, [pc, #852]	@ (8005388 <ETS+0x1314>)
 8005032:	443b      	add	r3, r7
 8005034:	edd3 7a00 	vldr	s15, [r3]
 8005038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800503c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005040:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005044:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005048:	edd3 7a04 	vldr	s15, [r3, #16]
 800504c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005050:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005054:	4bcd      	ldr	r3, [pc, #820]	@ (800538c <ETS+0x1318>)
 8005056:	443b      	add	r3, r7
 8005058:	edd3 7a00 	vldr	s15, [r3]
 800505c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005064:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005068:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800506c:	edd3 7a00 	vldr	s15, [r3]
 8005070:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005074:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005078:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800507c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005080:	edd3 7a04 	vldr	s15, [r3, #16]
 8005084:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005088:	4bc1      	ldr	r3, [pc, #772]	@ (8005390 <ETS+0x131c>)
 800508a:	443b      	add	r3, r7
 800508c:	edd3 7a00 	vldr	s15, [r3]
 8005090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005098:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800509c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050a0:	edd3 7a00 	vldr	s15, [r3]
 80050a4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80050a8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80050ac:	4bb9      	ldr	r3, [pc, #740]	@ (8005394 <ETS+0x1320>)
 80050ae:	443b      	add	r3, r7
 80050b0:	edd3 7a00 	vldr	s15, [r3]
 80050b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050bc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050c0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050c4:	edd3 7a00 	vldr	s15, [r3]
 80050c8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80050cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80050d0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050d4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80050dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80050e0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050e4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80050ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050fc:	edd3 7a00 	vldr	s15, [r3]
 8005100:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005104:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005108:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800510c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005110:	edd3 7a03 	vldr	s15, [r3, #12]
 8005114:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005118:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800511c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005120:	edd3 7a06 	vldr	s15, [r3, #24]
 8005124:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005128:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800512c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005130:	edd3 7a07 	vldr	s15, [r3, #28]
 8005134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800513c:	4b96      	ldr	r3, [pc, #600]	@ (8005398 <ETS+0x1324>)
 800513e:	443b      	add	r3, r7
 8005140:	edc3 7a00 	vstr	s15, [r3]

    divs =  2 * fabsf(X[4])*fabsf(X[4])*fabsf(X[4]) * (X[4] * X1_2 - X[1] * X[2] * X[3] + X2_2 + X[0] * X3_2 - 4 * X[0] * X[4]);
 8005144:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005148:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800514c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005150:	eef0 7ae7 	vabs.f32	s15, s15
 8005154:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005158:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800515c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005160:	edd3 7a04 	vldr	s15, [r3, #16]
 8005164:	eef0 7ae7 	vabs.f32	s15, s15
 8005168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800516c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005170:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005174:	edd3 7a04 	vldr	s15, [r3, #16]
 8005178:	eef0 7ae7 	vabs.f32	s15, s15
 800517c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005180:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005184:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005188:	edd3 6a04 	vldr	s13, [r3, #16]
 800518c:	4b83      	ldr	r3, [pc, #524]	@ (800539c <ETS+0x1328>)
 800518e:	443b      	add	r3, r7
 8005190:	edd3 7a00 	vldr	s15, [r3]
 8005194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005198:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800519c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051a0:	ed93 6a01 	vldr	s12, [r3, #4]
 80051a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80051b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80051b4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051b8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80051c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80051c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80051c8:	4b75      	ldr	r3, [pc, #468]	@ (80053a0 <ETS+0x132c>)
 80051ca:	443b      	add	r3, r7
 80051cc:	edd3 7a00 	vldr	s15, [r3]
 80051d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80051d4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051d8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051dc:	ed93 6a00 	vldr	s12, [r3]
 80051e0:	4b69      	ldr	r3, [pc, #420]	@ (8005388 <ETS+0x1314>)
 80051e2:	443b      	add	r3, r7
 80051e4:	edd3 7a00 	vldr	s15, [r3]
 80051e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80051ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80051f0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051f4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051f8:	edd3 7a00 	vldr	s15, [r3]
 80051fc:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8005200:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005204:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005208:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800520c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005210:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005214:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521c:	4b61      	ldr	r3, [pc, #388]	@ (80053a4 <ETS+0x1330>)
 800521e:	443b      	add	r3, r7
 8005220:	edc3 7a00 	vstr	s15, [r3]

    sx = -X4_2*X[4] * sqrtf(psi8 * (-X3_2 + 4*X[4])) / (divs);
 8005224:	4b60      	ldr	r3, [pc, #384]	@ (80053a8 <ETS+0x1334>)
 8005226:	443b      	add	r3, r7
 8005228:	edd3 7a00 	vldr	s15, [r3]
 800522c:	eeb1 7a67 	vneg.f32	s14, s15
 8005230:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005234:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005238:	edd3 7a04 	vldr	s15, [r3, #16]
 800523c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005240:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005244:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005248:	edd3 7a04 	vldr	s15, [r3, #16]
 800524c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005250:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005254:	4b4c      	ldr	r3, [pc, #304]	@ (8005388 <ETS+0x1314>)
 8005256:	443b      	add	r3, r7
 8005258:	edd3 7a00 	vldr	s15, [r3]
 800525c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005260:	4b4d      	ldr	r3, [pc, #308]	@ (8005398 <ETS+0x1324>)
 8005262:	443b      	add	r3, r7
 8005264:	edd3 7a00 	vldr	s15, [r3]
 8005268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526c:	eeb0 0a67 	vmov.f32	s0, s15
 8005270:	f004 f934 	bl	80094dc <sqrtf>
 8005274:	eef0 7a40 	vmov.f32	s15, s0
 8005278:	ee68 6a27 	vmul.f32	s13, s16, s15
 800527c:	4b49      	ldr	r3, [pc, #292]	@ (80053a4 <ETS+0x1330>)
 800527e:	443b      	add	r3, r7
 8005280:	ed93 7a00 	vldr	s14, [r3]
 8005284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005288:	4b48      	ldr	r3, [pc, #288]	@ (80053ac <ETS+0x1338>)
 800528a:	443b      	add	r3, r7
 800528c:	edc3 7a00 	vstr	s15, [r3]
    sy = -X4_2*X[4] * sqrtf(psi8 * (-X2_2 + 4*X[0]*X[4])) / (divs);
 8005290:	4b45      	ldr	r3, [pc, #276]	@ (80053a8 <ETS+0x1334>)
 8005292:	443b      	add	r3, r7
 8005294:	edd3 7a00 	vldr	s15, [r3]
 8005298:	eeb1 7a67 	vneg.f32	s14, s15
 800529c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052a0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80052a8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80052ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052b0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052b4:	edd3 7a00 	vldr	s15, [r3]
 80052b8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80052bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80052cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052d0:	4b33      	ldr	r3, [pc, #204]	@ (80053a0 <ETS+0x132c>)
 80052d2:	443b      	add	r3, r7
 80052d4:	edd3 7a00 	vldr	s15, [r3]
 80052d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005398 <ETS+0x1324>)
 80052de:	443b      	add	r3, r7
 80052e0:	edd3 7a00 	vldr	s15, [r3]
 80052e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e8:	eeb0 0a67 	vmov.f32	s0, s15
 80052ec:	f004 f8f6 	bl	80094dc <sqrtf>
 80052f0:	eef0 7a40 	vmov.f32	s15, s0
 80052f4:	ee68 6a27 	vmul.f32	s13, s16, s15
 80052f8:	4b2a      	ldr	r3, [pc, #168]	@ (80053a4 <ETS+0x1330>)
 80052fa:	443b      	add	r3, r7
 80052fc:	ed93 7a00 	vldr	s14, [r3]
 8005300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005304:	4b2a      	ldr	r3, [pc, #168]	@ (80053b0 <ETS+0x133c>)
 8005306:	443b      	add	r3, r7
 8005308:	edc3 7a00 	vstr	s15, [r3]
    sz = -X4_2*X[4] * sqrtf(psi8 * (-X1_2 + 4*X[0])) / (divs);
 800530c:	4b26      	ldr	r3, [pc, #152]	@ (80053a8 <ETS+0x1334>)
 800530e:	443b      	add	r3, r7
 8005310:	edd3 7a00 	vldr	s15, [r3]
 8005314:	eeb1 7a67 	vneg.f32	s14, s15
 8005318:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800531c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005320:	edd3 7a04 	vldr	s15, [r3, #16]
 8005324:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005328:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800532c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005330:	edd3 7a00 	vldr	s15, [r3]
 8005334:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005338:	ee27 7a87 	vmul.f32	s14, s15, s14
 800533c:	4b17      	ldr	r3, [pc, #92]	@ (800539c <ETS+0x1328>)
 800533e:	443b      	add	r3, r7
 8005340:	edd3 7a00 	vldr	s15, [r3]
 8005344:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005348:	4b13      	ldr	r3, [pc, #76]	@ (8005398 <ETS+0x1324>)
 800534a:	443b      	add	r3, r7
 800534c:	edd3 7a00 	vldr	s15, [r3]
 8005350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005354:	eeb0 0a67 	vmov.f32	s0, s15
 8005358:	f004 f8c0 	bl	80094dc <sqrtf>
 800535c:	eef0 7a40 	vmov.f32	s15, s0
 8005360:	ee68 6a27 	vmul.f32	s13, s16, s15
 8005364:	4b0f      	ldr	r3, [pc, #60]	@ (80053a4 <ETS+0x1330>)
 8005366:	443b      	add	r3, r7
 8005368:	ed93 7a00 	vldr	s14, [r3]
 800536c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005370:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <ETS+0x1340>)
 8005372:	443b      	add	r3, r7
 8005374:	edc3 7a00 	vstr	s15, [r3]

    rho = (2 * X[1]*X[4] - X[2]*X[3]) / (2*X4_2 * sqrtf(-(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]) / (X4_2*X[4])));
 8005378:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800537c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005380:	edd3 7a01 	vldr	s15, [r3, #4]
 8005384:	e018      	b.n	80053b8 <ETS+0x1344>
 8005386:	bf00      	nop
 8005388:	00014ca8 	.word	0x00014ca8
 800538c:	00014ca0 	.word	0x00014ca0
 8005390:	00014c9c 	.word	0x00014c9c
 8005394:	00014c98 	.word	0x00014c98
 8005398:	00014cf4 	.word	0x00014cf4
 800539c:	00014cb0 	.word	0x00014cb0
 80053a0:	00014cac 	.word	0x00014cac
 80053a4:	00014cf0 	.word	0x00014cf0
 80053a8:	00014ca4 	.word	0x00014ca4
 80053ac:	00014cc8 	.word	0x00014cc8
 80053b0:	00014cc4 	.word	0x00014cc4
 80053b4:	00014cc0 	.word	0x00014cc0
 80053b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80053bc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053c0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80053c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053cc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053d0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80053d8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053dc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80053e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053e8:	ee37 8a67 	vsub.f32	s16, s14, s15
 80053ec:	4be2      	ldr	r3, [pc, #904]	@ (8005778 <ETS+0x1704>)
 80053ee:	443b      	add	r3, r7
 80053f0:	edd3 7a00 	vldr	s15, [r3]
 80053f4:	ee77 8aa7 	vadd.f32	s17, s15, s15
 80053f8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053fc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005400:	ed93 7a04 	vldr	s14, [r3, #16]
 8005404:	4bdd      	ldr	r3, [pc, #884]	@ (800577c <ETS+0x1708>)
 8005406:	443b      	add	r3, r7
 8005408:	edd3 7a00 	vldr	s15, [r3]
 800540c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005410:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005414:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005418:	edd3 6a01 	vldr	s13, [r3, #4]
 800541c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005420:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005424:	edd3 7a02 	vldr	s15, [r3, #8]
 8005428:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800542c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005430:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005434:	edd3 7a03 	vldr	s15, [r3, #12]
 8005438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800543c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005440:	4bcf      	ldr	r3, [pc, #828]	@ (8005780 <ETS+0x170c>)
 8005442:	443b      	add	r3, r7
 8005444:	edd3 7a00 	vldr	s15, [r3]
 8005448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800544c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005450:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005454:	edd3 6a00 	vldr	s13, [r3]
 8005458:	4bca      	ldr	r3, [pc, #808]	@ (8005784 <ETS+0x1710>)
 800545a:	443b      	add	r3, r7
 800545c:	edd3 7a00 	vldr	s15, [r3]
 8005460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005468:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800546c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005470:	edd3 7a00 	vldr	s15, [r3]
 8005474:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005478:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800547c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005480:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005484:	edd3 7a04 	vldr	s15, [r3, #16]
 8005488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800548c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005490:	eeb1 7a67 	vneg.f32	s14, s15
 8005494:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005498:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800549c:	edd3 6a04 	vldr	s13, [r3, #16]
 80054a0:	4bb5      	ldr	r3, [pc, #724]	@ (8005778 <ETS+0x1704>)
 80054a2:	443b      	add	r3, r7
 80054a4:	edd3 7a00 	vldr	s15, [r3]
 80054a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80054b0:	eeb0 0a66 	vmov.f32	s0, s13
 80054b4:	f004 f812 	bl	80094dc <sqrtf>
 80054b8:	eef0 7a40 	vmov.f32	s15, s0
 80054bc:	ee28 7aa7 	vmul.f32	s14, s17, s15
 80054c0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80054c4:	4bb0      	ldr	r3, [pc, #704]	@ (8005788 <ETS+0x1714>)
 80054c6:	443b      	add	r3, r7
 80054c8:	edc3 7a00 	vstr	s15, [r3]
    rho = -atanf(rho);
 80054cc:	4bae      	ldr	r3, [pc, #696]	@ (8005788 <ETS+0x1714>)
 80054ce:	443b      	add	r3, r7
 80054d0:	ed93 0a00 	vldr	s0, [r3]
 80054d4:	f004 f820 	bl	8009518 <atanf>
 80054d8:	eef0 7a40 	vmov.f32	s15, s0
 80054dc:	eef1 7a67 	vneg.f32	s15, s15
 80054e0:	4ba9      	ldr	r3, [pc, #676]	@ (8005788 <ETS+0x1714>)
 80054e2:	443b      	add	r3, r7
 80054e4:	edc3 7a00 	vstr	s15, [r3]
    lambida = -atanf((X[3] / X[4]) * sqrtf(-(X4_2 * (X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 - 4*X[0]*X[4]) / (2*X1_2*X3_2*X[4] - 4* X1_2 * X4_2 - 4*X1_2 * X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2 * X3_2 + X[0]* X3_2*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2))));
 80054e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054ec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80054f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8005500:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8005504:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005508:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800550c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005510:	4b9a      	ldr	r3, [pc, #616]	@ (800577c <ETS+0x1708>)
 8005512:	443b      	add	r3, r7
 8005514:	edd3 7a00 	vldr	s15, [r3]
 8005518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800551c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005520:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005524:	edd3 6a01 	vldr	s13, [r3, #4]
 8005528:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800552c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005530:	edd3 7a02 	vldr	s15, [r3, #8]
 8005534:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005538:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800553c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005540:	edd3 7a03 	vldr	s15, [r3, #12]
 8005544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800554c:	4b8c      	ldr	r3, [pc, #560]	@ (8005780 <ETS+0x170c>)
 800554e:	443b      	add	r3, r7
 8005550:	edd3 7a00 	vldr	s15, [r3]
 8005554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005558:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800555c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005560:	edd3 7a00 	vldr	s15, [r3]
 8005564:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005568:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800556c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005570:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005574:	edd3 7a04 	vldr	s15, [r3, #16]
 8005578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800557c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005580:	4b7d      	ldr	r3, [pc, #500]	@ (8005778 <ETS+0x1704>)
 8005582:	443b      	add	r3, r7
 8005584:	edd3 7a00 	vldr	s15, [r3]
 8005588:	ee67 6a27 	vmul.f32	s13, s14, s15
 800558c:	4b7b      	ldr	r3, [pc, #492]	@ (800577c <ETS+0x1708>)
 800558e:	443b      	add	r3, r7
 8005590:	edd3 7a00 	vldr	s15, [r3]
 8005594:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005598:	4b7a      	ldr	r3, [pc, #488]	@ (8005784 <ETS+0x1710>)
 800559a:	443b      	add	r3, r7
 800559c:	edd3 7a00 	vldr	s15, [r3]
 80055a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80055a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80055ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80055b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055b4:	4b71      	ldr	r3, [pc, #452]	@ (800577c <ETS+0x1708>)
 80055b6:	443b      	add	r3, r7
 80055b8:	edd3 7a00 	vldr	s15, [r3]
 80055bc:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80055c0:	ee27 6a86 	vmul.f32	s12, s15, s12
 80055c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005778 <ETS+0x1704>)
 80055c6:	443b      	add	r3, r7
 80055c8:	edd3 7a00 	vldr	s15, [r3]
 80055cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80055d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055d4:	4b69      	ldr	r3, [pc, #420]	@ (800577c <ETS+0x1708>)
 80055d6:	443b      	add	r3, r7
 80055d8:	edd3 7a00 	vldr	s15, [r3]
 80055dc:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80055e0:	ee27 6a86 	vmul.f32	s12, s15, s12
 80055e4:	4b64      	ldr	r3, [pc, #400]	@ (8005778 <ETS+0x1704>)
 80055e6:	443b      	add	r3, r7
 80055e8:	edd3 7a00 	vldr	s15, [r3]
 80055ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80055f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80055f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80055fc:	ed93 6a01 	vldr	s12, [r3, #4]
 8005600:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005604:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005608:	edd3 7a02 	vldr	s15, [r3, #8]
 800560c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005610:	4b5c      	ldr	r3, [pc, #368]	@ (8005784 <ETS+0x1710>)
 8005612:	443b      	add	r3, r7
 8005614:	edd3 7a00 	vldr	s15, [r3]
 8005618:	ee26 6a27 	vmul.f32	s12, s12, s15
 800561c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005620:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005624:	edd3 7a03 	vldr	s15, [r3, #12]
 8005628:	ee66 7a27 	vmul.f32	s15, s12, s15
 800562c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005630:	4b53      	ldr	r3, [pc, #332]	@ (8005780 <ETS+0x170c>)
 8005632:	443b      	add	r3, r7
 8005634:	ed93 6a00 	vldr	s12, [r3]
 8005638:	4b52      	ldr	r3, [pc, #328]	@ (8005784 <ETS+0x1710>)
 800563a:	443b      	add	r3, r7
 800563c:	edd3 7a00 	vldr	s15, [r3]
 8005640:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005648:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800564c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005650:	ed93 6a00 	vldr	s12, [r3]
 8005654:	4b4b      	ldr	r3, [pc, #300]	@ (8005784 <ETS+0x1710>)
 8005656:	443b      	add	r3, r7
 8005658:	edd3 7a00 	vldr	s15, [r3]
 800565c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005660:	4b48      	ldr	r3, [pc, #288]	@ (8005784 <ETS+0x1710>)
 8005662:	443b      	add	r3, r7
 8005664:	edd3 7a00 	vldr	s15, [r3]
 8005668:	ee66 7a27 	vmul.f32	s15, s12, s15
 800566c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005670:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005674:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005678:	edd3 7a00 	vldr	s15, [r3]
 800567c:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8005680:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005684:	4b3f      	ldr	r3, [pc, #252]	@ (8005784 <ETS+0x1710>)
 8005686:	443b      	add	r3, r7
 8005688:	edd3 7a00 	vldr	s15, [r3]
 800568c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005690:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005694:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005698:	edd3 7a04 	vldr	s15, [r3, #16]
 800569c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80056a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80056a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80056ac:	edd3 7a00 	vldr	s15, [r3]
 80056b0:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 80056b4:	ee27 6a86 	vmul.f32	s12, s15, s12
 80056b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005778 <ETS+0x1704>)
 80056ba:	443b      	add	r3, r7
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80056c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056cc:	eef1 7a67 	vneg.f32	s15, s15
 80056d0:	eeb0 0a67 	vmov.f32	s0, s15
 80056d4:	f003 ff02 	bl	80094dc <sqrtf>
 80056d8:	eef0 7a40 	vmov.f32	s15, s0
 80056dc:	ee68 7a27 	vmul.f32	s15, s16, s15
 80056e0:	eeb0 0a67 	vmov.f32	s0, s15
 80056e4:	f003 ff18 	bl	8009518 <atanf>
 80056e8:	eef0 7a40 	vmov.f32	s15, s0
 80056ec:	eef1 7a67 	vneg.f32	s15, s15
 80056f0:	4b26      	ldr	r3, [pc, #152]	@ (800578c <ETS+0x1718>)
 80056f2:	443b      	add	r3, r7
 80056f4:	edc3 7a00 	vstr	s15, [r3]

    n1 = -X1_2*X7_2 + 4*X1_2*X[4]*X[8] - 4*X[1]*X[2]*X[3]*X[8] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[1]*X[4]*X[5]*X[6] - X2_2*X6_2 + 2*X[2]*X[3]*X[5]*X[6] + 4*X2_2*X[8] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[1]*X3_2*X[8] - 4*X[0]*X[3]*X[6]*X[7] + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8];
 80056f8:	4b20      	ldr	r3, [pc, #128]	@ (800577c <ETS+0x1708>)
 80056fa:	443b      	add	r3, r7
 80056fc:	edd3 7a00 	vldr	s15, [r3]
 8005700:	eeb1 7a67 	vneg.f32	s14, s15
 8005704:	4b22      	ldr	r3, [pc, #136]	@ (8005790 <ETS+0x171c>)
 8005706:	443b      	add	r3, r7
 8005708:	edd3 7a00 	vldr	s15, [r3]
 800570c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005710:	4b1a      	ldr	r3, [pc, #104]	@ (800577c <ETS+0x1708>)
 8005712:	443b      	add	r3, r7
 8005714:	edd3 7a00 	vldr	s15, [r3]
 8005718:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800571c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005720:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005724:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005728:	edd3 7a04 	vldr	s15, [r3, #16]
 800572c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005730:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005734:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005738:	edd3 7a08 	vldr	s15, [r3, #32]
 800573c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005744:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005748:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800574c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005750:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005754:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005758:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800575c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005760:	edd3 7a02 	vldr	s15, [r3, #8]
 8005764:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005768:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800576c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005770:	edd3 7a03 	vldr	s15, [r3, #12]
 8005774:	e00e      	b.n	8005794 <ETS+0x1720>
 8005776:	bf00      	nop
 8005778:	00014ca4 	.word	0x00014ca4
 800577c:	00014cb0 	.word	0x00014cb0
 8005780:	00014cac 	.word	0x00014cac
 8005784:	00014ca8 	.word	0x00014ca8
 8005788:	00014cbc 	.word	0x00014cbc
 800578c:	00014cb4 	.word	0x00014cb4
 8005790:	00014c98 	.word	0x00014c98
 8005794:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005798:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800579c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80057a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057b0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80057b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057bc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057c0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80057c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057cc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057d0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80057d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057dc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057e0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80057e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057f0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057f4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80057fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005800:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005804:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005808:	edd3 7a03 	vldr	s15, [r3, #12]
 800580c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005810:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005814:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005818:	edd3 7a05 	vldr	s15, [r3, #20]
 800581c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005820:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005824:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005828:	edd3 7a07 	vldr	s15, [r3, #28]
 800582c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005834:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005838:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800583c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005840:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005844:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005848:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800584c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005850:	edd3 7a04 	vldr	s15, [r3, #16]
 8005854:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005858:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800585c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005860:	edd3 7a05 	vldr	s15, [r3, #20]
 8005864:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005868:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800586c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005870:	edd3 7a06 	vldr	s15, [r3, #24]
 8005874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005878:	ee37 7a67 	vsub.f32	s14, s14, s15
 800587c:	4be7      	ldr	r3, [pc, #924]	@ (8005c1c <ETS+0x1ba8>)
 800587e:	443b      	add	r3, r7
 8005880:	edd3 6a00 	vldr	s13, [r3]
 8005884:	4be6      	ldr	r3, [pc, #920]	@ (8005c20 <ETS+0x1bac>)
 8005886:	443b      	add	r3, r7
 8005888:	edd3 7a00 	vldr	s15, [r3]
 800588c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005894:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005898:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800589c:	edd3 7a02 	vldr	s15, [r3, #8]
 80058a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80058a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80058b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058b4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058b8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80058c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058c4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058c8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80058d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058d8:	4bd0      	ldr	r3, [pc, #832]	@ (8005c1c <ETS+0x1ba8>)
 80058da:	443b      	add	r3, r7
 80058dc:	edd3 7a00 	vldr	s15, [r3]
 80058e0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80058e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80058e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058ec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80058f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058fc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005900:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005904:	edd3 7a02 	vldr	s15, [r3, #8]
 8005908:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800590c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005910:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005914:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005918:	edd3 7a05 	vldr	s15, [r3, #20]
 800591c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005920:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005924:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005928:	edd3 7a07 	vldr	s15, [r3, #28]
 800592c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005934:	4bbb      	ldr	r3, [pc, #748]	@ (8005c24 <ETS+0x1bb0>)
 8005936:	443b      	add	r3, r7
 8005938:	edd3 6a00 	vldr	s13, [r3]
 800593c:	4bba      	ldr	r3, [pc, #744]	@ (8005c28 <ETS+0x1bb4>)
 800593e:	443b      	add	r3, r7
 8005940:	edd3 7a00 	vldr	s15, [r3]
 8005944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800594c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005950:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005954:	edd3 7a01 	vldr	s15, [r3, #4]
 8005958:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800595c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005960:	4bb0      	ldr	r3, [pc, #704]	@ (8005c24 <ETS+0x1bb0>)
 8005962:	443b      	add	r3, r7
 8005964:	edd3 7a00 	vldr	s15, [r3]
 8005968:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800596c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005970:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005974:	edd3 7a08 	vldr	s15, [r3, #32]
 8005978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800597c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005980:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005984:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005988:	edd3 7a00 	vldr	s15, [r3]
 800598c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005990:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005994:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005998:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800599c:	edd3 7a03 	vldr	s15, [r3, #12]
 80059a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80059a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80059ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80059b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059b4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80059b8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80059bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80059c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80059cc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80059d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80059d4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80059d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80059dc:	4b92      	ldr	r3, [pc, #584]	@ (8005c28 <ETS+0x1bb4>)
 80059de:	443b      	add	r3, r7
 80059e0:	edd3 7a00 	vldr	s15, [r3]
 80059e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059ec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80059f0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80059f4:	edd3 7a00 	vldr	s15, [r3]
 80059f8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80059fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005a00:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a04:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a08:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a10:	4b83      	ldr	r3, [pc, #524]	@ (8005c20 <ETS+0x1bac>)
 8005a12:	443b      	add	r3, r7
 8005a14:	edd3 7a00 	vldr	s15, [r3]
 8005a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a20:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a24:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a28:	edd3 7a00 	vldr	s15, [r3]
 8005a2c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005a30:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005a34:	4b7d      	ldr	r3, [pc, #500]	@ (8005c2c <ETS+0x1bb8>)
 8005a36:	443b      	add	r3, r7
 8005a38:	edd3 7a00 	vldr	s15, [r3]
 8005a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a44:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a48:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a4c:	edd3 7a00 	vldr	s15, [r3]
 8005a50:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005a54:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005a58:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a5c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a60:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a68:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a6c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a70:	edd3 7a08 	vldr	s15, [r3, #32]
 8005a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8005c30 <ETS+0x1bbc>)
 8005a7e:	443b      	add	r3, r7
 8005a80:	edc3 7a00 	vstr	s15, [r3]
    n2 = X1_2*X[4] - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4];
 8005a84:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a88:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a8c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a90:	4b68      	ldr	r3, [pc, #416]	@ (8005c34 <ETS+0x1bc0>)
 8005a92:	443b      	add	r3, r7
 8005a94:	edd3 7a00 	vldr	s15, [r3]
 8005a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a9c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005aa0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005aa4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005aa8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005aac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ab0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ab4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ab8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005abc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ac0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005acc:	4b53      	ldr	r3, [pc, #332]	@ (8005c1c <ETS+0x1ba8>)
 8005ace:	443b      	add	r3, r7
 8005ad0:	edd3 7a00 	vldr	s15, [r3]
 8005ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ad8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005adc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ae0:	edd3 6a00 	vldr	s13, [r3]
 8005ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8005c24 <ETS+0x1bb0>)
 8005ae6:	443b      	add	r3, r7
 8005ae8:	edd3 7a00 	vldr	s15, [r3]
 8005aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005af4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005af8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005afc:	edd3 7a00 	vldr	s15, [r3]
 8005b00:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005b04:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005b08:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b0c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b10:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b1c:	4b46      	ldr	r3, [pc, #280]	@ (8005c38 <ETS+0x1bc4>)
 8005b1e:	443b      	add	r3, r7
 8005b20:	edc3 7a00 	vstr	s15, [r3]
    n3 = 2*X1_2*X3_2*X[4] - 4*X1_2*X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2*X3_2 + X[0]*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2;
 8005b24:	4b43      	ldr	r3, [pc, #268]	@ (8005c34 <ETS+0x1bc0>)
 8005b26:	443b      	add	r3, r7
 8005b28:	edd3 7a00 	vldr	s15, [r3]
 8005b2c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005b30:	4b3c      	ldr	r3, [pc, #240]	@ (8005c24 <ETS+0x1bb0>)
 8005b32:	443b      	add	r3, r7
 8005b34:	edd3 7a00 	vldr	s15, [r3]
 8005b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b3c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b40:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b44:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b4c:	4b39      	ldr	r3, [pc, #228]	@ (8005c34 <ETS+0x1bc0>)
 8005b4e:	443b      	add	r3, r7
 8005b50:	edd3 7a00 	vldr	s15, [r3]
 8005b54:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005b58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005b5c:	4b37      	ldr	r3, [pc, #220]	@ (8005c3c <ETS+0x1bc8>)
 8005b5e:	443b      	add	r3, r7
 8005b60:	edd3 7a00 	vldr	s15, [r3]
 8005b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b6c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b70:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b74:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b78:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b7c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b80:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b88:	4b26      	ldr	r3, [pc, #152]	@ (8005c24 <ETS+0x1bb0>)
 8005b8a:	443b      	add	r3, r7
 8005b8c:	edd3 7a00 	vldr	s15, [r3]
 8005b90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b94:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b98:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c1c <ETS+0x1ba8>)
 8005baa:	443b      	add	r3, r7
 8005bac:	edd3 6a00 	vldr	s13, [r3]
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8005c24 <ETS+0x1bb0>)
 8005bb2:	443b      	add	r3, r7
 8005bb4:	edd3 7a00 	vldr	s15, [r3]
 8005bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bc0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005bc4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005bc8:	edd3 6a00 	vldr	s13, [r3]
 8005bcc:	4b15      	ldr	r3, [pc, #84]	@ (8005c24 <ETS+0x1bb0>)
 8005bce:	443b      	add	r3, r7
 8005bd0:	edd3 7a00 	vldr	s15, [r3]
 8005bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bdc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005be0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005be4:	edd3 7a00 	vldr	s15, [r3]
 8005be8:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8005bec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c24 <ETS+0x1bb0>)
 8005bf2:	443b      	add	r3, r7
 8005bf4:	edd3 7a00 	vldr	s15, [r3]
 8005bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005bfc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c00:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c10:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c14:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c18:	e012      	b.n	8005c40 <ETS+0x1bcc>
 8005c1a:	bf00      	nop
 8005c1c:	00014cac 	.word	0x00014cac
 8005c20:	00014c9c 	.word	0x00014c9c
 8005c24:	00014ca8 	.word	0x00014ca8
 8005c28:	00014ca0 	.word	0x00014ca0
 8005c2c:	00014c98 	.word	0x00014c98
 8005c30:	00014cec 	.word	0x00014cec
 8005c34:	00014cb0 	.word	0x00014cb0
 8005c38:	00014ce8 	.word	0x00014ce8
 8005c3c:	00014ca4 	.word	0x00014ca4
 8005c40:	edd3 7a00 	vldr	s15, [r3]
 8005c44:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005c48:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005c4c:	4bbd      	ldr	r3, [pc, #756]	@ (8005f44 <ETS+0x1ed0>)
 8005c4e:	443b      	add	r3, r7
 8005c50:	edd3 7a00 	vldr	s15, [r3]
 8005c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c5c:	4bba      	ldr	r3, [pc, #744]	@ (8005f48 <ETS+0x1ed4>)
 8005c5e:	443b      	add	r3, r7
 8005c60:	edc3 7a00 	vstr	s15, [r3]
    n4 = 4*X[4] - X3_2;
 8005c64:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c68:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c70:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c78:	4bb4      	ldr	r3, [pc, #720]	@ (8005f4c <ETS+0x1ed8>)
 8005c7a:	443b      	add	r3, r7
 8005c7c:	edd3 7a00 	vldr	s15, [r3]
 8005c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c84:	4bb2      	ldr	r3, [pc, #712]	@ (8005f50 <ETS+0x1edc>)
 8005c86:	443b      	add	r3, r7
 8005c88:	edc3 7a00 	vstr	s15, [r3]
    n5 = 4*X[0]*X[4] - X2_2;
 8005c8c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c90:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c94:	edd3 7a00 	vldr	s15, [r3]
 8005c98:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005c9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ca0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ca4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ca8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cb0:	4ba8      	ldr	r3, [pc, #672]	@ (8005f54 <ETS+0x1ee0>)
 8005cb2:	443b      	add	r3, r7
 8005cb4:	edd3 7a00 	vldr	s15, [r3]
 8005cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cbc:	4ba6      	ldr	r3, [pc, #664]	@ (8005f58 <ETS+0x1ee4>)
 8005cbe:	443b      	add	r3, r7
 8005cc0:	edc3 7a00 	vstr	s15, [r3]
    n6 = 4*X[0] - X1_2;
 8005cc4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005cc8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ccc:	edd3 7a00 	vldr	s15, [r3]
 8005cd0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005cd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005cd8:	4ba0      	ldr	r3, [pc, #640]	@ (8005f5c <ETS+0x1ee8>)
 8005cda:	443b      	add	r3, r7
 8005cdc:	edd3 7a00 	vldr	s15, [r3]
 8005ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce4:	4b9e      	ldr	r3, [pc, #632]	@ (8005f60 <ETS+0x1eec>)
 8005ce6:	443b      	add	r3, r7
 8005ce8:	edc3 7a00 	vstr	s15, [r3]

    phi = -atanf((fabsf(X[4])*sqrtf(n1*n5) * (2*X[2] - X[1]*X[3]) * sqrtf((X[4]*n4*n6) / n3)) / (X4_2 * sqrtf(-n2 / X[4]) * sqrtf(n1*n6) * sqrtf(-(n2 * n4) / n3) * sqrtf(-(n4*n5) / (X[4]*n2))));
 8005cec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005cf0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005cf4:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cf8:	eeb0 8ae7 	vabs.f32	s16, s15
 8005cfc:	4b99      	ldr	r3, [pc, #612]	@ (8005f64 <ETS+0x1ef0>)
 8005cfe:	443b      	add	r3, r7
 8005d00:	ed93 7a00 	vldr	s14, [r3]
 8005d04:	4b94      	ldr	r3, [pc, #592]	@ (8005f58 <ETS+0x1ee4>)
 8005d06:	443b      	add	r3, r7
 8005d08:	edd3 7a00 	vldr	s15, [r3]
 8005d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d10:	eeb0 0a67 	vmov.f32	s0, s15
 8005d14:	f003 fbe2 	bl	80094dc <sqrtf>
 8005d18:	eef0 7a40 	vmov.f32	s15, s0
 8005d1c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8005d20:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d24:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d28:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d2c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d30:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d34:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d38:	ed93 6a01 	vldr	s12, [r3, #4]
 8005d3c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d40:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d44:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d50:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005d54:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d58:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d5c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005d60:	4b7b      	ldr	r3, [pc, #492]	@ (8005f50 <ETS+0x1edc>)
 8005d62:	443b      	add	r3, r7
 8005d64:	edd3 7a00 	vldr	s15, [r3]
 8005d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d6c:	4b7c      	ldr	r3, [pc, #496]	@ (8005f60 <ETS+0x1eec>)
 8005d6e:	443b      	add	r3, r7
 8005d70:	edd3 7a00 	vldr	s15, [r3]
 8005d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d78:	4b73      	ldr	r3, [pc, #460]	@ (8005f48 <ETS+0x1ed4>)
 8005d7a:	443b      	add	r3, r7
 8005d7c:	edd3 7a00 	vldr	s15, [r3]
 8005d80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d84:	eeb0 0a66 	vmov.f32	s0, s13
 8005d88:	f003 fba8 	bl	80094dc <sqrtf>
 8005d8c:	eef0 7a40 	vmov.f32	s15, s0
 8005d90:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005d94:	4b74      	ldr	r3, [pc, #464]	@ (8005f68 <ETS+0x1ef4>)
 8005d96:	443b      	add	r3, r7
 8005d98:	edd3 7a00 	vldr	s15, [r3]
 8005d9c:	eeb1 7a67 	vneg.f32	s14, s15
 8005da0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005da4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005da8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005db0:	eeb0 0a66 	vmov.f32	s0, s13
 8005db4:	f003 fb92 	bl	80094dc <sqrtf>
 8005db8:	eeb0 7a40 	vmov.f32	s14, s0
 8005dbc:	4b61      	ldr	r3, [pc, #388]	@ (8005f44 <ETS+0x1ed0>)
 8005dbe:	443b      	add	r3, r7
 8005dc0:	edd3 7a00 	vldr	s15, [r3]
 8005dc4:	ee67 8a27 	vmul.f32	s17, s14, s15
 8005dc8:	4b66      	ldr	r3, [pc, #408]	@ (8005f64 <ETS+0x1ef0>)
 8005dca:	443b      	add	r3, r7
 8005dcc:	ed93 7a00 	vldr	s14, [r3]
 8005dd0:	4b63      	ldr	r3, [pc, #396]	@ (8005f60 <ETS+0x1eec>)
 8005dd2:	443b      	add	r3, r7
 8005dd4:	edd3 7a00 	vldr	s15, [r3]
 8005dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8005de0:	f003 fb7c 	bl	80094dc <sqrtf>
 8005de4:	eef0 7a40 	vmov.f32	s15, s0
 8005de8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8005dec:	4b5e      	ldr	r3, [pc, #376]	@ (8005f68 <ETS+0x1ef4>)
 8005dee:	443b      	add	r3, r7
 8005df0:	ed93 7a00 	vldr	s14, [r3]
 8005df4:	4b56      	ldr	r3, [pc, #344]	@ (8005f50 <ETS+0x1edc>)
 8005df6:	443b      	add	r3, r7
 8005df8:	edd3 7a00 	vldr	s15, [r3]
 8005dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e00:	eeb1 7a67 	vneg.f32	s14, s15
 8005e04:	4b50      	ldr	r3, [pc, #320]	@ (8005f48 <ETS+0x1ed4>)
 8005e06:	443b      	add	r3, r7
 8005e08:	edd3 7a00 	vldr	s15, [r3]
 8005e0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005e10:	eeb0 0a66 	vmov.f32	s0, s13
 8005e14:	f003 fb62 	bl	80094dc <sqrtf>
 8005e18:	eef0 7a40 	vmov.f32	s15, s0
 8005e1c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8005e20:	4b4b      	ldr	r3, [pc, #300]	@ (8005f50 <ETS+0x1edc>)
 8005e22:	443b      	add	r3, r7
 8005e24:	ed93 7a00 	vldr	s14, [r3]
 8005e28:	4b4b      	ldr	r3, [pc, #300]	@ (8005f58 <ETS+0x1ee4>)
 8005e2a:	443b      	add	r3, r7
 8005e2c:	edd3 7a00 	vldr	s15, [r3]
 8005e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e34:	eeb1 7a67 	vneg.f32	s14, s15
 8005e38:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e3c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e40:	edd3 6a04 	vldr	s13, [r3, #16]
 8005e44:	4b48      	ldr	r3, [pc, #288]	@ (8005f68 <ETS+0x1ef4>)
 8005e46:	443b      	add	r3, r7
 8005e48:	edd3 7a00 	vldr	s15, [r3]
 8005e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e50:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005e54:	eeb0 0a66 	vmov.f32	s0, s13
 8005e58:	f003 fb40 	bl	80094dc <sqrtf>
 8005e5c:	eef0 7a40 	vmov.f32	s15, s0
 8005e60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005e64:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005e68:	eeb0 0a47 	vmov.f32	s0, s14
 8005e6c:	f003 fb54 	bl	8009518 <atanf>
 8005e70:	eef0 7a40 	vmov.f32	s15, s0
 8005e74:	eef1 7a67 	vneg.f32	s15, s15
 8005e78:	4b3c      	ldr	r3, [pc, #240]	@ (8005f6c <ETS+0x1ef8>)
 8005e7a:	443b      	add	r3, r7
 8005e7c:	edc3 7a00 	vstr	s15, [r3]

    p[0] = sx;
 8005e80:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e84:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a39      	ldr	r2, [pc, #228]	@ (8005f70 <ETS+0x1efc>)
 8005e8c:	443a      	add	r2, r7
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8005e92:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e96:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4a35      	ldr	r2, [pc, #212]	@ (8005f74 <ETS+0x1f00>)
 8005ea0:	443a      	add	r2, r7
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8005ea6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005eaa:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	4a31      	ldr	r2, [pc, #196]	@ (8005f78 <ETS+0x1f04>)
 8005eb4:	443a      	add	r2, r7
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8005eba:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ebe:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8005f7c <ETS+0x1f08>)
 8005ec8:	443a      	add	r2, r7
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8005ece:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ed2:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3310      	adds	r3, #16
 8005eda:	4a29      	ldr	r2, [pc, #164]	@ (8005f80 <ETS+0x1f0c>)
 8005edc:	443a      	add	r2, r7
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8005ee2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ee6:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	4a25      	ldr	r2, [pc, #148]	@ (8005f84 <ETS+0x1f10>)
 8005ef0:	443a      	add	r2, r7
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8005ef6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005efa:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3318      	adds	r3, #24
 8005f02:	4a21      	ldr	r2, [pc, #132]	@ (8005f88 <ETS+0x1f14>)
 8005f04:	443a      	add	r2, r7
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8005f0a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f0e:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	331c      	adds	r3, #28
 8005f16:	4a15      	ldr	r2, [pc, #84]	@ (8005f6c <ETS+0x1ef8>)
 8005f18:	443a      	add	r2, r7
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 8005f1e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f22:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3320      	adds	r3, #32
 8005f2a:	4a18      	ldr	r2, [pc, #96]	@ (8005f8c <ETS+0x1f18>)
 8005f2c:	443a      	add	r2, r7
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	601a      	str	r2, [r3, #0]
}
 8005f32:	bf00      	nop
 8005f34:	f507 37a6 	add.w	r7, r7, #84992	@ 0x14c00
 8005f38:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	ecbd 8b02 	vpop	{d8}
 8005f42:	bd90      	pop	{r4, r7, pc}
 8005f44:	00014ca4 	.word	0x00014ca4
 8005f48:	00014ce4 	.word	0x00014ce4
 8005f4c:	00014ca8 	.word	0x00014ca8
 8005f50:	00014ce0 	.word	0x00014ce0
 8005f54:	00014cac 	.word	0x00014cac
 8005f58:	00014cdc 	.word	0x00014cdc
 8005f5c:	00014cb0 	.word	0x00014cb0
 8005f60:	00014cd8 	.word	0x00014cd8
 8005f64:	00014cec 	.word	0x00014cec
 8005f68:	00014ce8 	.word	0x00014ce8
 8005f6c:	00014cb8 	.word	0x00014cb8
 8005f70:	00014cc8 	.word	0x00014cc8
 8005f74:	00014cc4 	.word	0x00014cc4
 8005f78:	00014cc0 	.word	0x00014cc0
 8005f7c:	00014cd4 	.word	0x00014cd4
 8005f80:	00014cd0 	.word	0x00014cd0
 8005f84:	00014ccc 	.word	0x00014ccc
 8005f88:	00014cbc 	.word	0x00014cbc
 8005f8c:	00014cb4 	.word	0x00014cb4

08005f90 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08c      	sub	sp, #48	@ 0x30
 8005f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f96:	f107 031c 	add.w	r3, r7, #28
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	605a      	str	r2, [r3, #4]
 8005fa0:	609a      	str	r2, [r3, #8]
 8005fa2:	60da      	str	r2, [r3, #12]
 8005fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fa6:	4b75      	ldr	r3, [pc, #468]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005faa:	4a74      	ldr	r2, [pc, #464]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005fac:	f043 0304 	orr.w	r3, r3, #4
 8005fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fb2:	4b72      	ldr	r3, [pc, #456]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc2:	4a6e      	ldr	r2, [pc, #440]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fca:	4b6c      	ldr	r3, [pc, #432]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fd6:	4b69      	ldr	r3, [pc, #420]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fda:	4a68      	ldr	r2, [pc, #416]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fe2:	4b66      	ldr	r3, [pc, #408]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fee:	4b63      	ldr	r3, [pc, #396]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff2:	4a62      	ldr	r2, [pc, #392]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005ff4:	f043 0302 	orr.w	r3, r3, #2
 8005ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ffa:	4b60      	ldr	r3, [pc, #384]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006006:	4b5d      	ldr	r3, [pc, #372]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600a:	4a5c      	ldr	r2, [pc, #368]	@ (800617c <MX_GPIO_Init+0x1ec>)
 800600c:	f043 0308 	orr.w	r3, r3, #8
 8006010:	6313      	str	r3, [r2, #48]	@ 0x30
 8006012:	4b5a      	ldr	r3, [pc, #360]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8006014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800601e:	4b57      	ldr	r3, [pc, #348]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006022:	4a56      	ldr	r2, [pc, #344]	@ (800617c <MX_GPIO_Init+0x1ec>)
 8006024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006028:	6313      	str	r3, [r2, #48]	@ 0x30
 800602a:	4b54      	ldr	r3, [pc, #336]	@ (800617c <MX_GPIO_Init+0x1ec>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8006036:	2200      	movs	r2, #0
 8006038:	2140      	movs	r1, #64	@ 0x40
 800603a:	4851      	ldr	r0, [pc, #324]	@ (8006180 <MX_GPIO_Init+0x1f0>)
 800603c:	f000 feca 	bl	8006dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8006040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006046:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800604a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604c:	2300      	movs	r3, #0
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8006050:	f107 031c 	add.w	r3, r7, #28
 8006054:	4619      	mov	r1, r3
 8006056:	484b      	ldr	r0, [pc, #300]	@ (8006184 <MX_GPIO_Init+0x1f4>)
 8006058:	f000 fd10 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800605c:	2332      	movs	r3, #50	@ 0x32
 800605e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006060:	2302      	movs	r3, #2
 8006062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006064:	2300      	movs	r3, #0
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006068:	2303      	movs	r3, #3
 800606a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800606c:	230b      	movs	r3, #11
 800606e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006070:	f107 031c 	add.w	r3, r7, #28
 8006074:	4619      	mov	r1, r3
 8006076:	4843      	ldr	r0, [pc, #268]	@ (8006184 <MX_GPIO_Init+0x1f4>)
 8006078:	f000 fd00 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800607c:	2386      	movs	r3, #134	@ 0x86
 800607e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006080:	2302      	movs	r3, #2
 8006082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006084:	2300      	movs	r3, #0
 8006086:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006088:	2303      	movs	r3, #3
 800608a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800608c:	230b      	movs	r3, #11
 800608e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006090:	f107 031c 	add.w	r3, r7, #28
 8006094:	4619      	mov	r1, r3
 8006096:	483c      	ldr	r0, [pc, #240]	@ (8006188 <MX_GPIO_Init+0x1f8>)
 8006098:	f000 fcf0 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800609c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a2:	2302      	movs	r3, #2
 80060a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060aa:	2303      	movs	r3, #3
 80060ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060ae:	230b      	movs	r3, #11
 80060b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80060b2:	f107 031c 	add.w	r3, r7, #28
 80060b6:	4619      	mov	r1, r3
 80060b8:	4834      	ldr	r0, [pc, #208]	@ (800618c <MX_GPIO_Init+0x1fc>)
 80060ba:	f000 fcdf 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80060be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80060c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c4:	2302      	movs	r3, #2
 80060c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060cc:	2303      	movs	r3, #3
 80060ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80060d0:	2307      	movs	r3, #7
 80060d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060d4:	f107 031c 	add.w	r3, r7, #28
 80060d8:	4619      	mov	r1, r3
 80060da:	482d      	ldr	r0, [pc, #180]	@ (8006190 <MX_GPIO_Init+0x200>)
 80060dc:	f000 fcce 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80060e0:	2340      	movs	r3, #64	@ 0x40
 80060e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060e4:	2301      	movs	r3, #1
 80060e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80060f0:	f107 031c 	add.w	r3, r7, #28
 80060f4:	4619      	mov	r1, r3
 80060f6:	4822      	ldr	r0, [pc, #136]	@ (8006180 <MX_GPIO_Init+0x1f0>)
 80060f8:	f000 fcc0 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80060fc:	2380      	movs	r3, #128	@ 0x80
 80060fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006100:	2300      	movs	r3, #0
 8006102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006104:	2300      	movs	r3, #0
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006108:	f107 031c 	add.w	r3, r7, #28
 800610c:	4619      	mov	r1, r3
 800610e:	481c      	ldr	r0, [pc, #112]	@ (8006180 <MX_GPIO_Init+0x1f0>)
 8006110:	f000 fcb4 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006114:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8006118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611a:	2302      	movs	r3, #2
 800611c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611e:	2300      	movs	r3, #0
 8006120:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006122:	2303      	movs	r3, #3
 8006124:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006126:	230a      	movs	r3, #10
 8006128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800612a:	f107 031c 	add.w	r3, r7, #28
 800612e:	4619      	mov	r1, r3
 8006130:	4815      	ldr	r0, [pc, #84]	@ (8006188 <MX_GPIO_Init+0x1f8>)
 8006132:	f000 fca3 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800613a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800613c:	2300      	movs	r3, #0
 800613e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006140:	2300      	movs	r3, #0
 8006142:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006144:	f107 031c 	add.w	r3, r7, #28
 8006148:	4619      	mov	r1, r3
 800614a:	480f      	ldr	r0, [pc, #60]	@ (8006188 <MX_GPIO_Init+0x1f8>)
 800614c:	f000 fc96 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006150:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006156:	2302      	movs	r3, #2
 8006158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800615e:	2303      	movs	r3, #3
 8006160:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006162:	230b      	movs	r3, #11
 8006164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006166:	f107 031c 	add.w	r3, r7, #28
 800616a:	4619      	mov	r1, r3
 800616c:	4804      	ldr	r0, [pc, #16]	@ (8006180 <MX_GPIO_Init+0x1f0>)
 800616e:	f000 fc85 	bl	8006a7c <HAL_GPIO_Init>

}
 8006172:	bf00      	nop
 8006174:	3730      	adds	r7, #48	@ 0x30
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800
 8006180:	40021800 	.word	0x40021800
 8006184:	40020800 	.word	0x40020800
 8006188:	40020000 	.word	0x40020000
 800618c:	40020400 	.word	0x40020400
 8006190:	40020c00 	.word	0x40020c00

08006194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	f5ad 5d51 	sub.w	sp, sp, #13376	@ 0x3440
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800619e:	f000 fafe 	bl	800679e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061a2:	f000 f8bf 	bl	8006324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061a6:	f7ff fef3 	bl	8005f90 <MX_GPIO_Init>
  MX_TIM2_Init();
 80061aa:	f000 f9af 	bl	800650c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80061ae:	f000 fa1d 	bl	80065ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t ETS_counter = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f243 4254 	movw	r2, #13396	@ 0x3454
 80061b8:	443a      	add	r2, r7
 80061ba:	6013      	str	r3, [r2, #0]
  uint32_t NLLS_counter = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	f243 4250 	movw	r2, #13392	@ 0x3450
 80061c2:	443a      	add	r2, r7
 80061c4:	6013      	str	r3, [r2, #0]
  union{
	  float dado;
	  uint8_t dado_cagado[4];
  } mz[1112];

  float p[9] = {0}, p0 = {0};
 80061c6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80061ca:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80061ce:	4618      	mov	r0, r3
 80061d0:	2324      	movs	r3, #36	@ 0x24
 80061d2:	461a      	mov	r2, r3
 80061d4:	2100      	movs	r1, #0
 80061d6:	f003 f94f 	bl	8009478 <memset>
 80061da:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80061de:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
  uint8_t passos_NLLS = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	f243 424f 	movw	r2, #13391	@ 0x344f
 80061ee:	443a      	add	r2, r7
 80061f0:	7013      	strb	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive(&huart2, mx, 1112*4, 5000);
 80061f2:	4944      	ldr	r1, [pc, #272]	@ (8006304 <main+0x170>)
 80061f4:	f243 4358 	movw	r3, #13400	@ 0x3458
 80061f8:	440b      	add	r3, r1
 80061fa:	19d9      	adds	r1, r3, r7
 80061fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006200:	f44f 528b 	mov.w	r2, #4448	@ 0x1160
 8006204:	4840      	ldr	r0, [pc, #256]	@ (8006308 <main+0x174>)
 8006206:	f002 fc41 	bl	8008a8c <HAL_UART_Receive>
	HAL_UART_Receive(&huart2, my, 1112*4, 5000);
 800620a:	4940      	ldr	r1, [pc, #256]	@ (800630c <main+0x178>)
 800620c:	f243 4358 	movw	r3, #13400	@ 0x3458
 8006210:	440b      	add	r3, r1
 8006212:	19d9      	adds	r1, r3, r7
 8006214:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006218:	f44f 528b 	mov.w	r2, #4448	@ 0x1160
 800621c:	483a      	ldr	r0, [pc, #232]	@ (8006308 <main+0x174>)
 800621e:	f002 fc35 	bl	8008a8c <HAL_UART_Receive>
	HAL_UART_Receive(&huart2, mz, 1112*4, 5000);
 8006222:	493b      	ldr	r1, [pc, #236]	@ (8006310 <main+0x17c>)
 8006224:	f243 4358 	movw	r3, #13400	@ 0x3458
 8006228:	440b      	add	r3, r1
 800622a:	19d9      	adds	r1, r3, r7
 800622c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006230:	f44f 528b 	mov.w	r2, #4448	@ 0x1160
 8006234:	4834      	ldr	r0, [pc, #208]	@ (8006308 <main+0x174>)
 8006236:	f002 fc29 	bl	8008a8c <HAL_UART_Receive>

	global_counter = 0;
 800623a:	4b36      	ldr	r3, [pc, #216]	@ (8006314 <main+0x180>)
 800623c:	2200      	movs	r2, #0
 800623e:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8006240:	4835      	ldr	r0, [pc, #212]	@ (8006318 <main+0x184>)
 8006242:	f001 ff43 	bl	80080cc <HAL_TIM_Base_Start_IT>

	ETS(&mx, &my, &mz, &p);
 8006246:	4b35      	ldr	r3, [pc, #212]	@ (800631c <main+0x188>)
 8006248:	f503 5351 	add.w	r3, r3, #13376	@ 0x3440
 800624c:	f103 0318 	add.w	r3, r3, #24
 8006250:	443b      	add	r3, r7
 8006252:	4a2f      	ldr	r2, [pc, #188]	@ (8006310 <main+0x17c>)
 8006254:	f502 5251 	add.w	r2, r2, #13376	@ 0x3440
 8006258:	f102 0218 	add.w	r2, r2, #24
 800625c:	443a      	add	r2, r7
 800625e:	492b      	ldr	r1, [pc, #172]	@ (800630c <main+0x178>)
 8006260:	f501 5151 	add.w	r1, r1, #13376	@ 0x3440
 8006264:	f101 0118 	add.w	r1, r1, #24
 8006268:	4439      	add	r1, r7
 800626a:	4826      	ldr	r0, [pc, #152]	@ (8006304 <main+0x170>)
 800626c:	f500 5051 	add.w	r0, r0, #13376	@ 0x3440
 8006270:	f100 0018 	add.w	r0, r0, #24
 8006274:	4438      	add	r0, r7
 8006276:	f7fd fefd 	bl	8004074 <ETS>

	HAL_TIM_Base_Stop_IT(&htim2);
 800627a:	4827      	ldr	r0, [pc, #156]	@ (8006318 <main+0x184>)
 800627c:	f001 ff9e 	bl	80081bc <HAL_TIM_Base_Stop_IT>
	ETS_counter = global_counter + ETS_counter;
 8006280:	4b24      	ldr	r3, [pc, #144]	@ (8006314 <main+0x180>)
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	f243 4354 	movw	r3, #13396	@ 0x3454
 800628a:	443b      	add	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4413      	add	r3, r2
 8006290:	f243 4254 	movw	r2, #13396	@ 0x3454
 8006294:	443a      	add	r2, r7
 8006296:	6013      	str	r3, [r2, #0]

	global_counter = 0;
 8006298:	4b1e      	ldr	r3, [pc, #120]	@ (8006314 <main+0x180>)
 800629a:	2200      	movs	r2, #0
 800629c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 800629e:	481e      	ldr	r0, [pc, #120]	@ (8006318 <main+0x184>)
 80062a0:	f001 ff14 	bl	80080cc <HAL_TIM_Base_Start_IT>

	passos_NLLS = NLLS(&mx, &my, &mz, &p0);
 80062a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006320 <main+0x18c>)
 80062a6:	f503 5351 	add.w	r3, r3, #13376	@ 0x3440
 80062aa:	f103 0318 	add.w	r3, r3, #24
 80062ae:	443b      	add	r3, r7
 80062b0:	4a17      	ldr	r2, [pc, #92]	@ (8006310 <main+0x17c>)
 80062b2:	f502 5251 	add.w	r2, r2, #13376	@ 0x3440
 80062b6:	f102 0218 	add.w	r2, r2, #24
 80062ba:	443a      	add	r2, r7
 80062bc:	4913      	ldr	r1, [pc, #76]	@ (800630c <main+0x178>)
 80062be:	f501 5151 	add.w	r1, r1, #13376	@ 0x3440
 80062c2:	f101 0118 	add.w	r1, r1, #24
 80062c6:	4439      	add	r1, r7
 80062c8:	480e      	ldr	r0, [pc, #56]	@ (8006304 <main+0x170>)
 80062ca:	f500 5051 	add.w	r0, r0, #13376	@ 0x3440
 80062ce:	f100 0018 	add.w	r0, r0, #24
 80062d2:	4438      	add	r0, r7
 80062d4:	f7fa fc6c 	bl	8000bb0 <NLLS>
 80062d8:	4603      	mov	r3, r0
 80062da:	f243 424f 	movw	r2, #13391	@ 0x344f
 80062de:	443a      	add	r2, r7
 80062e0:	7013      	strb	r3, [r2, #0]

	HAL_TIM_Base_Stop_IT(&htim2);
 80062e2:	480d      	ldr	r0, [pc, #52]	@ (8006318 <main+0x184>)
 80062e4:	f001 ff6a 	bl	80081bc <HAL_TIM_Base_Stop_IT>
	NLLS_counter = global_counter + NLLS_counter;
 80062e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006314 <main+0x180>)
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	f243 4350 	movw	r3, #13392	@ 0x3450
 80062f2:	443b      	add	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4413      	add	r3, r2
 80062f8:	f243 4250 	movw	r2, #13392	@ 0x3450
 80062fc:	443a      	add	r2, r7
 80062fe:	6013      	str	r3, [r2, #0]
  {
 8006300:	bf00      	nop
 8006302:	e776      	b.n	80061f2 <main+0x5e>
 8006304:	ffffee94 	.word	0xffffee94
 8006308:	200000c8 	.word	0x200000c8
 800630c:	ffffdd34 	.word	0xffffdd34
 8006310:	ffffcbd4 	.word	0xffffcbd4
 8006314:	20000078 	.word	0x20000078
 8006318:	2000007c 	.word	0x2000007c
 800631c:	ffffcbb0 	.word	0xffffcbb0
 8006320:	ffffcbac 	.word	0xffffcbac

08006324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b094      	sub	sp, #80	@ 0x50
 8006328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800632a:	f107 0320 	add.w	r3, r7, #32
 800632e:	2230      	movs	r2, #48	@ 0x30
 8006330:	2100      	movs	r1, #0
 8006332:	4618      	mov	r0, r3
 8006334:	f003 f8a0 	bl	8009478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006338:	f107 030c 	add.w	r3, r7, #12
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	609a      	str	r2, [r3, #8]
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006348:	4b2a      	ldr	r3, [pc, #168]	@ (80063f4 <SystemClock_Config+0xd0>)
 800634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634c:	4a29      	ldr	r2, [pc, #164]	@ (80063f4 <SystemClock_Config+0xd0>)
 800634e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006352:	6413      	str	r3, [r2, #64]	@ 0x40
 8006354:	4b27      	ldr	r3, [pc, #156]	@ (80063f4 <SystemClock_Config+0xd0>)
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006360:	4b25      	ldr	r3, [pc, #148]	@ (80063f8 <SystemClock_Config+0xd4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a24      	ldr	r2, [pc, #144]	@ (80063f8 <SystemClock_Config+0xd4>)
 8006366:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	4b22      	ldr	r3, [pc, #136]	@ (80063f8 <SystemClock_Config+0xd4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006374:	607b      	str	r3, [r7, #4]
 8006376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006378:	2302      	movs	r3, #2
 800637a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800637c:	2301      	movs	r3, #1
 800637e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006380:	2310      	movs	r3, #16
 8006382:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006384:	2302      	movs	r3, #2
 8006386:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006388:	2300      	movs	r3, #0
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800638c:	2308      	movs	r3, #8
 800638e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006390:	23d8      	movs	r3, #216	@ 0xd8
 8006392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006394:	2302      	movs	r3, #2
 8006396:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006398:	2302      	movs	r3, #2
 800639a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800639c:	f107 0320 	add.w	r3, r7, #32
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fd81 	bl	8006ea8 <HAL_RCC_OscConfig>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80063ac:	f000 f838 	bl	8006420 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80063b0:	f000 fd2a 	bl	8006e08 <HAL_PWREx_EnableOverDrive>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80063ba:	f000 f831 	bl	8006420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063be:	230f      	movs	r3, #15
 80063c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063c2:	2302      	movs	r3, #2
 80063c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80063ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80063ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80063d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80063d6:	f107 030c 	add.w	r3, r7, #12
 80063da:	2107      	movs	r1, #7
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 f807 	bl	80073f0 <HAL_RCC_ClockConfig>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80063e8:	f000 f81a 	bl	8006420 <Error_Handler>
  }
}
 80063ec:	bf00      	nop
 80063ee:	3750      	adds	r7, #80	@ 0x50
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40023800 	.word	0x40023800
 80063f8:	40007000 	.word	0x40007000

080063fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	global_counter ++;
 8006404:	4b05      	ldr	r3, [pc, #20]	@ (800641c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	4b03      	ldr	r3, [pc, #12]	@ (800641c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800640e:	801a      	strh	r2, [r3, #0]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000078 	.word	0x20000078

08006420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006424:	b672      	cpsid	i
}
 8006426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <Error_Handler+0x8>

0800642c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <HAL_MspInit+0x44>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006436:	4a0e      	ldr	r2, [pc, #56]	@ (8006470 <HAL_MspInit+0x44>)
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800643c:	6413      	str	r3, [r2, #64]	@ 0x40
 800643e:	4b0c      	ldr	r3, [pc, #48]	@ (8006470 <HAL_MspInit+0x44>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006446:	607b      	str	r3, [r7, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800644a:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <HAL_MspInit+0x44>)
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	4a08      	ldr	r2, [pc, #32]	@ (8006470 <HAL_MspInit+0x44>)
 8006450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006454:	6453      	str	r3, [r2, #68]	@ 0x44
 8006456:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <HAL_MspInit+0x44>)
 8006458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40023800 	.word	0x40023800

08006474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006478:	bf00      	nop
 800647a:	e7fd      	b.n	8006478 <NMI_Handler+0x4>

0800647c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006480:	bf00      	nop
 8006482:	e7fd      	b.n	8006480 <HardFault_Handler+0x4>

08006484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006488:	bf00      	nop
 800648a:	e7fd      	b.n	8006488 <MemManage_Handler+0x4>

0800648c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <BusFault_Handler+0x4>

08006494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006498:	bf00      	nop
 800649a:	e7fd      	b.n	8006498 <UsageFault_Handler+0x4>

0800649c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064a0:	bf00      	nop
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064aa:	b480      	push	{r7}
 80064ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064ae:	bf00      	nop
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064ca:	f000 f9a5 	bl	8006818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064ce:	bf00      	nop
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80064d8:	4802      	ldr	r0, [pc, #8]	@ (80064e4 <TIM2_IRQHandler+0x10>)
 80064da:	f001 fe9e 	bl	800821a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80064de:	bf00      	nop
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	2000007c 	.word	0x2000007c

080064e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064ec:	4b06      	ldr	r3, [pc, #24]	@ (8006508 <SystemInit+0x20>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f2:	4a05      	ldr	r2, [pc, #20]	@ (8006508 <SystemInit+0x20>)
 80064f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80064f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80064fc:	bf00      	nop
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	e000ed00 	.word	0xe000ed00

0800650c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006512:	f107 0310 	add.w	r3, r7, #16
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	605a      	str	r2, [r3, #4]
 800651c:	609a      	str	r2, [r3, #8]
 800651e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800652a:	4b1d      	ldr	r3, [pc, #116]	@ (80065a0 <MX_TIM2_Init+0x94>)
 800652c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006530:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108 - 1;
 8006532:	4b1b      	ldr	r3, [pc, #108]	@ (80065a0 <MX_TIM2_Init+0x94>)
 8006534:	226b      	movs	r2, #107	@ 0x6b
 8006536:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006538:	4b19      	ldr	r3, [pc, #100]	@ (80065a0 <MX_TIM2_Init+0x94>)
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800653e:	4b18      	ldr	r3, [pc, #96]	@ (80065a0 <MX_TIM2_Init+0x94>)
 8006540:	2201      	movs	r2, #1
 8006542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006544:	4b16      	ldr	r3, [pc, #88]	@ (80065a0 <MX_TIM2_Init+0x94>)
 8006546:	2200      	movs	r2, #0
 8006548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800654a:	4b15      	ldr	r3, [pc, #84]	@ (80065a0 <MX_TIM2_Init+0x94>)
 800654c:	2200      	movs	r2, #0
 800654e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006550:	4813      	ldr	r0, [pc, #76]	@ (80065a0 <MX_TIM2_Init+0x94>)
 8006552:	f001 fd63 	bl	800801c <HAL_TIM_Base_Init>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800655c:	f7ff ff60 	bl	8006420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006566:	f107 0310 	add.w	r3, r7, #16
 800656a:	4619      	mov	r1, r3
 800656c:	480c      	ldr	r0, [pc, #48]	@ (80065a0 <MX_TIM2_Init+0x94>)
 800656e:	f001 ff5b 	bl	8008428 <HAL_TIM_ConfigClockSource>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006578:	f7ff ff52 	bl	8006420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800657c:	2320      	movs	r3, #32
 800657e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006584:	1d3b      	adds	r3, r7, #4
 8006586:	4619      	mov	r1, r3
 8006588:	4805      	ldr	r0, [pc, #20]	@ (80065a0 <MX_TIM2_Init+0x94>)
 800658a:	f002 f985 	bl	8008898 <HAL_TIMEx_MasterConfigSynchronization>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006594:	f7ff ff44 	bl	8006420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006598:	bf00      	nop
 800659a:	3720      	adds	r7, #32
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	2000007c 	.word	0x2000007c

080065a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b4:	d113      	bne.n	80065de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80065b6:	4b0c      	ldr	r3, [pc, #48]	@ (80065e8 <HAL_TIM_Base_MspInit+0x44>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	4a0b      	ldr	r2, [pc, #44]	@ (80065e8 <HAL_TIM_Base_MspInit+0x44>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065c2:	4b09      	ldr	r3, [pc, #36]	@ (80065e8 <HAL_TIM_Base_MspInit+0x44>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80065ce:	2200      	movs	r2, #0
 80065d0:	2100      	movs	r1, #0
 80065d2:	201c      	movs	r0, #28
 80065d4:	f000 fa1b 	bl	8006a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80065d8:	201c      	movs	r0, #28
 80065da:	f000 fa34 	bl	8006a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40023800 	.word	0x40023800

080065ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80065f0:	4b14      	ldr	r3, [pc, #80]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 80065f2:	4a15      	ldr	r2, [pc, #84]	@ (8006648 <MX_USART2_UART_Init+0x5c>)
 80065f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80065f6:	4b13      	ldr	r3, [pc, #76]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 80065f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80065fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80065fe:	4b11      	ldr	r3, [pc, #68]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 8006600:	2200      	movs	r2, #0
 8006602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006604:	4b0f      	ldr	r3, [pc, #60]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 8006606:	2200      	movs	r2, #0
 8006608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800660a:	4b0e      	ldr	r3, [pc, #56]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 800660c:	2200      	movs	r2, #0
 800660e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006610:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 8006612:	220c      	movs	r2, #12
 8006614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006616:	4b0b      	ldr	r3, [pc, #44]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 8006618:	2200      	movs	r2, #0
 800661a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800661c:	4b09      	ldr	r3, [pc, #36]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 800661e:	2200      	movs	r2, #0
 8006620:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006622:	4b08      	ldr	r3, [pc, #32]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 8006624:	2200      	movs	r2, #0
 8006626:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006628:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 800662a:	2200      	movs	r2, #0
 800662c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800662e:	4805      	ldr	r0, [pc, #20]	@ (8006644 <MX_USART2_UART_Init+0x58>)
 8006630:	f002 f9de 	bl	80089f0 <HAL_UART_Init>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800663a:	f7ff fef1 	bl	8006420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800663e:	bf00      	nop
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	200000c8 	.word	0x200000c8
 8006648:	40004400 	.word	0x40004400

0800664c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b0ac      	sub	sp, #176	@ 0xb0
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006654:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	605a      	str	r2, [r3, #4]
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	60da      	str	r2, [r3, #12]
 8006662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006664:	f107 0318 	add.w	r3, r7, #24
 8006668:	2284      	movs	r2, #132	@ 0x84
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f002 ff03 	bl	8009478 <memset>
  if(uartHandle->Instance==USART2)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a31      	ldr	r2, [pc, #196]	@ (800673c <HAL_UART_MspInit+0xf0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d15b      	bne.n	8006734 <HAL_UART_MspInit+0xe8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006680:	2300      	movs	r3, #0
 8006682:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006684:	f107 0318 	add.w	r3, r7, #24
 8006688:	4618      	mov	r0, r3
 800668a:	f001 f8d7 	bl	800783c <HAL_RCCEx_PeriphCLKConfig>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006694:	f7ff fec4 	bl	8006420 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006698:	4b29      	ldr	r3, [pc, #164]	@ (8006740 <HAL_UART_MspInit+0xf4>)
 800669a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669c:	4a28      	ldr	r2, [pc, #160]	@ (8006740 <HAL_UART_MspInit+0xf4>)
 800669e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80066a4:	4b26      	ldr	r3, [pc, #152]	@ (8006740 <HAL_UART_MspInit+0xf4>)
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066b0:	4b23      	ldr	r3, [pc, #140]	@ (8006740 <HAL_UART_MspInit+0xf4>)
 80066b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b4:	4a22      	ldr	r2, [pc, #136]	@ (8006740 <HAL_UART_MspInit+0xf4>)
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80066bc:	4b20      	ldr	r3, [pc, #128]	@ (8006740 <HAL_UART_MspInit+0xf4>)
 80066be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006740 <HAL_UART_MspInit+0xf4>)
 80066ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006740 <HAL_UART_MspInit+0xf4>)
 80066ce:	f043 0308 	orr.w	r3, r3, #8
 80066d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80066d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006740 <HAL_UART_MspInit+0xf4>)
 80066d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80066e0:	2308      	movs	r3, #8
 80066e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066e6:	2302      	movs	r3, #2
 80066e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066f2:	2303      	movs	r3, #3
 80066f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80066f8:	2307      	movs	r3, #7
 80066fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006702:	4619      	mov	r1, r3
 8006704:	480f      	ldr	r0, [pc, #60]	@ (8006744 <HAL_UART_MspInit+0xf8>)
 8006706:	f000 f9b9 	bl	8006a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800670a:	2320      	movs	r3, #32
 800670c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006710:	2302      	movs	r3, #2
 8006712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006716:	2300      	movs	r3, #0
 8006718:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800671c:	2303      	movs	r3, #3
 800671e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006722:	2307      	movs	r3, #7
 8006724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006728:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800672c:	4619      	mov	r1, r3
 800672e:	4806      	ldr	r0, [pc, #24]	@ (8006748 <HAL_UART_MspInit+0xfc>)
 8006730:	f000 f9a4 	bl	8006a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006734:	bf00      	nop
 8006736:	37b0      	adds	r7, #176	@ 0xb0
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40004400 	.word	0x40004400
 8006740:	40023800 	.word	0x40023800
 8006744:	40020000 	.word	0x40020000
 8006748:	40020c00 	.word	0x40020c00

0800674c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800674c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006784 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006750:	f7ff feca 	bl	80064e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006754:	480c      	ldr	r0, [pc, #48]	@ (8006788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006756:	490d      	ldr	r1, [pc, #52]	@ (800678c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006758:	4a0d      	ldr	r2, [pc, #52]	@ (8006790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800675a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800675c:	e002      	b.n	8006764 <LoopCopyDataInit>

0800675e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800675e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006762:	3304      	adds	r3, #4

08006764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006768:	d3f9      	bcc.n	800675e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800676a:	4a0a      	ldr	r2, [pc, #40]	@ (8006794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800676c:	4c0a      	ldr	r4, [pc, #40]	@ (8006798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800676e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006770:	e001      	b.n	8006776 <LoopFillZerobss>

08006772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006774:	3204      	adds	r2, #4

08006776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006778:	d3fb      	bcc.n	8006772 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800677a:	f002 fe8b 	bl	8009494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800677e:	f7ff fd09 	bl	8006194 <main>
  bx  lr    
 8006782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006784:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800678c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8006790:	0800a618 	.word	0x0800a618
  ldr r2, =_sbss
 8006794:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8006798:	2000028c 	.word	0x2000028c

0800679c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800679c:	e7fe      	b.n	800679c <ADC_IRQHandler>

0800679e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067a2:	2003      	movs	r0, #3
 80067a4:	f000 f928 	bl	80069f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067a8:	2000      	movs	r0, #0
 80067aa:	f000 f805 	bl	80067b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067ae:	f7ff fe3d 	bl	800642c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067c0:	4b12      	ldr	r3, [pc, #72]	@ (800680c <HAL_InitTick+0x54>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b12      	ldr	r3, [pc, #72]	@ (8006810 <HAL_InitTick+0x58>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	4619      	mov	r1, r3
 80067ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80067ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f943 	bl	8006a62 <HAL_SYSTICK_Config>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e00e      	b.n	8006804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b0f      	cmp	r3, #15
 80067ea:	d80a      	bhi.n	8006802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067ec:	2200      	movs	r2, #0
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	f000 f90b 	bl	8006a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067f8:	4a06      	ldr	r2, [pc, #24]	@ (8006814 <HAL_InitTick+0x5c>)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	e000      	b.n	8006804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
}
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000000 	.word	0x20000000
 8006810:	20000008 	.word	0x20000008
 8006814:	20000004 	.word	0x20000004

08006818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800681c:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <HAL_IncTick+0x20>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	4b06      	ldr	r3, [pc, #24]	@ (800683c <HAL_IncTick+0x24>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4413      	add	r3, r2
 8006828:	4a04      	ldr	r2, [pc, #16]	@ (800683c <HAL_IncTick+0x24>)
 800682a:	6013      	str	r3, [r2, #0]
}
 800682c:	bf00      	nop
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20000008 	.word	0x20000008
 800683c:	20000150 	.word	0x20000150

08006840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  return uwTick;
 8006844:	4b03      	ldr	r3, [pc, #12]	@ (8006854 <HAL_GetTick+0x14>)
 8006846:	681b      	ldr	r3, [r3, #0]
}
 8006848:	4618      	mov	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000150 	.word	0x20000150

08006858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006868:	4b0b      	ldr	r3, [pc, #44]	@ (8006898 <__NVIC_SetPriorityGrouping+0x40>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006874:	4013      	ands	r3, r2
 8006876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006880:	4b06      	ldr	r3, [pc, #24]	@ (800689c <__NVIC_SetPriorityGrouping+0x44>)
 8006882:	4313      	orrs	r3, r2
 8006884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006886:	4a04      	ldr	r2, [pc, #16]	@ (8006898 <__NVIC_SetPriorityGrouping+0x40>)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	60d3      	str	r3, [r2, #12]
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	e000ed00 	.word	0xe000ed00
 800689c:	05fa0000 	.word	0x05fa0000

080068a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068a4:	4b04      	ldr	r3, [pc, #16]	@ (80068b8 <__NVIC_GetPriorityGrouping+0x18>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	f003 0307 	and.w	r3, r3, #7
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	e000ed00 	.word	0xe000ed00

080068bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	db0b      	blt.n	80068e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	f003 021f 	and.w	r2, r3, #31
 80068d4:	4907      	ldr	r1, [pc, #28]	@ (80068f4 <__NVIC_EnableIRQ+0x38>)
 80068d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2001      	movs	r0, #1
 80068de:	fa00 f202 	lsl.w	r2, r0, r2
 80068e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	e000e100 	.word	0xe000e100

080068f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	6039      	str	r1, [r7, #0]
 8006902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006908:	2b00      	cmp	r3, #0
 800690a:	db0a      	blt.n	8006922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	490c      	ldr	r1, [pc, #48]	@ (8006944 <__NVIC_SetPriority+0x4c>)
 8006912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006916:	0112      	lsls	r2, r2, #4
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	440b      	add	r3, r1
 800691c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006920:	e00a      	b.n	8006938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	4908      	ldr	r1, [pc, #32]	@ (8006948 <__NVIC_SetPriority+0x50>)
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	3b04      	subs	r3, #4
 8006930:	0112      	lsls	r2, r2, #4
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	440b      	add	r3, r1
 8006936:	761a      	strb	r2, [r3, #24]
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	e000e100 	.word	0xe000e100
 8006948:	e000ed00 	.word	0xe000ed00

0800694c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800694c:	b480      	push	{r7}
 800694e:	b089      	sub	sp, #36	@ 0x24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f1c3 0307 	rsb	r3, r3, #7
 8006966:	2b04      	cmp	r3, #4
 8006968:	bf28      	it	cs
 800696a:	2304      	movcs	r3, #4
 800696c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	3304      	adds	r3, #4
 8006972:	2b06      	cmp	r3, #6
 8006974:	d902      	bls.n	800697c <NVIC_EncodePriority+0x30>
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	3b03      	subs	r3, #3
 800697a:	e000      	b.n	800697e <NVIC_EncodePriority+0x32>
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006980:	f04f 32ff 	mov.w	r2, #4294967295
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43da      	mvns	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	401a      	ands	r2, r3
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006994:	f04f 31ff 	mov.w	r1, #4294967295
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	fa01 f303 	lsl.w	r3, r1, r3
 800699e:	43d9      	mvns	r1, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069a4:	4313      	orrs	r3, r2
         );
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3724      	adds	r7, #36	@ 0x24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3b01      	subs	r3, #1
 80069c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069c4:	d301      	bcc.n	80069ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069c6:	2301      	movs	r3, #1
 80069c8:	e00f      	b.n	80069ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069ca:	4a0a      	ldr	r2, [pc, #40]	@ (80069f4 <SysTick_Config+0x40>)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069d2:	210f      	movs	r1, #15
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	f7ff ff8e 	bl	80068f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069dc:	4b05      	ldr	r3, [pc, #20]	@ (80069f4 <SysTick_Config+0x40>)
 80069de:	2200      	movs	r2, #0
 80069e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069e2:	4b04      	ldr	r3, [pc, #16]	@ (80069f4 <SysTick_Config+0x40>)
 80069e4:	2207      	movs	r2, #7
 80069e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	e000e010 	.word	0xe000e010

080069f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff ff29 	bl	8006858 <__NVIC_SetPriorityGrouping>
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b086      	sub	sp, #24
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	4603      	mov	r3, r0
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a20:	f7ff ff3e 	bl	80068a0 <__NVIC_GetPriorityGrouping>
 8006a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	6978      	ldr	r0, [r7, #20]
 8006a2c:	f7ff ff8e 	bl	800694c <NVIC_EncodePriority>
 8006a30:	4602      	mov	r2, r0
 8006a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a36:	4611      	mov	r1, r2
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff ff5d 	bl	80068f8 <__NVIC_SetPriority>
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff ff31 	bl	80068bc <__NVIC_EnableIRQ>
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff ffa2 	bl	80069b4 <SysTick_Config>
 8006a70:	4603      	mov	r3, r0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b089      	sub	sp, #36	@ 0x24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	e175      	b.n	8006d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4013      	ands	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	f040 8164 	bne.w	8006d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d005      	beq.n	8006ad2 <HAL_GPIO_Init+0x56>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d130      	bne.n	8006b34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	2203      	movs	r2, #3
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b08:	2201      	movs	r2, #1
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	43db      	mvns	r3, r3
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4013      	ands	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	f003 0201 	and.w	r2, r3, #1
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f003 0303 	and.w	r3, r3, #3
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d017      	beq.n	8006b70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	43db      	mvns	r3, r3
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	4013      	ands	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d123      	bne.n	8006bc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	08da      	lsrs	r2, r3, #3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3208      	adds	r2, #8
 8006b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	220f      	movs	r2, #15
 8006b94:	fa02 f303 	lsl.w	r3, r2, r3
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	08da      	lsrs	r2, r3, #3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3208      	adds	r2, #8
 8006bbe:	69b9      	ldr	r1, [r7, #24]
 8006bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	2203      	movs	r2, #3
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f003 0203 	and.w	r2, r3, #3
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80be 	beq.w	8006d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c06:	4b66      	ldr	r3, [pc, #408]	@ (8006da0 <HAL_GPIO_Init+0x324>)
 8006c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0a:	4a65      	ldr	r2, [pc, #404]	@ (8006da0 <HAL_GPIO_Init+0x324>)
 8006c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c12:	4b63      	ldr	r3, [pc, #396]	@ (8006da0 <HAL_GPIO_Init+0x324>)
 8006c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006c1e:	4a61      	ldr	r2, [pc, #388]	@ (8006da4 <HAL_GPIO_Init+0x328>)
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	089b      	lsrs	r3, r3, #2
 8006c24:	3302      	adds	r3, #2
 8006c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	220f      	movs	r2, #15
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	43db      	mvns	r3, r3
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a58      	ldr	r2, [pc, #352]	@ (8006da8 <HAL_GPIO_Init+0x32c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d037      	beq.n	8006cba <HAL_GPIO_Init+0x23e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a57      	ldr	r2, [pc, #348]	@ (8006dac <HAL_GPIO_Init+0x330>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d031      	beq.n	8006cb6 <HAL_GPIO_Init+0x23a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a56      	ldr	r2, [pc, #344]	@ (8006db0 <HAL_GPIO_Init+0x334>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d02b      	beq.n	8006cb2 <HAL_GPIO_Init+0x236>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a55      	ldr	r2, [pc, #340]	@ (8006db4 <HAL_GPIO_Init+0x338>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d025      	beq.n	8006cae <HAL_GPIO_Init+0x232>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a54      	ldr	r2, [pc, #336]	@ (8006db8 <HAL_GPIO_Init+0x33c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01f      	beq.n	8006caa <HAL_GPIO_Init+0x22e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a53      	ldr	r2, [pc, #332]	@ (8006dbc <HAL_GPIO_Init+0x340>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d019      	beq.n	8006ca6 <HAL_GPIO_Init+0x22a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a52      	ldr	r2, [pc, #328]	@ (8006dc0 <HAL_GPIO_Init+0x344>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <HAL_GPIO_Init+0x226>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a51      	ldr	r2, [pc, #324]	@ (8006dc4 <HAL_GPIO_Init+0x348>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00d      	beq.n	8006c9e <HAL_GPIO_Init+0x222>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a50      	ldr	r2, [pc, #320]	@ (8006dc8 <HAL_GPIO_Init+0x34c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d007      	beq.n	8006c9a <HAL_GPIO_Init+0x21e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8006dcc <HAL_GPIO_Init+0x350>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d101      	bne.n	8006c96 <HAL_GPIO_Init+0x21a>
 8006c92:	2309      	movs	r3, #9
 8006c94:	e012      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006c96:	230a      	movs	r3, #10
 8006c98:	e010      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	e00e      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006c9e:	2307      	movs	r3, #7
 8006ca0:	e00c      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006ca2:	2306      	movs	r3, #6
 8006ca4:	e00a      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006ca6:	2305      	movs	r3, #5
 8006ca8:	e008      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006caa:	2304      	movs	r3, #4
 8006cac:	e006      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e004      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e002      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <HAL_GPIO_Init+0x240>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	f002 0203 	and.w	r2, r2, #3
 8006cc2:	0092      	lsls	r2, r2, #2
 8006cc4:	4093      	lsls	r3, r2
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006ccc:	4935      	ldr	r1, [pc, #212]	@ (8006da4 <HAL_GPIO_Init+0x328>)
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	089b      	lsrs	r3, r3, #2
 8006cd2:	3302      	adds	r3, #2
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cda:	4b3d      	ldr	r3, [pc, #244]	@ (8006dd0 <HAL_GPIO_Init+0x354>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cfe:	4a34      	ldr	r2, [pc, #208]	@ (8006dd0 <HAL_GPIO_Init+0x354>)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d04:	4b32      	ldr	r3, [pc, #200]	@ (8006dd0 <HAL_GPIO_Init+0x354>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	4013      	ands	r3, r2
 8006d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d28:	4a29      	ldr	r2, [pc, #164]	@ (8006dd0 <HAL_GPIO_Init+0x354>)
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d2e:	4b28      	ldr	r3, [pc, #160]	@ (8006dd0 <HAL_GPIO_Init+0x354>)
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	43db      	mvns	r3, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d52:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd0 <HAL_GPIO_Init+0x354>)
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d58:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd0 <HAL_GPIO_Init+0x354>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	43db      	mvns	r3, r3
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	4013      	ands	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d7c:	4a14      	ldr	r2, [pc, #80]	@ (8006dd0 <HAL_GPIO_Init+0x354>)
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	3301      	adds	r3, #1
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	2b0f      	cmp	r3, #15
 8006d8c:	f67f ae86 	bls.w	8006a9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	3724      	adds	r7, #36	@ 0x24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40023800 	.word	0x40023800
 8006da4:	40013800 	.word	0x40013800
 8006da8:	40020000 	.word	0x40020000
 8006dac:	40020400 	.word	0x40020400
 8006db0:	40020800 	.word	0x40020800
 8006db4:	40020c00 	.word	0x40020c00
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	40021400 	.word	0x40021400
 8006dc0:	40021800 	.word	0x40021800
 8006dc4:	40021c00 	.word	0x40021c00
 8006dc8:	40022000 	.word	0x40022000
 8006dcc:	40022400 	.word	0x40022400
 8006dd0:	40013c00 	.word	0x40013c00

08006dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	807b      	strh	r3, [r7, #2]
 8006de0:	4613      	mov	r3, r2
 8006de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006de4:	787b      	ldrb	r3, [r7, #1]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006df0:	e003      	b.n	8006dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006df2:	887b      	ldrh	r3, [r7, #2]
 8006df4:	041a      	lsls	r2, r3, #16
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	619a      	str	r2, [r3, #24]
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006e12:	4b23      	ldr	r3, [pc, #140]	@ (8006ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e16:	4a22      	ldr	r2, [pc, #136]	@ (8006ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e1e:	4b20      	ldr	r3, [pc, #128]	@ (8006ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e36:	f7ff fd03 	bl	8006840 <HAL_GetTick>
 8006e3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e3c:	e009      	b.n	8006e52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e3e:	f7ff fcff 	bl	8006840 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e4c:	d901      	bls.n	8006e52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e022      	b.n	8006e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e52:	4b14      	ldr	r3, [pc, #80]	@ (8006ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e5e:	d1ee      	bne.n	8006e3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e60:	4b10      	ldr	r3, [pc, #64]	@ (8006ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a0f      	ldr	r2, [pc, #60]	@ (8006ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e6c:	f7ff fce8 	bl	8006840 <HAL_GetTick>
 8006e70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e72:	e009      	b.n	8006e88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e74:	f7ff fce4 	bl	8006840 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e82:	d901      	bls.n	8006e88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e007      	b.n	8006e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e88:	4b06      	ldr	r3, [pc, #24]	@ (8006ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e94:	d1ee      	bne.n	8006e74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40007000 	.word	0x40007000

08006ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e291      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8087 	beq.w	8006fda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ecc:	4b96      	ldr	r3, [pc, #600]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 030c 	and.w	r3, r3, #12
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ed8:	4b93      	ldr	r3, [pc, #588]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 030c 	and.w	r3, r3, #12
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d112      	bne.n	8006f0a <HAL_RCC_OscConfig+0x62>
 8006ee4:	4b90      	ldr	r3, [pc, #576]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ef0:	d10b      	bne.n	8006f0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef2:	4b8d      	ldr	r3, [pc, #564]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d06c      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x130>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d168      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e26b      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f12:	d106      	bne.n	8006f22 <HAL_RCC_OscConfig+0x7a>
 8006f14:	4b84      	ldr	r3, [pc, #528]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a83      	ldr	r2, [pc, #524]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	e02e      	b.n	8006f80 <HAL_RCC_OscConfig+0xd8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10c      	bne.n	8006f44 <HAL_RCC_OscConfig+0x9c>
 8006f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	4b7c      	ldr	r3, [pc, #496]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a7b      	ldr	r2, [pc, #492]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e01d      	b.n	8006f80 <HAL_RCC_OscConfig+0xd8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCC_OscConfig+0xc0>
 8006f4e:	4b76      	ldr	r3, [pc, #472]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a75      	ldr	r2, [pc, #468]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	4b73      	ldr	r3, [pc, #460]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a72      	ldr	r2, [pc, #456]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e00b      	b.n	8006f80 <HAL_RCC_OscConfig+0xd8>
 8006f68:	4b6f      	ldr	r3, [pc, #444]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	4b6c      	ldr	r3, [pc, #432]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a6b      	ldr	r2, [pc, #428]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d013      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f88:	f7ff fc5a 	bl	8006840 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f90:	f7ff fc56 	bl	8006840 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b64      	cmp	r3, #100	@ 0x64
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e21f      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa2:	4b61      	ldr	r3, [pc, #388]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f0      	beq.n	8006f90 <HAL_RCC_OscConfig+0xe8>
 8006fae:	e014      	b.n	8006fda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb0:	f7ff fc46 	bl	8006840 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb8:	f7ff fc42 	bl	8006840 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b64      	cmp	r3, #100	@ 0x64
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e20b      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fca:	4b57      	ldr	r3, [pc, #348]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x110>
 8006fd6:	e000      	b.n	8006fda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d069      	beq.n	80070ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fe6:	4b50      	ldr	r3, [pc, #320]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 030c 	and.w	r3, r3, #12
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d11c      	bne.n	8007038 <HAL_RCC_OscConfig+0x190>
 8006ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d116      	bne.n	8007038 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800700a:	4b47      	ldr	r3, [pc, #284]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <HAL_RCC_OscConfig+0x17a>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d001      	beq.n	8007022 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e1df      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007022:	4b41      	ldr	r3, [pc, #260]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	493d      	ldr	r1, [pc, #244]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007032:	4313      	orrs	r3, r2
 8007034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007036:	e040      	b.n	80070ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d023      	beq.n	8007088 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007040:	4b39      	ldr	r3, [pc, #228]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a38      	ldr	r2, [pc, #224]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007046:	f043 0301 	orr.w	r3, r3, #1
 800704a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7ff fbf8 	bl	8006840 <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007054:	f7ff fbf4 	bl	8006840 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e1bd      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007066:	4b30      	ldr	r3, [pc, #192]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007072:	4b2d      	ldr	r3, [pc, #180]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	4929      	ldr	r1, [pc, #164]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007082:	4313      	orrs	r3, r2
 8007084:	600b      	str	r3, [r1, #0]
 8007086:	e018      	b.n	80070ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007088:	4b27      	ldr	r3, [pc, #156]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a26      	ldr	r2, [pc, #152]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 800708e:	f023 0301 	bic.w	r3, r3, #1
 8007092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7ff fbd4 	bl	8006840 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800709c:	f7ff fbd0 	bl	8006840 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e199      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1f0      	bne.n	800709c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d038      	beq.n	8007138 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d019      	beq.n	8007102 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ce:	4b16      	ldr	r3, [pc, #88]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 80070d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d2:	4a15      	ldr	r2, [pc, #84]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070da:	f7ff fbb1 	bl	8006840 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070e0:	e008      	b.n	80070f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070e2:	f7ff fbad 	bl	8006840 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d901      	bls.n	80070f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e176      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 80070f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0f0      	beq.n	80070e2 <HAL_RCC_OscConfig+0x23a>
 8007100:	e01a      	b.n	8007138 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007102:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007106:	4a08      	ldr	r2, [pc, #32]	@ (8007128 <HAL_RCC_OscConfig+0x280>)
 8007108:	f023 0301 	bic.w	r3, r3, #1
 800710c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710e:	f7ff fb97 	bl	8006840 <HAL_GetTick>
 8007112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007114:	e00a      	b.n	800712c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007116:	f7ff fb93 	bl	8006840 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d903      	bls.n	800712c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e15c      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
 8007128:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800712c:	4b91      	ldr	r3, [pc, #580]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 800712e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1ee      	bne.n	8007116 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80a4 	beq.w	800728e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007146:	4b8b      	ldr	r3, [pc, #556]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10d      	bne.n	800716e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007152:	4b88      	ldr	r3, [pc, #544]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007156:	4a87      	ldr	r2, [pc, #540]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800715c:	6413      	str	r3, [r2, #64]	@ 0x40
 800715e:	4b85      	ldr	r3, [pc, #532]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007166:	60bb      	str	r3, [r7, #8]
 8007168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800716a:	2301      	movs	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800716e:	4b82      	ldr	r3, [pc, #520]	@ (8007378 <HAL_RCC_OscConfig+0x4d0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007176:	2b00      	cmp	r3, #0
 8007178:	d118      	bne.n	80071ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800717a:	4b7f      	ldr	r3, [pc, #508]	@ (8007378 <HAL_RCC_OscConfig+0x4d0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a7e      	ldr	r2, [pc, #504]	@ (8007378 <HAL_RCC_OscConfig+0x4d0>)
 8007180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007186:	f7ff fb5b 	bl	8006840 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800718e:	f7ff fb57 	bl	8006840 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b64      	cmp	r3, #100	@ 0x64
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e120      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071a0:	4b75      	ldr	r3, [pc, #468]	@ (8007378 <HAL_RCC_OscConfig+0x4d0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d106      	bne.n	80071c2 <HAL_RCC_OscConfig+0x31a>
 80071b4:	4b6f      	ldr	r3, [pc, #444]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b8:	4a6e      	ldr	r2, [pc, #440]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	6713      	str	r3, [r2, #112]	@ 0x70
 80071c0:	e02d      	b.n	800721e <HAL_RCC_OscConfig+0x376>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10c      	bne.n	80071e4 <HAL_RCC_OscConfig+0x33c>
 80071ca:	4b6a      	ldr	r3, [pc, #424]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ce:	4a69      	ldr	r2, [pc, #420]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071d0:	f023 0301 	bic.w	r3, r3, #1
 80071d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80071d6:	4b67      	ldr	r3, [pc, #412]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071da:	4a66      	ldr	r2, [pc, #408]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071dc:	f023 0304 	bic.w	r3, r3, #4
 80071e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80071e2:	e01c      	b.n	800721e <HAL_RCC_OscConfig+0x376>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	2b05      	cmp	r3, #5
 80071ea:	d10c      	bne.n	8007206 <HAL_RCC_OscConfig+0x35e>
 80071ec:	4b61      	ldr	r3, [pc, #388]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f0:	4a60      	ldr	r2, [pc, #384]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071f2:	f043 0304 	orr.w	r3, r3, #4
 80071f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80071f8:	4b5e      	ldr	r3, [pc, #376]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fc:	4a5d      	ldr	r2, [pc, #372]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80071fe:	f043 0301 	orr.w	r3, r3, #1
 8007202:	6713      	str	r3, [r2, #112]	@ 0x70
 8007204:	e00b      	b.n	800721e <HAL_RCC_OscConfig+0x376>
 8007206:	4b5b      	ldr	r3, [pc, #364]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720a:	4a5a      	ldr	r2, [pc, #360]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 800720c:	f023 0301 	bic.w	r3, r3, #1
 8007210:	6713      	str	r3, [r2, #112]	@ 0x70
 8007212:	4b58      	ldr	r3, [pc, #352]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007216:	4a57      	ldr	r2, [pc, #348]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007218:	f023 0304 	bic.w	r3, r3, #4
 800721c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d015      	beq.n	8007252 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007226:	f7ff fb0b 	bl	8006840 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800722c:	e00a      	b.n	8007244 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800722e:	f7ff fb07 	bl	8006840 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800723c:	4293      	cmp	r3, r2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e0ce      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007244:	4b4b      	ldr	r3, [pc, #300]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0ee      	beq.n	800722e <HAL_RCC_OscConfig+0x386>
 8007250:	e014      	b.n	800727c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007252:	f7ff faf5 	bl	8006840 <HAL_GetTick>
 8007256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007258:	e00a      	b.n	8007270 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800725a:	f7ff faf1 	bl	8006840 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007268:	4293      	cmp	r3, r2
 800726a:	d901      	bls.n	8007270 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e0b8      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007270:	4b40      	ldr	r3, [pc, #256]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1ee      	bne.n	800725a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d105      	bne.n	800728e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007282:	4b3c      	ldr	r3, [pc, #240]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	4a3b      	ldr	r2, [pc, #236]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800728c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80a4 	beq.w	80073e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007298:	4b36      	ldr	r3, [pc, #216]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 030c 	and.w	r3, r3, #12
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d06b      	beq.n	800737c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d149      	bne.n	8007340 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ac:	4b31      	ldr	r3, [pc, #196]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a30      	ldr	r2, [pc, #192]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80072b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b8:	f7ff fac2 	bl	8006840 <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072c0:	f7ff fabe 	bl	8006840 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e087      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072d2:	4b28      	ldr	r3, [pc, #160]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f0      	bne.n	80072c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	019b      	lsls	r3, r3, #6
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	3b01      	subs	r3, #1
 80072f8:	041b      	lsls	r3, r3, #16
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	061b      	lsls	r3, r3, #24
 8007302:	4313      	orrs	r3, r2
 8007304:	4a1b      	ldr	r2, [pc, #108]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007306:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800730a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800730c:	4b19      	ldr	r3, [pc, #100]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a18      	ldr	r2, [pc, #96]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7ff fa92 	bl	8006840 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007320:	f7ff fa8e 	bl	8006840 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e057      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007332:	4b10      	ldr	r3, [pc, #64]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0x478>
 800733e:	e04f      	b.n	80073e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007340:	4b0c      	ldr	r3, [pc, #48]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a0b      	ldr	r2, [pc, #44]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800734a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7ff fa78 	bl	8006840 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007354:	f7ff fa74 	bl	8006840 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e03d      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007366:	4b03      	ldr	r3, [pc, #12]	@ (8007374 <HAL_RCC_OscConfig+0x4cc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f0      	bne.n	8007354 <HAL_RCC_OscConfig+0x4ac>
 8007372:	e035      	b.n	80073e0 <HAL_RCC_OscConfig+0x538>
 8007374:	40023800 	.word	0x40023800
 8007378:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800737c:	4b1b      	ldr	r3, [pc, #108]	@ (80073ec <HAL_RCC_OscConfig+0x544>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d028      	beq.n	80073dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007394:	429a      	cmp	r2, r3
 8007396:	d121      	bne.n	80073dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d11a      	bne.n	80073dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80073ac:	4013      	ands	r3, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d111      	bne.n	80073dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c2:	085b      	lsrs	r3, r3, #1
 80073c4:	3b01      	subs	r3, #1
 80073c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d107      	bne.n	80073dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073d8:	429a      	cmp	r2, r3
 80073da:	d001      	beq.n	80073e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40023800 	.word	0x40023800

080073f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0d0      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007408:	4b6a      	ldr	r3, [pc, #424]	@ (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d910      	bls.n	8007438 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007416:	4b67      	ldr	r3, [pc, #412]	@ (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f023 020f 	bic.w	r2, r3, #15
 800741e:	4965      	ldr	r1, [pc, #404]	@ (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	4313      	orrs	r3, r2
 8007424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007426:	4b63      	ldr	r3, [pc, #396]	@ (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d001      	beq.n	8007438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0b8      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d020      	beq.n	8007486 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007450:	4b59      	ldr	r3, [pc, #356]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	4a58      	ldr	r2, [pc, #352]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007456:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800745a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007468:	4b53      	ldr	r3, [pc, #332]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4a52      	ldr	r2, [pc, #328]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800746e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007472:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007474:	4b50      	ldr	r3, [pc, #320]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	494d      	ldr	r1, [pc, #308]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007482:	4313      	orrs	r3, r2
 8007484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d040      	beq.n	8007514 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d107      	bne.n	80074aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800749a:	4b47      	ldr	r3, [pc, #284]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d115      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e07f      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d107      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b2:	4b41      	ldr	r3, [pc, #260]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d109      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e073      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074c2:	4b3d      	ldr	r3, [pc, #244]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e06b      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074d2:	4b39      	ldr	r3, [pc, #228]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f023 0203 	bic.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4936      	ldr	r1, [pc, #216]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e4:	f7ff f9ac 	bl	8006840 <HAL_GetTick>
 80074e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ea:	e00a      	b.n	8007502 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ec:	f7ff f9a8 	bl	8006840 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e053      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007502:	4b2d      	ldr	r3, [pc, #180]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 020c 	and.w	r2, r3, #12
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	429a      	cmp	r2, r3
 8007512:	d1eb      	bne.n	80074ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007514:	4b27      	ldr	r3, [pc, #156]	@ (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d210      	bcs.n	8007544 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007522:	4b24      	ldr	r3, [pc, #144]	@ (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f023 020f 	bic.w	r2, r3, #15
 800752a:	4922      	ldr	r1, [pc, #136]	@ (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	4313      	orrs	r3, r2
 8007530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007532:	4b20      	ldr	r3, [pc, #128]	@ (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d001      	beq.n	8007544 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e032      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007550:	4b19      	ldr	r3, [pc, #100]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4916      	ldr	r1, [pc, #88]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800756e:	4b12      	ldr	r3, [pc, #72]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	490e      	ldr	r1, [pc, #56]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800757e:	4313      	orrs	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007582:	f000 f821 	bl	80075c8 <HAL_RCC_GetSysClockFreq>
 8007586:	4602      	mov	r2, r0
 8007588:	4b0b      	ldr	r3, [pc, #44]	@ (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	490a      	ldr	r1, [pc, #40]	@ (80075bc <HAL_RCC_ClockConfig+0x1cc>)
 8007594:	5ccb      	ldrb	r3, [r1, r3]
 8007596:	fa22 f303 	lsr.w	r3, r2, r3
 800759a:	4a09      	ldr	r2, [pc, #36]	@ (80075c0 <HAL_RCC_ClockConfig+0x1d0>)
 800759c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800759e:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <HAL_RCC_ClockConfig+0x1d4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff f908 	bl	80067b8 <HAL_InitTick>

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40023c00 	.word	0x40023c00
 80075b8:	40023800 	.word	0x40023800
 80075bc:	0800a200 	.word	0x0800a200
 80075c0:	20000000 	.word	0x20000000
 80075c4:	20000004 	.word	0x20000004

080075c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075cc:	b094      	sub	sp, #80	@ 0x50
 80075ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80075d4:	2300      	movs	r3, #0
 80075d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d8:	2300      	movs	r3, #0
 80075da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075e0:	4b79      	ldr	r3, [pc, #484]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 030c 	and.w	r3, r3, #12
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d00d      	beq.n	8007608 <HAL_RCC_GetSysClockFreq+0x40>
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	f200 80e1 	bhi.w	80077b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_RCC_GetSysClockFreq+0x34>
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d003      	beq.n	8007602 <HAL_RCC_GetSysClockFreq+0x3a>
 80075fa:	e0db      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075fc:	4b73      	ldr	r3, [pc, #460]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x204>)
 80075fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007600:	e0db      	b.n	80077ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007602:	4b73      	ldr	r3, [pc, #460]	@ (80077d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007604:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007606:	e0d8      	b.n	80077ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007608:	4b6f      	ldr	r3, [pc, #444]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007610:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007612:	4b6d      	ldr	r3, [pc, #436]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d063      	beq.n	80076e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800761e:	4b6a      	ldr	r3, [pc, #424]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	099b      	lsrs	r3, r3, #6
 8007624:	2200      	movs	r2, #0
 8007626:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007628:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800762a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007630:	633b      	str	r3, [r7, #48]	@ 0x30
 8007632:	2300      	movs	r3, #0
 8007634:	637b      	str	r3, [r7, #52]	@ 0x34
 8007636:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800763a:	4622      	mov	r2, r4
 800763c:	462b      	mov	r3, r5
 800763e:	f04f 0000 	mov.w	r0, #0
 8007642:	f04f 0100 	mov.w	r1, #0
 8007646:	0159      	lsls	r1, r3, #5
 8007648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800764c:	0150      	lsls	r0, r2, #5
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4621      	mov	r1, r4
 8007654:	1a51      	subs	r1, r2, r1
 8007656:	6139      	str	r1, [r7, #16]
 8007658:	4629      	mov	r1, r5
 800765a:	eb63 0301 	sbc.w	r3, r3, r1
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800766c:	4659      	mov	r1, fp
 800766e:	018b      	lsls	r3, r1, #6
 8007670:	4651      	mov	r1, sl
 8007672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007676:	4651      	mov	r1, sl
 8007678:	018a      	lsls	r2, r1, #6
 800767a:	4651      	mov	r1, sl
 800767c:	ebb2 0801 	subs.w	r8, r2, r1
 8007680:	4659      	mov	r1, fp
 8007682:	eb63 0901 	sbc.w	r9, r3, r1
 8007686:	f04f 0200 	mov.w	r2, #0
 800768a:	f04f 0300 	mov.w	r3, #0
 800768e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800769a:	4690      	mov	r8, r2
 800769c:	4699      	mov	r9, r3
 800769e:	4623      	mov	r3, r4
 80076a0:	eb18 0303 	adds.w	r3, r8, r3
 80076a4:	60bb      	str	r3, [r7, #8]
 80076a6:	462b      	mov	r3, r5
 80076a8:	eb49 0303 	adc.w	r3, r9, r3
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	f04f 0300 	mov.w	r3, #0
 80076b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80076ba:	4629      	mov	r1, r5
 80076bc:	024b      	lsls	r3, r1, #9
 80076be:	4621      	mov	r1, r4
 80076c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076c4:	4621      	mov	r1, r4
 80076c6:	024a      	lsls	r2, r1, #9
 80076c8:	4610      	mov	r0, r2
 80076ca:	4619      	mov	r1, r3
 80076cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ce:	2200      	movs	r2, #0
 80076d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076d8:	f7f8 ffda 	bl	8000690 <__aeabi_uldivmod>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4613      	mov	r3, r2
 80076e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076e4:	e058      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076e6:	4b38      	ldr	r3, [pc, #224]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	099b      	lsrs	r3, r3, #6
 80076ec:	2200      	movs	r2, #0
 80076ee:	4618      	mov	r0, r3
 80076f0:	4611      	mov	r1, r2
 80076f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80076f6:	623b      	str	r3, [r7, #32]
 80076f8:	2300      	movs	r3, #0
 80076fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80076fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007700:	4642      	mov	r2, r8
 8007702:	464b      	mov	r3, r9
 8007704:	f04f 0000 	mov.w	r0, #0
 8007708:	f04f 0100 	mov.w	r1, #0
 800770c:	0159      	lsls	r1, r3, #5
 800770e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007712:	0150      	lsls	r0, r2, #5
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4641      	mov	r1, r8
 800771a:	ebb2 0a01 	subs.w	sl, r2, r1
 800771e:	4649      	mov	r1, r9
 8007720:	eb63 0b01 	sbc.w	fp, r3, r1
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007730:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007734:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007738:	ebb2 040a 	subs.w	r4, r2, sl
 800773c:	eb63 050b 	sbc.w	r5, r3, fp
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	f04f 0300 	mov.w	r3, #0
 8007748:	00eb      	lsls	r3, r5, #3
 800774a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800774e:	00e2      	lsls	r2, r4, #3
 8007750:	4614      	mov	r4, r2
 8007752:	461d      	mov	r5, r3
 8007754:	4643      	mov	r3, r8
 8007756:	18e3      	adds	r3, r4, r3
 8007758:	603b      	str	r3, [r7, #0]
 800775a:	464b      	mov	r3, r9
 800775c:	eb45 0303 	adc.w	r3, r5, r3
 8007760:	607b      	str	r3, [r7, #4]
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800776e:	4629      	mov	r1, r5
 8007770:	028b      	lsls	r3, r1, #10
 8007772:	4621      	mov	r1, r4
 8007774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007778:	4621      	mov	r1, r4
 800777a:	028a      	lsls	r2, r1, #10
 800777c:	4610      	mov	r0, r2
 800777e:	4619      	mov	r1, r3
 8007780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007782:	2200      	movs	r2, #0
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	61fa      	str	r2, [r7, #28]
 8007788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800778c:	f7f8 ff80 	bl	8000690 <__aeabi_uldivmod>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4613      	mov	r3, r2
 8007796:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007798:	4b0b      	ldr	r3, [pc, #44]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	0c1b      	lsrs	r3, r3, #16
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	3301      	adds	r3, #1
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80077a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077b2:	e002      	b.n	80077ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077b4:	4b05      	ldr	r3, [pc, #20]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x204>)
 80077b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3750      	adds	r7, #80	@ 0x50
 80077c0:	46bd      	mov	sp, r7
 80077c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077c6:	bf00      	nop
 80077c8:	40023800 	.word	0x40023800
 80077cc:	00f42400 	.word	0x00f42400
 80077d0:	007a1200 	.word	0x007a1200

080077d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077d8:	4b03      	ldr	r3, [pc, #12]	@ (80077e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80077da:	681b      	ldr	r3, [r3, #0]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20000000 	.word	0x20000000

080077ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077f0:	f7ff fff0 	bl	80077d4 <HAL_RCC_GetHCLKFreq>
 80077f4:	4602      	mov	r2, r0
 80077f6:	4b05      	ldr	r3, [pc, #20]	@ (800780c <HAL_RCC_GetPCLK1Freq+0x20>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	0a9b      	lsrs	r3, r3, #10
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	4903      	ldr	r1, [pc, #12]	@ (8007810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007802:	5ccb      	ldrb	r3, [r1, r3]
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007808:	4618      	mov	r0, r3
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40023800 	.word	0x40023800
 8007810:	0800a210 	.word	0x0800a210

08007814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007818:	f7ff ffdc 	bl	80077d4 <HAL_RCC_GetHCLKFreq>
 800781c:	4602      	mov	r2, r0
 800781e:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	0b5b      	lsrs	r3, r3, #13
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	4903      	ldr	r1, [pc, #12]	@ (8007838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800782a:	5ccb      	ldrb	r3, [r1, r3]
 800782c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007830:	4618      	mov	r0, r3
 8007832:	bd80      	pop	{r7, pc}
 8007834:	40023800 	.word	0x40023800
 8007838:	0800a210 	.word	0x0800a210

0800783c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007854:	2300      	movs	r3, #0
 8007856:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d012      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007864:	4b69      	ldr	r3, [pc, #420]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	4a68      	ldr	r2, [pc, #416]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800786a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800786e:	6093      	str	r3, [r2, #8]
 8007870:	4b66      	ldr	r3, [pc, #408]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007878:	4964      	ldr	r1, [pc, #400]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800787a:	4313      	orrs	r3, r2
 800787c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007886:	2301      	movs	r3, #1
 8007888:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d017      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007896:	4b5d      	ldr	r3, [pc, #372]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800789c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a4:	4959      	ldr	r1, [pc, #356]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078b4:	d101      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80078b6:	2301      	movs	r3, #1
 80078b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80078c2:	2301      	movs	r3, #1
 80078c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d017      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078d2:	4b4e      	ldr	r3, [pc, #312]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e0:	494a      	ldr	r1, [pc, #296]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078f0:	d101      	bne.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80078f2:	2301      	movs	r3, #1
 80078f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078fe:	2301      	movs	r3, #1
 8007900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800790e:	2301      	movs	r3, #1
 8007910:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 808b 	beq.w	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007920:	4b3a      	ldr	r3, [pc, #232]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007924:	4a39      	ldr	r2, [pc, #228]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800792a:	6413      	str	r3, [r2, #64]	@ 0x40
 800792c:	4b37      	ldr	r3, [pc, #220]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007938:	4b35      	ldr	r3, [pc, #212]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a34      	ldr	r2, [pc, #208]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800793e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007944:	f7fe ff7c 	bl	8006840 <HAL_GetTick>
 8007948:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800794a:	e008      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800794c:	f7fe ff78 	bl	8006840 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b64      	cmp	r3, #100	@ 0x64
 8007958:	d901      	bls.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e357      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800795e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f0      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800796a:	4b28      	ldr	r3, [pc, #160]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007972:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d035      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	429a      	cmp	r2, r3
 8007986:	d02e      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007988:	4b20      	ldr	r3, [pc, #128]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007990:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007992:	4b1e      	ldr	r3, [pc, #120]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007996:	4a1d      	ldr	r2, [pc, #116]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800799c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800799e:	4b1b      	ldr	r3, [pc, #108]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80079aa:	4a18      	ldr	r2, [pc, #96]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80079b0:	4b16      	ldr	r3, [pc, #88]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d114      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079bc:	f7fe ff40 	bl	8006840 <HAL_GetTick>
 80079c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079c2:	e00a      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079c4:	f7fe ff3c 	bl	8006840 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d901      	bls.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e319      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079da:	4b0c      	ldr	r3, [pc, #48]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0ee      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079f2:	d111      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079f4:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007a00:	4b04      	ldr	r3, [pc, #16]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a02:	400b      	ands	r3, r1
 8007a04:	4901      	ldr	r1, [pc, #4]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	608b      	str	r3, [r1, #8]
 8007a0a:	e00b      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	40007000 	.word	0x40007000
 8007a14:	0ffffcff 	.word	0x0ffffcff
 8007a18:	4baa      	ldr	r3, [pc, #680]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	4aa9      	ldr	r2, [pc, #676]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a1e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007a22:	6093      	str	r3, [r2, #8]
 8007a24:	4ba7      	ldr	r3, [pc, #668]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a30:	49a4      	ldr	r1, [pc, #656]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0310 	and.w	r3, r3, #16
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d010      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a42:	4ba0      	ldr	r3, [pc, #640]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a48:	4a9e      	ldr	r2, [pc, #632]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007a52:	4b9c      	ldr	r3, [pc, #624]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a54:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5c:	4999      	ldr	r1, [pc, #612]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a70:	4b94      	ldr	r3, [pc, #592]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7e:	4991      	ldr	r1, [pc, #580]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a92:	4b8c      	ldr	r3, [pc, #560]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aa0:	4988      	ldr	r1, [pc, #544]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ab4:	4b83      	ldr	r3, [pc, #524]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ac2:	4980      	ldr	r1, [pc, #512]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007adc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae4:	4977      	ldr	r1, [pc, #476]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007af8:	4b72      	ldr	r3, [pc, #456]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afe:	f023 0203 	bic.w	r2, r3, #3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b06:	496f      	ldr	r1, [pc, #444]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b20:	f023 020c 	bic.w	r2, r3, #12
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b28:	4966      	ldr	r1, [pc, #408]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b3c:	4b61      	ldr	r3, [pc, #388]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b42:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b4a:	495e      	ldr	r1, [pc, #376]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b5e:	4b59      	ldr	r3, [pc, #356]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b64:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b6c:	4955      	ldr	r1, [pc, #340]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b80:	4b50      	ldr	r3, [pc, #320]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8e:	494d      	ldr	r1, [pc, #308]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007ba2:	4b48      	ldr	r3, [pc, #288]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb0:	4944      	ldr	r1, [pc, #272]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bd2:	493c      	ldr	r1, [pc, #240]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007be6:	4b37      	ldr	r3, [pc, #220]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bf4:	4933      	ldr	r1, [pc, #204]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c08:	4b2e      	ldr	r3, [pc, #184]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c0e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c16:	492b      	ldr	r1, [pc, #172]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d011      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c2a:	4b26      	ldr	r3, [pc, #152]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c30:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c38:	4922      	ldr	r1, [pc, #136]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c48:	d101      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0308 	and.w	r3, r3, #8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c6a:	4b16      	ldr	r3, [pc, #88]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c70:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c78:	4912      	ldr	r1, [pc, #72]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c92:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c9c:	4909      	ldr	r1, [pc, #36]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d006      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 80d9 	beq.w	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cb8:	4b02      	ldr	r3, [pc, #8]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a01      	ldr	r2, [pc, #4]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cc2:	e001      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007cc4:	40023800 	.word	0x40023800
 8007cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cca:	f7fe fdb9 	bl	8006840 <HAL_GetTick>
 8007cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cd0:	e008      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cd2:	f7fe fdb5 	bl	8006840 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b64      	cmp	r3, #100	@ 0x64
 8007cde:	d901      	bls.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e194      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1f0      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d021      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d11d      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d04:	4b64      	ldr	r3, [pc, #400]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d0a:	0c1b      	lsrs	r3, r3, #16
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d12:	4b61      	ldr	r3, [pc, #388]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d18:	0e1b      	lsrs	r3, r3, #24
 8007d1a:	f003 030f 	and.w	r3, r3, #15
 8007d1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	019a      	lsls	r2, r3, #6
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	041b      	lsls	r3, r3, #16
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	061b      	lsls	r3, r3, #24
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	071b      	lsls	r3, r3, #28
 8007d38:	4957      	ldr	r1, [pc, #348]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d54:	d00a      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d02e      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d6a:	d129      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d72:	0c1b      	lsrs	r3, r3, #16
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d7a:	4b47      	ldr	r3, [pc, #284]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d80:	0f1b      	lsrs	r3, r3, #28
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	019a      	lsls	r2, r3, #6
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	041b      	lsls	r3, r3, #16
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	061b      	lsls	r3, r3, #24
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	071b      	lsls	r3, r3, #28
 8007da0:	493d      	ldr	r1, [pc, #244]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007da8:	4b3b      	ldr	r3, [pc, #236]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dae:	f023 021f 	bic.w	r2, r3, #31
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db6:	3b01      	subs	r3, #1
 8007db8:	4937      	ldr	r1, [pc, #220]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01d      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007dcc:	4b32      	ldr	r3, [pc, #200]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd2:	0e1b      	lsrs	r3, r3, #24
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dda:	4b2f      	ldr	r3, [pc, #188]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007de0:	0f1b      	lsrs	r3, r3, #28
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	019a      	lsls	r2, r3, #6
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	041b      	lsls	r3, r3, #16
 8007df4:	431a      	orrs	r2, r3
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	061b      	lsls	r3, r3, #24
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	071b      	lsls	r3, r3, #28
 8007e00:	4925      	ldr	r1, [pc, #148]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d011      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	019a      	lsls	r2, r3, #6
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	061b      	lsls	r3, r3, #24
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	071b      	lsls	r3, r3, #28
 8007e30:	4919      	ldr	r1, [pc, #100]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e38:	4b17      	ldr	r3, [pc, #92]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a16      	ldr	r2, [pc, #88]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e44:	f7fe fcfc 	bl	8006840 <HAL_GetTick>
 8007e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e4c:	f7fe fcf8 	bl	8006840 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b64      	cmp	r3, #100	@ 0x64
 8007e58:	d901      	bls.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e0d7      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0f0      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	f040 80cd 	bne.w	800800c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e72:	4b09      	ldr	r3, [pc, #36]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a08      	ldr	r2, [pc, #32]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e7e:	f7fe fcdf 	bl	8006840 <HAL_GetTick>
 8007e82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e84:	e00a      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e86:	f7fe fcdb 	bl	8006840 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b64      	cmp	r3, #100	@ 0x64
 8007e92:	d903      	bls.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e0ba      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007e98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e9c:	4b5e      	ldr	r3, [pc, #376]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ea8:	d0ed      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d009      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02e      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d12a      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ed2:	4b51      	ldr	r3, [pc, #324]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed8:	0c1b      	lsrs	r3, r3, #16
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee6:	0f1b      	lsrs	r3, r3, #28
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	019a      	lsls	r2, r3, #6
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	061b      	lsls	r3, r3, #24
 8007f00:	431a      	orrs	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	071b      	lsls	r3, r3, #28
 8007f06:	4944      	ldr	r1, [pc, #272]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f0e:	4b42      	ldr	r3, [pc, #264]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f14:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	021b      	lsls	r3, r3, #8
 8007f20:	493d      	ldr	r1, [pc, #244]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d022      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f3c:	d11d      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f3e:	4b36      	ldr	r3, [pc, #216]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f44:	0e1b      	lsrs	r3, r3, #24
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f4c:	4b32      	ldr	r3, [pc, #200]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f52:	0f1b      	lsrs	r3, r3, #28
 8007f54:	f003 0307 	and.w	r3, r3, #7
 8007f58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	019a      	lsls	r2, r3, #6
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	041b      	lsls	r3, r3, #16
 8007f66:	431a      	orrs	r2, r3
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	061b      	lsls	r3, r3, #24
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	071b      	lsls	r3, r3, #28
 8007f72:	4929      	ldr	r1, [pc, #164]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d028      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f86:	4b24      	ldr	r3, [pc, #144]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f8c:	0e1b      	lsrs	r3, r3, #24
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f94:	4b20      	ldr	r3, [pc, #128]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f9a:	0c1b      	lsrs	r3, r3, #16
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	019a      	lsls	r2, r3, #6
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	431a      	orrs	r2, r3
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	061b      	lsls	r3, r3, #24
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	071b      	lsls	r3, r3, #28
 8007fba:	4917      	ldr	r1, [pc, #92]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007fc2:	4b15      	ldr	r3, [pc, #84]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd0:	4911      	ldr	r1, [pc, #68]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a0e      	ldr	r2, [pc, #56]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fe4:	f7fe fc2c 	bl	8006840 <HAL_GetTick>
 8007fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fea:	e008      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fec:	f7fe fc28 	bl	8006840 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b64      	cmp	r3, #100	@ 0x64
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e007      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ffe:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800800a:	d1ef      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	40023800 	.word	0x40023800

0800801c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e049      	b.n	80080c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d106      	bne.n	8008048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fe faae 	bl	80065a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3304      	adds	r3, #4
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f000 fad6 	bl	800860c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d001      	beq.n	80080e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e054      	b.n	800818e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0201 	orr.w	r2, r2, #1
 80080fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a26      	ldr	r2, [pc, #152]	@ (800819c <HAL_TIM_Base_Start_IT+0xd0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d022      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800810e:	d01d      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a22      	ldr	r2, [pc, #136]	@ (80081a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d018      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a21      	ldr	r2, [pc, #132]	@ (80081a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d013      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a1f      	ldr	r2, [pc, #124]	@ (80081a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00e      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a1e      	ldr	r2, [pc, #120]	@ (80081ac <HAL_TIM_Base_Start_IT+0xe0>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d009      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1c      	ldr	r2, [pc, #112]	@ (80081b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d004      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a1b      	ldr	r2, [pc, #108]	@ (80081b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d115      	bne.n	8008178 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	4b19      	ldr	r3, [pc, #100]	@ (80081b8 <HAL_TIM_Base_Start_IT+0xec>)
 8008154:	4013      	ands	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b06      	cmp	r3, #6
 800815c:	d015      	beq.n	800818a <HAL_TIM_Base_Start_IT+0xbe>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008164:	d011      	beq.n	800818a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f042 0201 	orr.w	r2, r2, #1
 8008174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008176:	e008      	b.n	800818a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	e000      	b.n	800818c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800
 80081a8:	40000c00 	.word	0x40000c00
 80081ac:	40010400 	.word	0x40010400
 80081b0:	40014000 	.word	0x40014000
 80081b4:	40001800 	.word	0x40001800
 80081b8:	00010007 	.word	0x00010007

080081bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a1a      	ldr	r2, [r3, #32]
 80081da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80081de:	4013      	ands	r3, r2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10f      	bne.n	8008204 <HAL_TIM_Base_Stop_IT+0x48>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6a1a      	ldr	r2, [r3, #32]
 80081ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d107      	bne.n	8008204 <HAL_TIM_Base_Stop_IT+0x48>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0201 	bic.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d020      	beq.n	800827e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01b      	beq.n	800827e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f06f 0202 	mvn.w	r2, #2
 800824e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	f003 0303 	and.w	r3, r3, #3
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f9b3 	bl	80085d0 <HAL_TIM_IC_CaptureCallback>
 800826a:	e005      	b.n	8008278 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f9a5 	bl	80085bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f9b6 	bl	80085e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b00      	cmp	r3, #0
 8008286:	d020      	beq.n	80082ca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01b      	beq.n	80082ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f06f 0204 	mvn.w	r2, #4
 800829a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f98d 	bl	80085d0 <HAL_TIM_IC_CaptureCallback>
 80082b6:	e005      	b.n	80082c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f97f 	bl	80085bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f990 	bl	80085e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f003 0308 	and.w	r3, r3, #8
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d020      	beq.n	8008316 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f003 0308 	and.w	r3, r3, #8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01b      	beq.n	8008316 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f06f 0208 	mvn.w	r2, #8
 80082e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2204      	movs	r2, #4
 80082ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	f003 0303 	and.w	r3, r3, #3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f967 	bl	80085d0 <HAL_TIM_IC_CaptureCallback>
 8008302:	e005      	b.n	8008310 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f959 	bl	80085bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f96a 	bl	80085e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f003 0310 	and.w	r3, r3, #16
 800831c:	2b00      	cmp	r3, #0
 800831e:	d020      	beq.n	8008362 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f003 0310 	and.w	r3, r3, #16
 8008326:	2b00      	cmp	r3, #0
 8008328:	d01b      	beq.n	8008362 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f06f 0210 	mvn.w	r2, #16
 8008332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2208      	movs	r2, #8
 8008338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f941 	bl	80085d0 <HAL_TIM_IC_CaptureCallback>
 800834e:	e005      	b.n	800835c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f933 	bl	80085bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f944 	bl	80085e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00c      	beq.n	8008386 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d007      	beq.n	8008386 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f06f 0201 	mvn.w	r2, #1
 800837e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7fe f83b 	bl	80063fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800838c:	2b00      	cmp	r3, #0
 800838e:	d104      	bne.n	800839a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00c      	beq.n	80083b4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d007      	beq.n	80083b4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80083ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fb0a 	bl	80089c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00c      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d007      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80083d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fb02 	bl	80089dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00c      	beq.n	80083fc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d007      	beq.n	80083fc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f8fe 	bl	80085f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f003 0320 	and.w	r3, r3, #32
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00c      	beq.n	8008420 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f003 0320 	and.w	r3, r3, #32
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0220 	mvn.w	r2, #32
 8008418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 faca 	bl	80089b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008420:	bf00      	nop
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_TIM_ConfigClockSource+0x1c>
 8008440:	2302      	movs	r3, #2
 8008442:	e0b4      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x186>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	4b56      	ldr	r3, [pc, #344]	@ (80085b8 <HAL_TIM_ConfigClockSource+0x190>)
 8008460:	4013      	ands	r3, r2
 8008462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800846a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800847c:	d03e      	beq.n	80084fc <HAL_TIM_ConfigClockSource+0xd4>
 800847e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008482:	f200 8087 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 8008486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800848a:	f000 8086 	beq.w	800859a <HAL_TIM_ConfigClockSource+0x172>
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008492:	d87f      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 8008494:	2b70      	cmp	r3, #112	@ 0x70
 8008496:	d01a      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0xa6>
 8008498:	2b70      	cmp	r3, #112	@ 0x70
 800849a:	d87b      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 800849c:	2b60      	cmp	r3, #96	@ 0x60
 800849e:	d050      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0x11a>
 80084a0:	2b60      	cmp	r3, #96	@ 0x60
 80084a2:	d877      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 80084a4:	2b50      	cmp	r3, #80	@ 0x50
 80084a6:	d03c      	beq.n	8008522 <HAL_TIM_ConfigClockSource+0xfa>
 80084a8:	2b50      	cmp	r3, #80	@ 0x50
 80084aa:	d873      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 80084ac:	2b40      	cmp	r3, #64	@ 0x40
 80084ae:	d058      	beq.n	8008562 <HAL_TIM_ConfigClockSource+0x13a>
 80084b0:	2b40      	cmp	r3, #64	@ 0x40
 80084b2:	d86f      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 80084b4:	2b30      	cmp	r3, #48	@ 0x30
 80084b6:	d064      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x15a>
 80084b8:	2b30      	cmp	r3, #48	@ 0x30
 80084ba:	d86b      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d060      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x15a>
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d867      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d05c      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x15a>
 80084c8:	2b10      	cmp	r3, #16
 80084ca:	d05a      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x15a>
 80084cc:	e062      	b.n	8008594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084de:	f000 f9bb 	bl	8008858 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	609a      	str	r2, [r3, #8]
      break;
 80084fa:	e04f      	b.n	800859c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800850c:	f000 f9a4 	bl	8008858 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800851e:	609a      	str	r2, [r3, #8]
      break;
 8008520:	e03c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800852e:	461a      	mov	r2, r3
 8008530:	f000 f918 	bl	8008764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2150      	movs	r1, #80	@ 0x50
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f971 	bl	8008822 <TIM_ITRx_SetConfig>
      break;
 8008540:	e02c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800854e:	461a      	mov	r2, r3
 8008550:	f000 f937 	bl	80087c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2160      	movs	r1, #96	@ 0x60
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f961 	bl	8008822 <TIM_ITRx_SetConfig>
      break;
 8008560:	e01c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800856e:	461a      	mov	r2, r3
 8008570:	f000 f8f8 	bl	8008764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2140      	movs	r1, #64	@ 0x40
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f951 	bl	8008822 <TIM_ITRx_SetConfig>
      break;
 8008580:	e00c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f000 f948 	bl	8008822 <TIM_ITRx_SetConfig>
      break;
 8008592:	e003      	b.n	800859c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	73fb      	strb	r3, [r7, #15]
      break;
 8008598:	e000      	b.n	800859c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800859a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	fffeff88 	.word	0xfffeff88

080085bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a46      	ldr	r2, [pc, #280]	@ (8008738 <TIM_Base_SetConfig+0x12c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d013      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800862a:	d00f      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a43      	ldr	r2, [pc, #268]	@ (800873c <TIM_Base_SetConfig+0x130>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00b      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a42      	ldr	r2, [pc, #264]	@ (8008740 <TIM_Base_SetConfig+0x134>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d007      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a41      	ldr	r2, [pc, #260]	@ (8008744 <TIM_Base_SetConfig+0x138>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d003      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a40      	ldr	r2, [pc, #256]	@ (8008748 <TIM_Base_SetConfig+0x13c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d108      	bne.n	800865e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a35      	ldr	r2, [pc, #212]	@ (8008738 <TIM_Base_SetConfig+0x12c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d02b      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800866c:	d027      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a32      	ldr	r2, [pc, #200]	@ (800873c <TIM_Base_SetConfig+0x130>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d023      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a31      	ldr	r2, [pc, #196]	@ (8008740 <TIM_Base_SetConfig+0x134>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d01f      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a30      	ldr	r2, [pc, #192]	@ (8008744 <TIM_Base_SetConfig+0x138>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d01b      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a2f      	ldr	r2, [pc, #188]	@ (8008748 <TIM_Base_SetConfig+0x13c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d017      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a2e      	ldr	r2, [pc, #184]	@ (800874c <TIM_Base_SetConfig+0x140>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d013      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a2d      	ldr	r2, [pc, #180]	@ (8008750 <TIM_Base_SetConfig+0x144>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d00f      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008754 <TIM_Base_SetConfig+0x148>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00b      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a2b      	ldr	r2, [pc, #172]	@ (8008758 <TIM_Base_SetConfig+0x14c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d007      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a2a      	ldr	r2, [pc, #168]	@ (800875c <TIM_Base_SetConfig+0x150>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d003      	beq.n	80086be <TIM_Base_SetConfig+0xb2>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a29      	ldr	r2, [pc, #164]	@ (8008760 <TIM_Base_SetConfig+0x154>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d108      	bne.n	80086d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a10      	ldr	r2, [pc, #64]	@ (8008738 <TIM_Base_SetConfig+0x12c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_Base_SetConfig+0xf8>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a12      	ldr	r2, [pc, #72]	@ (8008748 <TIM_Base_SetConfig+0x13c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d103      	bne.n	800870c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b01      	cmp	r3, #1
 800871c:	d105      	bne.n	800872a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f023 0201 	bic.w	r2, r3, #1
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	611a      	str	r2, [r3, #16]
  }
}
 800872a:	bf00      	nop
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	40010000 	.word	0x40010000
 800873c:	40000400 	.word	0x40000400
 8008740:	40000800 	.word	0x40000800
 8008744:	40000c00 	.word	0x40000c00
 8008748:	40010400 	.word	0x40010400
 800874c:	40014000 	.word	0x40014000
 8008750:	40014400 	.word	0x40014400
 8008754:	40014800 	.word	0x40014800
 8008758:	40001800 	.word	0x40001800
 800875c:	40001c00 	.word	0x40001c00
 8008760:	40002000 	.word	0x40002000

08008764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f023 0201 	bic.w	r2, r3, #1
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800878e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	4313      	orrs	r3, r2
 8008798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f023 030a 	bic.w	r3, r3, #10
 80087a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	621a      	str	r2, [r3, #32]
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b087      	sub	sp, #28
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	f023 0210 	bic.w	r2, r3, #16
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	031b      	lsls	r3, r3, #12
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	621a      	str	r2, [r3, #32]
}
 8008816:	bf00      	nop
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4313      	orrs	r3, r2
 8008840:	f043 0307 	orr.w	r3, r3, #7
 8008844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	609a      	str	r2, [r3, #8]
}
 800884c:	bf00      	nop
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	021a      	lsls	r2, r3, #8
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	431a      	orrs	r2, r3
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4313      	orrs	r3, r2
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	609a      	str	r2, [r3, #8]
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d101      	bne.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088ac:	2302      	movs	r3, #2
 80088ae:	e06d      	b.n	800898c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a30      	ldr	r2, [pc, #192]	@ (8008998 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d004      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a2f      	ldr	r2, [pc, #188]	@ (800899c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d108      	bne.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80088ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	4313      	orrs	r3, r2
 8008906:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a20      	ldr	r2, [pc, #128]	@ (8008998 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d022      	beq.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008922:	d01d      	beq.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1d      	ldr	r2, [pc, #116]	@ (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d018      	beq.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1c      	ldr	r2, [pc, #112]	@ (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d013      	beq.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a1a      	ldr	r2, [pc, #104]	@ (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d00e      	beq.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a15      	ldr	r2, [pc, #84]	@ (800899c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d009      	beq.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a16      	ldr	r2, [pc, #88]	@ (80089ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d004      	beq.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a15      	ldr	r2, [pc, #84]	@ (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10c      	bne.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008966:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	4313      	orrs	r3, r2
 8008970:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	40010000 	.word	0x40010000
 800899c:	40010400 	.word	0x40010400
 80089a0:	40000400 	.word	0x40000400
 80089a4:	40000800 	.word	0x40000800
 80089a8:	40000c00 	.word	0x40000c00
 80089ac:	40014000 	.word	0x40014000
 80089b0:	40001800 	.word	0x40001800

080089b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e040      	b.n	8008a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7fd fe1a 	bl	800664c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2224      	movs	r2, #36	@ 0x24
 8008a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 0201 	bic.w	r2, r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fb54 	bl	80090e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f8ed 	bl	8008c1c <UART_SetConfig>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d101      	bne.n	8008a4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e01b      	b.n	8008a84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0201 	orr.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fbd3 	bl	8009228 <UART_CheckIdleState>
 8008a82:	4603      	mov	r3, r0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	@ 0x28
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aa2:	2b20      	cmp	r3, #32
 8008aa4:	f040 80b5 	bne.w	8008c12 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <HAL_UART_Receive+0x28>
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e0ad      	b.n	8008c14 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2222      	movs	r2, #34	@ 0x22
 8008ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ace:	f7fd feb7 	bl	8006840 <HAL_GetTick>
 8008ad2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	88fa      	ldrh	r2, [r7, #6]
 8008ad8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	88fa      	ldrh	r2, [r7, #6]
 8008ae0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aec:	d10e      	bne.n	8008b0c <HAL_UART_Receive+0x80>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d105      	bne.n	8008b02 <HAL_UART_Receive+0x76>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008afc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008b00:	e02d      	b.n	8008b5e <HAL_UART_Receive+0xd2>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	22ff      	movs	r2, #255	@ 0xff
 8008b06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008b0a:	e028      	b.n	8008b5e <HAL_UART_Receive+0xd2>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10d      	bne.n	8008b30 <HAL_UART_Receive+0xa4>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d104      	bne.n	8008b26 <HAL_UART_Receive+0x9a>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	22ff      	movs	r2, #255	@ 0xff
 8008b20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008b24:	e01b      	b.n	8008b5e <HAL_UART_Receive+0xd2>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	227f      	movs	r2, #127	@ 0x7f
 8008b2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008b2e:	e016      	b.n	8008b5e <HAL_UART_Receive+0xd2>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b38:	d10d      	bne.n	8008b56 <HAL_UART_Receive+0xca>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d104      	bne.n	8008b4c <HAL_UART_Receive+0xc0>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	227f      	movs	r2, #127	@ 0x7f
 8008b46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008b4a:	e008      	b.n	8008b5e <HAL_UART_Receive+0xd2>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	223f      	movs	r2, #63	@ 0x3f
 8008b50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008b54:	e003      	b.n	8008b5e <HAL_UART_Receive+0xd2>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b64:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b6e:	d108      	bne.n	8008b82 <HAL_UART_Receive+0xf6>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	61bb      	str	r3, [r7, #24]
 8008b80:	e003      	b.n	8008b8a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008b8a:	e036      	b.n	8008bfa <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	2200      	movs	r2, #0
 8008b94:	2120      	movs	r1, #32
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fb9d 	bl	80092d6 <UART_WaitOnFlagUntilTimeout>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e032      	b.n	8008c14 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10c      	bne.n	8008bce <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	8a7b      	ldrh	r3, [r7, #18]
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	3302      	adds	r3, #2
 8008bca:	61bb      	str	r3, [r7, #24]
 8008bcc:	e00c      	b.n	8008be8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	8a7b      	ldrh	r3, [r7, #18]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	4013      	ands	r3, r2
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	3301      	adds	r3, #1
 8008be6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1c2      	bne.n	8008b8c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e000      	b.n	8008c14 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008c12:	2302      	movs	r3, #2
  }
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4ba6      	ldr	r3, [pc, #664]	@ (8008ee0 <UART_SetConfig+0x2c4>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	6812      	ldr	r2, [r2, #0]
 8008c4e:	6979      	ldr	r1, [r7, #20]
 8008c50:	430b      	orrs	r3, r1
 8008c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a94      	ldr	r2, [pc, #592]	@ (8008ee4 <UART_SetConfig+0x2c8>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d120      	bne.n	8008cda <UART_SetConfig+0xbe>
 8008c98:	4b93      	ldr	r3, [pc, #588]	@ (8008ee8 <UART_SetConfig+0x2cc>)
 8008c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d816      	bhi.n	8008cd4 <UART_SetConfig+0xb8>
 8008ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <UART_SetConfig+0x90>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008cbd 	.word	0x08008cbd
 8008cb0:	08008cc9 	.word	0x08008cc9
 8008cb4:	08008cc3 	.word	0x08008cc3
 8008cb8:	08008ccf 	.word	0x08008ccf
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	77fb      	strb	r3, [r7, #31]
 8008cc0:	e150      	b.n	8008f64 <UART_SetConfig+0x348>
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	77fb      	strb	r3, [r7, #31]
 8008cc6:	e14d      	b.n	8008f64 <UART_SetConfig+0x348>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	77fb      	strb	r3, [r7, #31]
 8008ccc:	e14a      	b.n	8008f64 <UART_SetConfig+0x348>
 8008cce:	2308      	movs	r3, #8
 8008cd0:	77fb      	strb	r3, [r7, #31]
 8008cd2:	e147      	b.n	8008f64 <UART_SetConfig+0x348>
 8008cd4:	2310      	movs	r3, #16
 8008cd6:	77fb      	strb	r3, [r7, #31]
 8008cd8:	e144      	b.n	8008f64 <UART_SetConfig+0x348>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a83      	ldr	r2, [pc, #524]	@ (8008eec <UART_SetConfig+0x2d0>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d132      	bne.n	8008d4a <UART_SetConfig+0x12e>
 8008ce4:	4b80      	ldr	r3, [pc, #512]	@ (8008ee8 <UART_SetConfig+0x2cc>)
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cea:	f003 030c 	and.w	r3, r3, #12
 8008cee:	2b0c      	cmp	r3, #12
 8008cf0:	d828      	bhi.n	8008d44 <UART_SetConfig+0x128>
 8008cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf8 <UART_SetConfig+0xdc>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d2d 	.word	0x08008d2d
 8008cfc:	08008d45 	.word	0x08008d45
 8008d00:	08008d45 	.word	0x08008d45
 8008d04:	08008d45 	.word	0x08008d45
 8008d08:	08008d39 	.word	0x08008d39
 8008d0c:	08008d45 	.word	0x08008d45
 8008d10:	08008d45 	.word	0x08008d45
 8008d14:	08008d45 	.word	0x08008d45
 8008d18:	08008d33 	.word	0x08008d33
 8008d1c:	08008d45 	.word	0x08008d45
 8008d20:	08008d45 	.word	0x08008d45
 8008d24:	08008d45 	.word	0x08008d45
 8008d28:	08008d3f 	.word	0x08008d3f
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	77fb      	strb	r3, [r7, #31]
 8008d30:	e118      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d32:	2302      	movs	r3, #2
 8008d34:	77fb      	strb	r3, [r7, #31]
 8008d36:	e115      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d38:	2304      	movs	r3, #4
 8008d3a:	77fb      	strb	r3, [r7, #31]
 8008d3c:	e112      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d3e:	2308      	movs	r3, #8
 8008d40:	77fb      	strb	r3, [r7, #31]
 8008d42:	e10f      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d44:	2310      	movs	r3, #16
 8008d46:	77fb      	strb	r3, [r7, #31]
 8008d48:	e10c      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a68      	ldr	r2, [pc, #416]	@ (8008ef0 <UART_SetConfig+0x2d4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d120      	bne.n	8008d96 <UART_SetConfig+0x17a>
 8008d54:	4b64      	ldr	r3, [pc, #400]	@ (8008ee8 <UART_SetConfig+0x2cc>)
 8008d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d5a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008d5e:	2b30      	cmp	r3, #48	@ 0x30
 8008d60:	d013      	beq.n	8008d8a <UART_SetConfig+0x16e>
 8008d62:	2b30      	cmp	r3, #48	@ 0x30
 8008d64:	d814      	bhi.n	8008d90 <UART_SetConfig+0x174>
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	d009      	beq.n	8008d7e <UART_SetConfig+0x162>
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	d810      	bhi.n	8008d90 <UART_SetConfig+0x174>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <UART_SetConfig+0x15c>
 8008d72:	2b10      	cmp	r3, #16
 8008d74:	d006      	beq.n	8008d84 <UART_SetConfig+0x168>
 8008d76:	e00b      	b.n	8008d90 <UART_SetConfig+0x174>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	77fb      	strb	r3, [r7, #31]
 8008d7c:	e0f2      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	77fb      	strb	r3, [r7, #31]
 8008d82:	e0ef      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d84:	2304      	movs	r3, #4
 8008d86:	77fb      	strb	r3, [r7, #31]
 8008d88:	e0ec      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d8a:	2308      	movs	r3, #8
 8008d8c:	77fb      	strb	r3, [r7, #31]
 8008d8e:	e0e9      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d90:	2310      	movs	r3, #16
 8008d92:	77fb      	strb	r3, [r7, #31]
 8008d94:	e0e6      	b.n	8008f64 <UART_SetConfig+0x348>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a56      	ldr	r2, [pc, #344]	@ (8008ef4 <UART_SetConfig+0x2d8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d120      	bne.n	8008de2 <UART_SetConfig+0x1c6>
 8008da0:	4b51      	ldr	r3, [pc, #324]	@ (8008ee8 <UART_SetConfig+0x2cc>)
 8008da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008daa:	2bc0      	cmp	r3, #192	@ 0xc0
 8008dac:	d013      	beq.n	8008dd6 <UART_SetConfig+0x1ba>
 8008dae:	2bc0      	cmp	r3, #192	@ 0xc0
 8008db0:	d814      	bhi.n	8008ddc <UART_SetConfig+0x1c0>
 8008db2:	2b80      	cmp	r3, #128	@ 0x80
 8008db4:	d009      	beq.n	8008dca <UART_SetConfig+0x1ae>
 8008db6:	2b80      	cmp	r3, #128	@ 0x80
 8008db8:	d810      	bhi.n	8008ddc <UART_SetConfig+0x1c0>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <UART_SetConfig+0x1a8>
 8008dbe:	2b40      	cmp	r3, #64	@ 0x40
 8008dc0:	d006      	beq.n	8008dd0 <UART_SetConfig+0x1b4>
 8008dc2:	e00b      	b.n	8008ddc <UART_SetConfig+0x1c0>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	77fb      	strb	r3, [r7, #31]
 8008dc8:	e0cc      	b.n	8008f64 <UART_SetConfig+0x348>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	77fb      	strb	r3, [r7, #31]
 8008dce:	e0c9      	b.n	8008f64 <UART_SetConfig+0x348>
 8008dd0:	2304      	movs	r3, #4
 8008dd2:	77fb      	strb	r3, [r7, #31]
 8008dd4:	e0c6      	b.n	8008f64 <UART_SetConfig+0x348>
 8008dd6:	2308      	movs	r3, #8
 8008dd8:	77fb      	strb	r3, [r7, #31]
 8008dda:	e0c3      	b.n	8008f64 <UART_SetConfig+0x348>
 8008ddc:	2310      	movs	r3, #16
 8008dde:	77fb      	strb	r3, [r7, #31]
 8008de0:	e0c0      	b.n	8008f64 <UART_SetConfig+0x348>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a44      	ldr	r2, [pc, #272]	@ (8008ef8 <UART_SetConfig+0x2dc>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d125      	bne.n	8008e38 <UART_SetConfig+0x21c>
 8008dec:	4b3e      	ldr	r3, [pc, #248]	@ (8008ee8 <UART_SetConfig+0x2cc>)
 8008dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dfa:	d017      	beq.n	8008e2c <UART_SetConfig+0x210>
 8008dfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e00:	d817      	bhi.n	8008e32 <UART_SetConfig+0x216>
 8008e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e06:	d00b      	beq.n	8008e20 <UART_SetConfig+0x204>
 8008e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e0c:	d811      	bhi.n	8008e32 <UART_SetConfig+0x216>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <UART_SetConfig+0x1fe>
 8008e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e16:	d006      	beq.n	8008e26 <UART_SetConfig+0x20a>
 8008e18:	e00b      	b.n	8008e32 <UART_SetConfig+0x216>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	77fb      	strb	r3, [r7, #31]
 8008e1e:	e0a1      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e20:	2302      	movs	r3, #2
 8008e22:	77fb      	strb	r3, [r7, #31]
 8008e24:	e09e      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e26:	2304      	movs	r3, #4
 8008e28:	77fb      	strb	r3, [r7, #31]
 8008e2a:	e09b      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	77fb      	strb	r3, [r7, #31]
 8008e30:	e098      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e32:	2310      	movs	r3, #16
 8008e34:	77fb      	strb	r3, [r7, #31]
 8008e36:	e095      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8008efc <UART_SetConfig+0x2e0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d125      	bne.n	8008e8e <UART_SetConfig+0x272>
 8008e42:	4b29      	ldr	r3, [pc, #164]	@ (8008ee8 <UART_SetConfig+0x2cc>)
 8008e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e50:	d017      	beq.n	8008e82 <UART_SetConfig+0x266>
 8008e52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e56:	d817      	bhi.n	8008e88 <UART_SetConfig+0x26c>
 8008e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e5c:	d00b      	beq.n	8008e76 <UART_SetConfig+0x25a>
 8008e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e62:	d811      	bhi.n	8008e88 <UART_SetConfig+0x26c>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <UART_SetConfig+0x254>
 8008e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e6c:	d006      	beq.n	8008e7c <UART_SetConfig+0x260>
 8008e6e:	e00b      	b.n	8008e88 <UART_SetConfig+0x26c>
 8008e70:	2301      	movs	r3, #1
 8008e72:	77fb      	strb	r3, [r7, #31]
 8008e74:	e076      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e76:	2302      	movs	r3, #2
 8008e78:	77fb      	strb	r3, [r7, #31]
 8008e7a:	e073      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	77fb      	strb	r3, [r7, #31]
 8008e80:	e070      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e82:	2308      	movs	r3, #8
 8008e84:	77fb      	strb	r3, [r7, #31]
 8008e86:	e06d      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	77fb      	strb	r3, [r7, #31]
 8008e8c:	e06a      	b.n	8008f64 <UART_SetConfig+0x348>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1b      	ldr	r2, [pc, #108]	@ (8008f00 <UART_SetConfig+0x2e4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d138      	bne.n	8008f0a <UART_SetConfig+0x2ee>
 8008e98:	4b13      	ldr	r3, [pc, #76]	@ (8008ee8 <UART_SetConfig+0x2cc>)
 8008e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e9e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008ea2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ea6:	d017      	beq.n	8008ed8 <UART_SetConfig+0x2bc>
 8008ea8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008eac:	d82a      	bhi.n	8008f04 <UART_SetConfig+0x2e8>
 8008eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eb2:	d00b      	beq.n	8008ecc <UART_SetConfig+0x2b0>
 8008eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eb8:	d824      	bhi.n	8008f04 <UART_SetConfig+0x2e8>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <UART_SetConfig+0x2aa>
 8008ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ec2:	d006      	beq.n	8008ed2 <UART_SetConfig+0x2b6>
 8008ec4:	e01e      	b.n	8008f04 <UART_SetConfig+0x2e8>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	77fb      	strb	r3, [r7, #31]
 8008eca:	e04b      	b.n	8008f64 <UART_SetConfig+0x348>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	77fb      	strb	r3, [r7, #31]
 8008ed0:	e048      	b.n	8008f64 <UART_SetConfig+0x348>
 8008ed2:	2304      	movs	r3, #4
 8008ed4:	77fb      	strb	r3, [r7, #31]
 8008ed6:	e045      	b.n	8008f64 <UART_SetConfig+0x348>
 8008ed8:	2308      	movs	r3, #8
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	e042      	b.n	8008f64 <UART_SetConfig+0x348>
 8008ede:	bf00      	nop
 8008ee0:	efff69f3 	.word	0xefff69f3
 8008ee4:	40011000 	.word	0x40011000
 8008ee8:	40023800 	.word	0x40023800
 8008eec:	40004400 	.word	0x40004400
 8008ef0:	40004800 	.word	0x40004800
 8008ef4:	40004c00 	.word	0x40004c00
 8008ef8:	40005000 	.word	0x40005000
 8008efc:	40011400 	.word	0x40011400
 8008f00:	40007800 	.word	0x40007800
 8008f04:	2310      	movs	r3, #16
 8008f06:	77fb      	strb	r3, [r7, #31]
 8008f08:	e02c      	b.n	8008f64 <UART_SetConfig+0x348>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a72      	ldr	r2, [pc, #456]	@ (80090d8 <UART_SetConfig+0x4bc>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d125      	bne.n	8008f60 <UART_SetConfig+0x344>
 8008f14:	4b71      	ldr	r3, [pc, #452]	@ (80090dc <UART_SetConfig+0x4c0>)
 8008f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008f1e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008f22:	d017      	beq.n	8008f54 <UART_SetConfig+0x338>
 8008f24:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008f28:	d817      	bhi.n	8008f5a <UART_SetConfig+0x33e>
 8008f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f2e:	d00b      	beq.n	8008f48 <UART_SetConfig+0x32c>
 8008f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f34:	d811      	bhi.n	8008f5a <UART_SetConfig+0x33e>
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <UART_SetConfig+0x326>
 8008f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f3e:	d006      	beq.n	8008f4e <UART_SetConfig+0x332>
 8008f40:	e00b      	b.n	8008f5a <UART_SetConfig+0x33e>
 8008f42:	2300      	movs	r3, #0
 8008f44:	77fb      	strb	r3, [r7, #31]
 8008f46:	e00d      	b.n	8008f64 <UART_SetConfig+0x348>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	77fb      	strb	r3, [r7, #31]
 8008f4c:	e00a      	b.n	8008f64 <UART_SetConfig+0x348>
 8008f4e:	2304      	movs	r3, #4
 8008f50:	77fb      	strb	r3, [r7, #31]
 8008f52:	e007      	b.n	8008f64 <UART_SetConfig+0x348>
 8008f54:	2308      	movs	r3, #8
 8008f56:	77fb      	strb	r3, [r7, #31]
 8008f58:	e004      	b.n	8008f64 <UART_SetConfig+0x348>
 8008f5a:	2310      	movs	r3, #16
 8008f5c:	77fb      	strb	r3, [r7, #31]
 8008f5e:	e001      	b.n	8008f64 <UART_SetConfig+0x348>
 8008f60:	2310      	movs	r3, #16
 8008f62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f6c:	d15b      	bne.n	8009026 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008f6e:	7ffb      	ldrb	r3, [r7, #31]
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d828      	bhi.n	8008fc6 <UART_SetConfig+0x3aa>
 8008f74:	a201      	add	r2, pc, #4	@ (adr r2, 8008f7c <UART_SetConfig+0x360>)
 8008f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7a:	bf00      	nop
 8008f7c:	08008fa1 	.word	0x08008fa1
 8008f80:	08008fa9 	.word	0x08008fa9
 8008f84:	08008fb1 	.word	0x08008fb1
 8008f88:	08008fc7 	.word	0x08008fc7
 8008f8c:	08008fb7 	.word	0x08008fb7
 8008f90:	08008fc7 	.word	0x08008fc7
 8008f94:	08008fc7 	.word	0x08008fc7
 8008f98:	08008fc7 	.word	0x08008fc7
 8008f9c:	08008fbf 	.word	0x08008fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fa0:	f7fe fc24 	bl	80077ec <HAL_RCC_GetPCLK1Freq>
 8008fa4:	61b8      	str	r0, [r7, #24]
        break;
 8008fa6:	e013      	b.n	8008fd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fa8:	f7fe fc34 	bl	8007814 <HAL_RCC_GetPCLK2Freq>
 8008fac:	61b8      	str	r0, [r7, #24]
        break;
 8008fae:	e00f      	b.n	8008fd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80090e0 <UART_SetConfig+0x4c4>)
 8008fb2:	61bb      	str	r3, [r7, #24]
        break;
 8008fb4:	e00c      	b.n	8008fd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fb6:	f7fe fb07 	bl	80075c8 <HAL_RCC_GetSysClockFreq>
 8008fba:	61b8      	str	r0, [r7, #24]
        break;
 8008fbc:	e008      	b.n	8008fd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc2:	61bb      	str	r3, [r7, #24]
        break;
 8008fc4:	e004      	b.n	8008fd0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8008fce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d074      	beq.n	80090c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	005a      	lsls	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	085b      	lsrs	r3, r3, #1
 8008fe0:	441a      	add	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	2b0f      	cmp	r3, #15
 8008ff0:	d916      	bls.n	8009020 <UART_SetConfig+0x404>
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ff8:	d212      	bcs.n	8009020 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	f023 030f 	bic.w	r3, r3, #15
 8009002:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	085b      	lsrs	r3, r3, #1
 8009008:	b29b      	uxth	r3, r3
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	b29a      	uxth	r2, r3
 8009010:	89fb      	ldrh	r3, [r7, #14]
 8009012:	4313      	orrs	r3, r2
 8009014:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	89fa      	ldrh	r2, [r7, #14]
 800901c:	60da      	str	r2, [r3, #12]
 800901e:	e04f      	b.n	80090c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	77bb      	strb	r3, [r7, #30]
 8009024:	e04c      	b.n	80090c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009026:	7ffb      	ldrb	r3, [r7, #31]
 8009028:	2b08      	cmp	r3, #8
 800902a:	d828      	bhi.n	800907e <UART_SetConfig+0x462>
 800902c:	a201      	add	r2, pc, #4	@ (adr r2, 8009034 <UART_SetConfig+0x418>)
 800902e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009032:	bf00      	nop
 8009034:	08009059 	.word	0x08009059
 8009038:	08009061 	.word	0x08009061
 800903c:	08009069 	.word	0x08009069
 8009040:	0800907f 	.word	0x0800907f
 8009044:	0800906f 	.word	0x0800906f
 8009048:	0800907f 	.word	0x0800907f
 800904c:	0800907f 	.word	0x0800907f
 8009050:	0800907f 	.word	0x0800907f
 8009054:	08009077 	.word	0x08009077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009058:	f7fe fbc8 	bl	80077ec <HAL_RCC_GetPCLK1Freq>
 800905c:	61b8      	str	r0, [r7, #24]
        break;
 800905e:	e013      	b.n	8009088 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009060:	f7fe fbd8 	bl	8007814 <HAL_RCC_GetPCLK2Freq>
 8009064:	61b8      	str	r0, [r7, #24]
        break;
 8009066:	e00f      	b.n	8009088 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009068:	4b1d      	ldr	r3, [pc, #116]	@ (80090e0 <UART_SetConfig+0x4c4>)
 800906a:	61bb      	str	r3, [r7, #24]
        break;
 800906c:	e00c      	b.n	8009088 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800906e:	f7fe faab 	bl	80075c8 <HAL_RCC_GetSysClockFreq>
 8009072:	61b8      	str	r0, [r7, #24]
        break;
 8009074:	e008      	b.n	8009088 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800907a:	61bb      	str	r3, [r7, #24]
        break;
 800907c:	e004      	b.n	8009088 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	77bb      	strb	r3, [r7, #30]
        break;
 8009086:	bf00      	nop
    }

    if (pclk != 0U)
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d018      	beq.n	80090c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	085a      	lsrs	r2, r3, #1
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	441a      	add	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b0f      	cmp	r3, #15
 80090a6:	d909      	bls.n	80090bc <UART_SetConfig+0x4a0>
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ae:	d205      	bcs.n	80090bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60da      	str	r2, [r3, #12]
 80090ba:	e001      	b.n	80090c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80090cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	40007c00 	.word	0x40007c00
 80090dc:	40023800 	.word	0x40023800
 80090e0:	00f42400 	.word	0x00f42400

080090e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f0:	f003 0308 	and.w	r3, r3, #8
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00a      	beq.n	800910e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	430a      	orrs	r2, r1
 8009150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009156:	f003 0304 	and.w	r3, r3, #4
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	430a      	orrs	r2, r1
 8009172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009178:	f003 0310 	and.w	r3, r3, #16
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00a      	beq.n	8009196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00a      	beq.n	80091b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01a      	beq.n	80091fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091e2:	d10a      	bne.n	80091fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	605a      	str	r2, [r3, #4]
  }
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08c      	sub	sp, #48	@ 0x30
 800922c:	af02      	add	r7, sp, #8
 800922e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009238:	f7fd fb02 	bl	8006840 <HAL_GetTick>
 800923c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0308 	and.w	r3, r3, #8
 8009248:	2b08      	cmp	r3, #8
 800924a:	d12e      	bne.n	80092aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800924c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	2200      	movs	r2, #0
 8009256:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f83b 	bl	80092d6 <UART_WaitOnFlagUntilTimeout>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d021      	beq.n	80092aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	60fb      	str	r3, [r7, #12]
   return(result);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800927a:	623b      	str	r3, [r7, #32]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	69b9      	ldr	r1, [r7, #24]
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	617b      	str	r3, [r7, #20]
   return(result);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e6      	bne.n	8009266 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2220      	movs	r2, #32
 800929c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e011      	b.n	80092ce <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2220      	movs	r2, #32
 80092ae:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3728      	adds	r7, #40	@ 0x28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	60f8      	str	r0, [r7, #12]
 80092de:	60b9      	str	r1, [r7, #8]
 80092e0:	603b      	str	r3, [r7, #0]
 80092e2:	4613      	mov	r3, r2
 80092e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092e6:	e04f      	b.n	8009388 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ee:	d04b      	beq.n	8009388 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092f0:	f7fd faa6 	bl	8006840 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d302      	bcc.n	8009306 <UART_WaitOnFlagUntilTimeout+0x30>
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e04e      	b.n	80093a8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d037      	beq.n	8009388 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b80      	cmp	r3, #128	@ 0x80
 800931c:	d034      	beq.n	8009388 <UART_WaitOnFlagUntilTimeout+0xb2>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b40      	cmp	r3, #64	@ 0x40
 8009322:	d031      	beq.n	8009388 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	f003 0308 	and.w	r3, r3, #8
 800932e:	2b08      	cmp	r3, #8
 8009330:	d110      	bne.n	8009354 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2208      	movs	r2, #8
 8009338:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 f838 	bl	80093b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2208      	movs	r2, #8
 8009344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e029      	b.n	80093a8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800935e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009362:	d111      	bne.n	8009388 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800936c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 f81e 	bl	80093b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e00f      	b.n	80093a8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	69da      	ldr	r2, [r3, #28]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	4013      	ands	r3, r2
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	429a      	cmp	r2, r3
 8009396:	bf0c      	ite	eq
 8009398:	2301      	moveq	r3, #1
 800939a:	2300      	movne	r3, #0
 800939c:	b2db      	uxtb	r3, r3
 800939e:	461a      	mov	r2, r3
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d0a0      	beq.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b095      	sub	sp, #84	@ 0x54
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80093d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e6      	bne.n	80093b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	f023 0301 	bic.w	r3, r3, #1
 8009400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800940a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800940c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e5      	bne.n	80093ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009422:	2b01      	cmp	r3, #1
 8009424:	d118      	bne.n	8009458 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	e853 3f00 	ldrex	r3, [r3]
 8009432:	60bb      	str	r3, [r7, #8]
   return(result);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f023 0310 	bic.w	r3, r3, #16
 800943a:	647b      	str	r3, [r7, #68]	@ 0x44
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	461a      	mov	r2, r3
 8009442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009444:	61bb      	str	r3, [r7, #24]
 8009446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6979      	ldr	r1, [r7, #20]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	613b      	str	r3, [r7, #16]
   return(result);
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e6      	bne.n	8009426 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800946c:	bf00      	nop
 800946e:	3754      	adds	r7, #84	@ 0x54
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <memset>:
 8009478:	4402      	add	r2, r0
 800947a:	4603      	mov	r3, r0
 800947c:	4293      	cmp	r3, r2
 800947e:	d100      	bne.n	8009482 <memset+0xa>
 8009480:	4770      	bx	lr
 8009482:	f803 1b01 	strb.w	r1, [r3], #1
 8009486:	e7f9      	b.n	800947c <memset+0x4>

08009488 <__errno>:
 8009488:	4b01      	ldr	r3, [pc, #4]	@ (8009490 <__errno+0x8>)
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	2000000c 	.word	0x2000000c

08009494 <__libc_init_array>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4d0d      	ldr	r5, [pc, #52]	@ (80094cc <__libc_init_array+0x38>)
 8009498:	4c0d      	ldr	r4, [pc, #52]	@ (80094d0 <__libc_init_array+0x3c>)
 800949a:	1b64      	subs	r4, r4, r5
 800949c:	10a4      	asrs	r4, r4, #2
 800949e:	2600      	movs	r6, #0
 80094a0:	42a6      	cmp	r6, r4
 80094a2:	d109      	bne.n	80094b8 <__libc_init_array+0x24>
 80094a4:	4d0b      	ldr	r5, [pc, #44]	@ (80094d4 <__libc_init_array+0x40>)
 80094a6:	4c0c      	ldr	r4, [pc, #48]	@ (80094d8 <__libc_init_array+0x44>)
 80094a8:	f000 fe8c 	bl	800a1c4 <_init>
 80094ac:	1b64      	subs	r4, r4, r5
 80094ae:	10a4      	asrs	r4, r4, #2
 80094b0:	2600      	movs	r6, #0
 80094b2:	42a6      	cmp	r6, r4
 80094b4:	d105      	bne.n	80094c2 <__libc_init_array+0x2e>
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094bc:	4798      	blx	r3
 80094be:	3601      	adds	r6, #1
 80094c0:	e7ee      	b.n	80094a0 <__libc_init_array+0xc>
 80094c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c6:	4798      	blx	r3
 80094c8:	3601      	adds	r6, #1
 80094ca:	e7f2      	b.n	80094b2 <__libc_init_array+0x1e>
 80094cc:	0800a610 	.word	0x0800a610
 80094d0:	0800a610 	.word	0x0800a610
 80094d4:	0800a610 	.word	0x0800a610
 80094d8:	0800a614 	.word	0x0800a614

080094dc <sqrtf>:
 80094dc:	b508      	push	{r3, lr}
 80094de:	ed2d 8b02 	vpush	{d8}
 80094e2:	eeb0 8a40 	vmov.f32	s16, s0
 80094e6:	f000 f97d 	bl	80097e4 <__ieee754_sqrtf>
 80094ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80094ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f2:	d60c      	bvs.n	800950e <sqrtf+0x32>
 80094f4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009514 <sqrtf+0x38>
 80094f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80094fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009500:	d505      	bpl.n	800950e <sqrtf+0x32>
 8009502:	f7ff ffc1 	bl	8009488 <__errno>
 8009506:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800950a:	2321      	movs	r3, #33	@ 0x21
 800950c:	6003      	str	r3, [r0, #0]
 800950e:	ecbd 8b02 	vpop	{d8}
 8009512:	bd08      	pop	{r3, pc}
 8009514:	00000000 	.word	0x00000000

08009518 <atanf>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	ee10 5a10 	vmov	r5, s0
 800951e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009522:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8009526:	eef0 7a40 	vmov.f32	s15, s0
 800952a:	d310      	bcc.n	800954e <atanf+0x36>
 800952c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8009530:	d904      	bls.n	800953c <atanf+0x24>
 8009532:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009536:	eeb0 0a67 	vmov.f32	s0, s15
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8009674 <atanf+0x15c>
 8009540:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8009678 <atanf+0x160>
 8009544:	2d00      	cmp	r5, #0
 8009546:	bfc8      	it	gt
 8009548:	eef0 7a47 	vmovgt.f32	s15, s14
 800954c:	e7f3      	b.n	8009536 <atanf+0x1e>
 800954e:	4b4b      	ldr	r3, [pc, #300]	@ (800967c <atanf+0x164>)
 8009550:	429c      	cmp	r4, r3
 8009552:	d810      	bhi.n	8009576 <atanf+0x5e>
 8009554:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8009558:	d20a      	bcs.n	8009570 <atanf+0x58>
 800955a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8009680 <atanf+0x168>
 800955e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009566:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800956a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956e:	dce2      	bgt.n	8009536 <atanf+0x1e>
 8009570:	f04f 33ff 	mov.w	r3, #4294967295
 8009574:	e013      	b.n	800959e <atanf+0x86>
 8009576:	f000 f8e7 	bl	8009748 <fabsf>
 800957a:	4b42      	ldr	r3, [pc, #264]	@ (8009684 <atanf+0x16c>)
 800957c:	429c      	cmp	r4, r3
 800957e:	d84f      	bhi.n	8009620 <atanf+0x108>
 8009580:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8009584:	429c      	cmp	r4, r3
 8009586:	d841      	bhi.n	800960c <atanf+0xf4>
 8009588:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800958c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009590:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009594:	2300      	movs	r3, #0
 8009596:	ee30 0a27 	vadd.f32	s0, s0, s15
 800959a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80095a4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009688 <atanf+0x170>
 80095a8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800968c <atanf+0x174>
 80095ac:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8009690 <atanf+0x178>
 80095b0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80095b4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80095b8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8009694 <atanf+0x17c>
 80095bc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80095c0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009698 <atanf+0x180>
 80095c4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80095c8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800969c <atanf+0x184>
 80095cc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80095d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80096a0 <atanf+0x188>
 80095d4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80095d8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80096a4 <atanf+0x18c>
 80095dc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80095e0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80096a8 <atanf+0x190>
 80095e4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80095e8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80096ac <atanf+0x194>
 80095ec:	eea7 5a26 	vfma.f32	s10, s14, s13
 80095f0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80096b0 <atanf+0x198>
 80095f4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80095f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80095fc:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009600:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009604:	d121      	bne.n	800964a <atanf+0x132>
 8009606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800960a:	e794      	b.n	8009536 <atanf+0x1e>
 800960c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009610:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009614:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009618:	2301      	movs	r3, #1
 800961a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800961e:	e7be      	b.n	800959e <atanf+0x86>
 8009620:	4b24      	ldr	r3, [pc, #144]	@ (80096b4 <atanf+0x19c>)
 8009622:	429c      	cmp	r4, r3
 8009624:	d80b      	bhi.n	800963e <atanf+0x126>
 8009626:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800962a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800962e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009632:	2302      	movs	r3, #2
 8009634:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800963c:	e7af      	b.n	800959e <atanf+0x86>
 800963e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009642:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009646:	2303      	movs	r3, #3
 8009648:	e7a9      	b.n	800959e <atanf+0x86>
 800964a:	4a1b      	ldr	r2, [pc, #108]	@ (80096b8 <atanf+0x1a0>)
 800964c:	491b      	ldr	r1, [pc, #108]	@ (80096bc <atanf+0x1a4>)
 800964e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009652:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009656:	edd3 6a00 	vldr	s13, [r3]
 800965a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800965e:	2d00      	cmp	r5, #0
 8009660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009664:	edd2 7a00 	vldr	s15, [r2]
 8009668:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800966c:	bfb8      	it	lt
 800966e:	eef1 7a67 	vneglt.f32	s15, s15
 8009672:	e760      	b.n	8009536 <atanf+0x1e>
 8009674:	bfc90fdb 	.word	0xbfc90fdb
 8009678:	3fc90fdb 	.word	0x3fc90fdb
 800967c:	3edfffff 	.word	0x3edfffff
 8009680:	7149f2ca 	.word	0x7149f2ca
 8009684:	3f97ffff 	.word	0x3f97ffff
 8009688:	3c8569d7 	.word	0x3c8569d7
 800968c:	3d4bda59 	.word	0x3d4bda59
 8009690:	bd6ef16b 	.word	0xbd6ef16b
 8009694:	3d886b35 	.word	0x3d886b35
 8009698:	3dba2e6e 	.word	0x3dba2e6e
 800969c:	3e124925 	.word	0x3e124925
 80096a0:	3eaaaaab 	.word	0x3eaaaaab
 80096a4:	bd15a221 	.word	0xbd15a221
 80096a8:	bd9d8795 	.word	0xbd9d8795
 80096ac:	bde38e38 	.word	0xbde38e38
 80096b0:	be4ccccd 	.word	0xbe4ccccd
 80096b4:	401bffff 	.word	0x401bffff
 80096b8:	0800a228 	.word	0x0800a228
 80096bc:	0800a218 	.word	0x0800a218

080096c0 <cosf>:
 80096c0:	ee10 3a10 	vmov	r3, s0
 80096c4:	b507      	push	{r0, r1, r2, lr}
 80096c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009740 <cosf+0x80>)
 80096c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d806      	bhi.n	80096de <cosf+0x1e>
 80096d0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8009744 <cosf+0x84>
 80096d4:	b003      	add	sp, #12
 80096d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80096da:	f000 b887 	b.w	80097ec <__kernel_cosf>
 80096de:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80096e2:	d304      	bcc.n	80096ee <cosf+0x2e>
 80096e4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80096e8:	b003      	add	sp, #12
 80096ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80096ee:	4668      	mov	r0, sp
 80096f0:	f000 f91c 	bl	800992c <__ieee754_rem_pio2f>
 80096f4:	f000 0003 	and.w	r0, r0, #3
 80096f8:	2801      	cmp	r0, #1
 80096fa:	d009      	beq.n	8009710 <cosf+0x50>
 80096fc:	2802      	cmp	r0, #2
 80096fe:	d010      	beq.n	8009722 <cosf+0x62>
 8009700:	b9b0      	cbnz	r0, 8009730 <cosf+0x70>
 8009702:	eddd 0a01 	vldr	s1, [sp, #4]
 8009706:	ed9d 0a00 	vldr	s0, [sp]
 800970a:	f000 f86f 	bl	80097ec <__kernel_cosf>
 800970e:	e7eb      	b.n	80096e8 <cosf+0x28>
 8009710:	eddd 0a01 	vldr	s1, [sp, #4]
 8009714:	ed9d 0a00 	vldr	s0, [sp]
 8009718:	f000 f8c0 	bl	800989c <__kernel_sinf>
 800971c:	eeb1 0a40 	vneg.f32	s0, s0
 8009720:	e7e2      	b.n	80096e8 <cosf+0x28>
 8009722:	eddd 0a01 	vldr	s1, [sp, #4]
 8009726:	ed9d 0a00 	vldr	s0, [sp]
 800972a:	f000 f85f 	bl	80097ec <__kernel_cosf>
 800972e:	e7f5      	b.n	800971c <cosf+0x5c>
 8009730:	eddd 0a01 	vldr	s1, [sp, #4]
 8009734:	ed9d 0a00 	vldr	s0, [sp]
 8009738:	2001      	movs	r0, #1
 800973a:	f000 f8af 	bl	800989c <__kernel_sinf>
 800973e:	e7d3      	b.n	80096e8 <cosf+0x28>
 8009740:	3f490fd8 	.word	0x3f490fd8
 8009744:	00000000 	.word	0x00000000

08009748 <fabsf>:
 8009748:	ee10 3a10 	vmov	r3, s0
 800974c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009750:	ee00 3a10 	vmov	s0, r3
 8009754:	4770      	bx	lr
	...

08009758 <sinf>:
 8009758:	ee10 3a10 	vmov	r3, s0
 800975c:	b507      	push	{r0, r1, r2, lr}
 800975e:	4a1f      	ldr	r2, [pc, #124]	@ (80097dc <sinf+0x84>)
 8009760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009764:	4293      	cmp	r3, r2
 8009766:	d807      	bhi.n	8009778 <sinf+0x20>
 8009768:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80097e0 <sinf+0x88>
 800976c:	2000      	movs	r0, #0
 800976e:	b003      	add	sp, #12
 8009770:	f85d eb04 	ldr.w	lr, [sp], #4
 8009774:	f000 b892 	b.w	800989c <__kernel_sinf>
 8009778:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800977c:	d304      	bcc.n	8009788 <sinf+0x30>
 800977e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009782:	b003      	add	sp, #12
 8009784:	f85d fb04 	ldr.w	pc, [sp], #4
 8009788:	4668      	mov	r0, sp
 800978a:	f000 f8cf 	bl	800992c <__ieee754_rem_pio2f>
 800978e:	f000 0003 	and.w	r0, r0, #3
 8009792:	2801      	cmp	r0, #1
 8009794:	d00a      	beq.n	80097ac <sinf+0x54>
 8009796:	2802      	cmp	r0, #2
 8009798:	d00f      	beq.n	80097ba <sinf+0x62>
 800979a:	b9c0      	cbnz	r0, 80097ce <sinf+0x76>
 800979c:	eddd 0a01 	vldr	s1, [sp, #4]
 80097a0:	ed9d 0a00 	vldr	s0, [sp]
 80097a4:	2001      	movs	r0, #1
 80097a6:	f000 f879 	bl	800989c <__kernel_sinf>
 80097aa:	e7ea      	b.n	8009782 <sinf+0x2a>
 80097ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80097b0:	ed9d 0a00 	vldr	s0, [sp]
 80097b4:	f000 f81a 	bl	80097ec <__kernel_cosf>
 80097b8:	e7e3      	b.n	8009782 <sinf+0x2a>
 80097ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80097be:	ed9d 0a00 	vldr	s0, [sp]
 80097c2:	2001      	movs	r0, #1
 80097c4:	f000 f86a 	bl	800989c <__kernel_sinf>
 80097c8:	eeb1 0a40 	vneg.f32	s0, s0
 80097cc:	e7d9      	b.n	8009782 <sinf+0x2a>
 80097ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80097d2:	ed9d 0a00 	vldr	s0, [sp]
 80097d6:	f000 f809 	bl	80097ec <__kernel_cosf>
 80097da:	e7f5      	b.n	80097c8 <sinf+0x70>
 80097dc:	3f490fd8 	.word	0x3f490fd8
 80097e0:	00000000 	.word	0x00000000

080097e4 <__ieee754_sqrtf>:
 80097e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80097e8:	4770      	bx	lr
	...

080097ec <__kernel_cosf>:
 80097ec:	ee10 3a10 	vmov	r3, s0
 80097f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80097f8:	eef0 6a40 	vmov.f32	s13, s0
 80097fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009800:	d204      	bcs.n	800980c <__kernel_cosf+0x20>
 8009802:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8009806:	ee17 2a90 	vmov	r2, s15
 800980a:	b342      	cbz	r2, 800985e <__kernel_cosf+0x72>
 800980c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009810:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800987c <__kernel_cosf+0x90>
 8009814:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8009880 <__kernel_cosf+0x94>
 8009818:	4a1a      	ldr	r2, [pc, #104]	@ (8009884 <__kernel_cosf+0x98>)
 800981a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800981e:	4293      	cmp	r3, r2
 8009820:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009888 <__kernel_cosf+0x9c>
 8009824:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009828:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800988c <__kernel_cosf+0xa0>
 800982c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009830:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009890 <__kernel_cosf+0xa4>
 8009834:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009838:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8009894 <__kernel_cosf+0xa8>
 800983c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009840:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8009844:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009848:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800984c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8009850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009854:	d804      	bhi.n	8009860 <__kernel_cosf+0x74>
 8009856:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800985a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800985e:	4770      	bx	lr
 8009860:	4a0d      	ldr	r2, [pc, #52]	@ (8009898 <__kernel_cosf+0xac>)
 8009862:	4293      	cmp	r3, r2
 8009864:	bf9a      	itte	ls
 8009866:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800986a:	ee07 3a10 	vmovls	s14, r3
 800986e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8009872:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800987a:	e7ec      	b.n	8009856 <__kernel_cosf+0x6a>
 800987c:	ad47d74e 	.word	0xad47d74e
 8009880:	310f74f6 	.word	0x310f74f6
 8009884:	3e999999 	.word	0x3e999999
 8009888:	b493f27c 	.word	0xb493f27c
 800988c:	37d00d01 	.word	0x37d00d01
 8009890:	bab60b61 	.word	0xbab60b61
 8009894:	3d2aaaab 	.word	0x3d2aaaab
 8009898:	3f480000 	.word	0x3f480000

0800989c <__kernel_sinf>:
 800989c:	ee10 3a10 	vmov	r3, s0
 80098a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098a4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80098a8:	d204      	bcs.n	80098b4 <__kernel_sinf+0x18>
 80098aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80098ae:	ee17 3a90 	vmov	r3, s15
 80098b2:	b35b      	cbz	r3, 800990c <__kernel_sinf+0x70>
 80098b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80098b8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009910 <__kernel_sinf+0x74>
 80098bc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009914 <__kernel_sinf+0x78>
 80098c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80098c4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009918 <__kernel_sinf+0x7c>
 80098c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80098cc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800991c <__kernel_sinf+0x80>
 80098d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80098d4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009920 <__kernel_sinf+0x84>
 80098d8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80098dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80098e0:	b930      	cbnz	r0, 80098f0 <__kernel_sinf+0x54>
 80098e2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8009924 <__kernel_sinf+0x88>
 80098e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80098ea:	eea6 0a26 	vfma.f32	s0, s12, s13
 80098ee:	4770      	bx	lr
 80098f0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80098f4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80098f8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80098fc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009900:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009928 <__kernel_sinf+0x8c>
 8009904:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009908:	ee30 0a60 	vsub.f32	s0, s0, s1
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	2f2ec9d3 	.word	0x2f2ec9d3
 8009914:	b2d72f34 	.word	0xb2d72f34
 8009918:	3638ef1b 	.word	0x3638ef1b
 800991c:	b9500d01 	.word	0xb9500d01
 8009920:	3c088889 	.word	0x3c088889
 8009924:	be2aaaab 	.word	0xbe2aaaab
 8009928:	3e2aaaab 	.word	0x3e2aaaab

0800992c <__ieee754_rem_pio2f>:
 800992c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992e:	ee10 6a10 	vmov	r6, s0
 8009932:	4b88      	ldr	r3, [pc, #544]	@ (8009b54 <__ieee754_rem_pio2f+0x228>)
 8009934:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009938:	429d      	cmp	r5, r3
 800993a:	b087      	sub	sp, #28
 800993c:	4604      	mov	r4, r0
 800993e:	d805      	bhi.n	800994c <__ieee754_rem_pio2f+0x20>
 8009940:	2300      	movs	r3, #0
 8009942:	ed80 0a00 	vstr	s0, [r0]
 8009946:	6043      	str	r3, [r0, #4]
 8009948:	2000      	movs	r0, #0
 800994a:	e022      	b.n	8009992 <__ieee754_rem_pio2f+0x66>
 800994c:	4b82      	ldr	r3, [pc, #520]	@ (8009b58 <__ieee754_rem_pio2f+0x22c>)
 800994e:	429d      	cmp	r5, r3
 8009950:	d83a      	bhi.n	80099c8 <__ieee754_rem_pio2f+0x9c>
 8009952:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009956:	2e00      	cmp	r6, #0
 8009958:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009b5c <__ieee754_rem_pio2f+0x230>
 800995c:	4a80      	ldr	r2, [pc, #512]	@ (8009b60 <__ieee754_rem_pio2f+0x234>)
 800995e:	f023 030f 	bic.w	r3, r3, #15
 8009962:	dd18      	ble.n	8009996 <__ieee754_rem_pio2f+0x6a>
 8009964:	4293      	cmp	r3, r2
 8009966:	ee70 7a47 	vsub.f32	s15, s0, s14
 800996a:	bf09      	itett	eq
 800996c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009b64 <__ieee754_rem_pio2f+0x238>
 8009970:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009b68 <__ieee754_rem_pio2f+0x23c>
 8009974:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009b6c <__ieee754_rem_pio2f+0x240>
 8009978:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800997c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009980:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009984:	ed80 7a00 	vstr	s14, [r0]
 8009988:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800998c:	edc0 7a01 	vstr	s15, [r0, #4]
 8009990:	2001      	movs	r0, #1
 8009992:	b007      	add	sp, #28
 8009994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009996:	4293      	cmp	r3, r2
 8009998:	ee70 7a07 	vadd.f32	s15, s0, s14
 800999c:	bf09      	itett	eq
 800999e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009b64 <__ieee754_rem_pio2f+0x238>
 80099a2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009b68 <__ieee754_rem_pio2f+0x23c>
 80099a6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009b6c <__ieee754_rem_pio2f+0x240>
 80099aa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80099ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80099b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099b6:	ed80 7a00 	vstr	s14, [r0]
 80099ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099be:	edc0 7a01 	vstr	s15, [r0, #4]
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295
 80099c6:	e7e4      	b.n	8009992 <__ieee754_rem_pio2f+0x66>
 80099c8:	4b69      	ldr	r3, [pc, #420]	@ (8009b70 <__ieee754_rem_pio2f+0x244>)
 80099ca:	429d      	cmp	r5, r3
 80099cc:	d873      	bhi.n	8009ab6 <__ieee754_rem_pio2f+0x18a>
 80099ce:	f7ff febb 	bl	8009748 <fabsf>
 80099d2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009b74 <__ieee754_rem_pio2f+0x248>
 80099d6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80099da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80099de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099e6:	ee17 0a90 	vmov	r0, s15
 80099ea:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009b5c <__ieee754_rem_pio2f+0x230>
 80099ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 80099f2:	281f      	cmp	r0, #31
 80099f4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009b68 <__ieee754_rem_pio2f+0x23c>
 80099f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fc:	eeb1 6a47 	vneg.f32	s12, s14
 8009a00:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009a04:	ee16 1a90 	vmov	r1, s13
 8009a08:	dc09      	bgt.n	8009a1e <__ieee754_rem_pio2f+0xf2>
 8009a0a:	4a5b      	ldr	r2, [pc, #364]	@ (8009b78 <__ieee754_rem_pio2f+0x24c>)
 8009a0c:	1e47      	subs	r7, r0, #1
 8009a0e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009a12:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8009a16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d107      	bne.n	8009a2e <__ieee754_rem_pio2f+0x102>
 8009a1e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8009a22:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8009a26:	2a08      	cmp	r2, #8
 8009a28:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009a2c:	dc14      	bgt.n	8009a58 <__ieee754_rem_pio2f+0x12c>
 8009a2e:	6021      	str	r1, [r4, #0]
 8009a30:	ed94 7a00 	vldr	s14, [r4]
 8009a34:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009a38:	2e00      	cmp	r6, #0
 8009a3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a3e:	ed84 0a01 	vstr	s0, [r4, #4]
 8009a42:	daa6      	bge.n	8009992 <__ieee754_rem_pio2f+0x66>
 8009a44:	eeb1 7a47 	vneg.f32	s14, s14
 8009a48:	eeb1 0a40 	vneg.f32	s0, s0
 8009a4c:	ed84 7a00 	vstr	s14, [r4]
 8009a50:	ed84 0a01 	vstr	s0, [r4, #4]
 8009a54:	4240      	negs	r0, r0
 8009a56:	e79c      	b.n	8009992 <__ieee754_rem_pio2f+0x66>
 8009a58:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009b64 <__ieee754_rem_pio2f+0x238>
 8009a5c:	eef0 6a40 	vmov.f32	s13, s0
 8009a60:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009a64:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009a68:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009a6c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009b6c <__ieee754_rem_pio2f+0x240>
 8009a70:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009a74:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009a78:	ee15 2a90 	vmov	r2, s11
 8009a7c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009a80:	1a5b      	subs	r3, r3, r1
 8009a82:	2b19      	cmp	r3, #25
 8009a84:	dc04      	bgt.n	8009a90 <__ieee754_rem_pio2f+0x164>
 8009a86:	edc4 5a00 	vstr	s11, [r4]
 8009a8a:	eeb0 0a66 	vmov.f32	s0, s13
 8009a8e:	e7cf      	b.n	8009a30 <__ieee754_rem_pio2f+0x104>
 8009a90:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009b7c <__ieee754_rem_pio2f+0x250>
 8009a94:	eeb0 0a66 	vmov.f32	s0, s13
 8009a98:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009a9c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009aa0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009b80 <__ieee754_rem_pio2f+0x254>
 8009aa4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009aa8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009aac:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009ab0:	ed84 7a00 	vstr	s14, [r4]
 8009ab4:	e7bc      	b.n	8009a30 <__ieee754_rem_pio2f+0x104>
 8009ab6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8009aba:	d306      	bcc.n	8009aca <__ieee754_rem_pio2f+0x19e>
 8009abc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009ac0:	edc0 7a01 	vstr	s15, [r0, #4]
 8009ac4:	edc0 7a00 	vstr	s15, [r0]
 8009ac8:	e73e      	b.n	8009948 <__ieee754_rem_pio2f+0x1c>
 8009aca:	15ea      	asrs	r2, r5, #23
 8009acc:	3a86      	subs	r2, #134	@ 0x86
 8009ace:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009ada:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009b84 <__ieee754_rem_pio2f+0x258>
 8009ade:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ae2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ae6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009aee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009af2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009af6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009afa:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009afe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b0a:	edcd 7a05 	vstr	s15, [sp, #20]
 8009b0e:	d11e      	bne.n	8009b4e <__ieee754_rem_pio2f+0x222>
 8009b10:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b18:	bf0c      	ite	eq
 8009b1a:	2301      	moveq	r3, #1
 8009b1c:	2302      	movne	r3, #2
 8009b1e:	491a      	ldr	r1, [pc, #104]	@ (8009b88 <__ieee754_rem_pio2f+0x25c>)
 8009b20:	9101      	str	r1, [sp, #4]
 8009b22:	2102      	movs	r1, #2
 8009b24:	9100      	str	r1, [sp, #0]
 8009b26:	a803      	add	r0, sp, #12
 8009b28:	4621      	mov	r1, r4
 8009b2a:	f000 f82f 	bl	8009b8c <__kernel_rem_pio2f>
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	f6bf af2f 	bge.w	8009992 <__ieee754_rem_pio2f+0x66>
 8009b34:	edd4 7a00 	vldr	s15, [r4]
 8009b38:	eef1 7a67 	vneg.f32	s15, s15
 8009b3c:	edc4 7a00 	vstr	s15, [r4]
 8009b40:	edd4 7a01 	vldr	s15, [r4, #4]
 8009b44:	eef1 7a67 	vneg.f32	s15, s15
 8009b48:	edc4 7a01 	vstr	s15, [r4, #4]
 8009b4c:	e782      	b.n	8009a54 <__ieee754_rem_pio2f+0x128>
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e7e5      	b.n	8009b1e <__ieee754_rem_pio2f+0x1f2>
 8009b52:	bf00      	nop
 8009b54:	3f490fd8 	.word	0x3f490fd8
 8009b58:	4016cbe3 	.word	0x4016cbe3
 8009b5c:	3fc90f80 	.word	0x3fc90f80
 8009b60:	3fc90fd0 	.word	0x3fc90fd0
 8009b64:	37354400 	.word	0x37354400
 8009b68:	37354443 	.word	0x37354443
 8009b6c:	2e85a308 	.word	0x2e85a308
 8009b70:	43490f80 	.word	0x43490f80
 8009b74:	3f22f984 	.word	0x3f22f984
 8009b78:	0800a238 	.word	0x0800a238
 8009b7c:	2e85a300 	.word	0x2e85a300
 8009b80:	248d3132 	.word	0x248d3132
 8009b84:	43800000 	.word	0x43800000
 8009b88:	0800a2b8 	.word	0x0800a2b8

08009b8c <__kernel_rem_pio2f>:
 8009b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	ed2d 8b04 	vpush	{d8-d9}
 8009b94:	b0d9      	sub	sp, #356	@ 0x164
 8009b96:	4690      	mov	r8, r2
 8009b98:	9001      	str	r0, [sp, #4]
 8009b9a:	4ab9      	ldr	r2, [pc, #740]	@ (8009e80 <__kernel_rem_pio2f+0x2f4>)
 8009b9c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009b9e:	f118 0f04 	cmn.w	r8, #4
 8009ba2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8009ba6:	460f      	mov	r7, r1
 8009ba8:	f103 3bff 	add.w	fp, r3, #4294967295
 8009bac:	db27      	blt.n	8009bfe <__kernel_rem_pio2f+0x72>
 8009bae:	f1b8 0203 	subs.w	r2, r8, #3
 8009bb2:	bf48      	it	mi
 8009bb4:	f108 0204 	addmi.w	r2, r8, #4
 8009bb8:	10d2      	asrs	r2, r2, #3
 8009bba:	1c55      	adds	r5, r2, #1
 8009bbc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009bbe:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8009e90 <__kernel_rem_pio2f+0x304>
 8009bc2:	00e8      	lsls	r0, r5, #3
 8009bc4:	eba2 060b 	sub.w	r6, r2, fp
 8009bc8:	9002      	str	r0, [sp, #8]
 8009bca:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8009bce:	eb0a 0c0b 	add.w	ip, sl, fp
 8009bd2:	ac1c      	add	r4, sp, #112	@ 0x70
 8009bd4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009bd8:	2000      	movs	r0, #0
 8009bda:	4560      	cmp	r0, ip
 8009bdc:	dd11      	ble.n	8009c02 <__kernel_rem_pio2f+0x76>
 8009bde:	a91c      	add	r1, sp, #112	@ 0x70
 8009be0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009be4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009be8:	f04f 0c00 	mov.w	ip, #0
 8009bec:	45d4      	cmp	ip, sl
 8009bee:	dc27      	bgt.n	8009c40 <__kernel_rem_pio2f+0xb4>
 8009bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009bf4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8009e90 <__kernel_rem_pio2f+0x304>
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	2400      	movs	r4, #0
 8009bfc:	e016      	b.n	8009c2c <__kernel_rem_pio2f+0xa0>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	e7db      	b.n	8009bba <__kernel_rem_pio2f+0x2e>
 8009c02:	42c6      	cmn	r6, r0
 8009c04:	bf5d      	ittte	pl
 8009c06:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009c0a:	ee07 1a90 	vmovpl	s15, r1
 8009c0e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009c12:	eef0 7a47 	vmovmi.f32	s15, s14
 8009c16:	ece4 7a01 	vstmia	r4!, {s15}
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	e7dd      	b.n	8009bda <__kernel_rem_pio2f+0x4e>
 8009c1e:	ecfe 6a01 	vldmia	lr!, {s13}
 8009c22:	ed96 7a00 	vldr	s14, [r6]
 8009c26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009c2a:	3401      	adds	r4, #1
 8009c2c:	455c      	cmp	r4, fp
 8009c2e:	f1a6 0604 	sub.w	r6, r6, #4
 8009c32:	ddf4      	ble.n	8009c1e <__kernel_rem_pio2f+0x92>
 8009c34:	ece9 7a01 	vstmia	r9!, {s15}
 8009c38:	f10c 0c01 	add.w	ip, ip, #1
 8009c3c:	3004      	adds	r0, #4
 8009c3e:	e7d5      	b.n	8009bec <__kernel_rem_pio2f+0x60>
 8009c40:	a908      	add	r1, sp, #32
 8009c42:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c46:	9104      	str	r1, [sp, #16]
 8009c48:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009c4a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8009e8c <__kernel_rem_pio2f+0x300>
 8009c4e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8009e88 <__kernel_rem_pio2f+0x2fc>
 8009c52:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009c56:	9203      	str	r2, [sp, #12]
 8009c58:	4654      	mov	r4, sl
 8009c5a:	00a2      	lsls	r2, r4, #2
 8009c5c:	9205      	str	r2, [sp, #20]
 8009c5e:	aa58      	add	r2, sp, #352	@ 0x160
 8009c60:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009c64:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8009c68:	a944      	add	r1, sp, #272	@ 0x110
 8009c6a:	aa08      	add	r2, sp, #32
 8009c6c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009c70:	4694      	mov	ip, r2
 8009c72:	4626      	mov	r6, r4
 8009c74:	2e00      	cmp	r6, #0
 8009c76:	f1a0 0004 	sub.w	r0, r0, #4
 8009c7a:	dc4c      	bgt.n	8009d16 <__kernel_rem_pio2f+0x18a>
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c82:	f000 f9f5 	bl	800a070 <scalbnf>
 8009c86:	eeb0 8a40 	vmov.f32	s16, s0
 8009c8a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8009c8e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009c92:	f000 fa53 	bl	800a13c <floorf>
 8009c96:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8009c9a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ca4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009ca8:	ee17 9a90 	vmov	r9, s15
 8009cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cb0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009cb4:	dd41      	ble.n	8009d3a <__kernel_rem_pio2f+0x1ae>
 8009cb6:	f104 3cff 	add.w	ip, r4, #4294967295
 8009cba:	a908      	add	r1, sp, #32
 8009cbc:	f1c5 0e08 	rsb	lr, r5, #8
 8009cc0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8009cc4:	fa46 f00e 	asr.w	r0, r6, lr
 8009cc8:	4481      	add	r9, r0
 8009cca:	fa00 f00e 	lsl.w	r0, r0, lr
 8009cce:	1a36      	subs	r6, r6, r0
 8009cd0:	f1c5 0007 	rsb	r0, r5, #7
 8009cd4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8009cd8:	4106      	asrs	r6, r0
 8009cda:	2e00      	cmp	r6, #0
 8009cdc:	dd3c      	ble.n	8009d58 <__kernel_rem_pio2f+0x1cc>
 8009cde:	f04f 0e00 	mov.w	lr, #0
 8009ce2:	f109 0901 	add.w	r9, r9, #1
 8009ce6:	4670      	mov	r0, lr
 8009ce8:	4574      	cmp	r4, lr
 8009cea:	dc68      	bgt.n	8009dbe <__kernel_rem_pio2f+0x232>
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	dd03      	ble.n	8009cf8 <__kernel_rem_pio2f+0x16c>
 8009cf0:	2d01      	cmp	r5, #1
 8009cf2:	d074      	beq.n	8009dde <__kernel_rem_pio2f+0x252>
 8009cf4:	2d02      	cmp	r5, #2
 8009cf6:	d07d      	beq.n	8009df4 <__kernel_rem_pio2f+0x268>
 8009cf8:	2e02      	cmp	r6, #2
 8009cfa:	d12d      	bne.n	8009d58 <__kernel_rem_pio2f+0x1cc>
 8009cfc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009d00:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009d04:	b340      	cbz	r0, 8009d58 <__kernel_rem_pio2f+0x1cc>
 8009d06:	4628      	mov	r0, r5
 8009d08:	9306      	str	r3, [sp, #24]
 8009d0a:	f000 f9b1 	bl	800a070 <scalbnf>
 8009d0e:	9b06      	ldr	r3, [sp, #24]
 8009d10:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009d14:	e020      	b.n	8009d58 <__kernel_rem_pio2f+0x1cc>
 8009d16:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009d1a:	3e01      	subs	r6, #1
 8009d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d24:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009d28:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009d2c:	ecac 0a01 	vstmia	ip!, {s0}
 8009d30:	ed90 0a00 	vldr	s0, [r0]
 8009d34:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009d38:	e79c      	b.n	8009c74 <__kernel_rem_pio2f+0xe8>
 8009d3a:	d105      	bne.n	8009d48 <__kernel_rem_pio2f+0x1bc>
 8009d3c:	1e60      	subs	r0, r4, #1
 8009d3e:	a908      	add	r1, sp, #32
 8009d40:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8009d44:	11f6      	asrs	r6, r6, #7
 8009d46:	e7c8      	b.n	8009cda <__kernel_rem_pio2f+0x14e>
 8009d48:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009d4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d54:	da31      	bge.n	8009dba <__kernel_rem_pio2f+0x22e>
 8009d56:	2600      	movs	r6, #0
 8009d58:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d60:	f040 8098 	bne.w	8009e94 <__kernel_rem_pio2f+0x308>
 8009d64:	1e60      	subs	r0, r4, #1
 8009d66:	2200      	movs	r2, #0
 8009d68:	4550      	cmp	r0, sl
 8009d6a:	da4b      	bge.n	8009e04 <__kernel_rem_pio2f+0x278>
 8009d6c:	2a00      	cmp	r2, #0
 8009d6e:	d065      	beq.n	8009e3c <__kernel_rem_pio2f+0x2b0>
 8009d70:	3c01      	subs	r4, #1
 8009d72:	ab08      	add	r3, sp, #32
 8009d74:	3d08      	subs	r5, #8
 8009d76:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0f8      	beq.n	8009d70 <__kernel_rem_pio2f+0x1e4>
 8009d7e:	4628      	mov	r0, r5
 8009d80:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009d84:	f000 f974 	bl	800a070 <scalbnf>
 8009d88:	1c63      	adds	r3, r4, #1
 8009d8a:	aa44      	add	r2, sp, #272	@ 0x110
 8009d8c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8009e8c <__kernel_rem_pio2f+0x300>
 8009d90:	0099      	lsls	r1, r3, #2
 8009d92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009d96:	4623      	mov	r3, r4
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f280 80a9 	bge.w	8009ef0 <__kernel_rem_pio2f+0x364>
 8009d9e:	4623      	mov	r3, r4
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f2c0 80c7 	blt.w	8009f34 <__kernel_rem_pio2f+0x3a8>
 8009da6:	aa44      	add	r2, sp, #272	@ 0x110
 8009da8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8009dac:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009e84 <__kernel_rem_pio2f+0x2f8>
 8009db0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009e90 <__kernel_rem_pio2f+0x304>
 8009db4:	2000      	movs	r0, #0
 8009db6:	1ae2      	subs	r2, r4, r3
 8009db8:	e0b1      	b.n	8009f1e <__kernel_rem_pio2f+0x392>
 8009dba:	2602      	movs	r6, #2
 8009dbc:	e78f      	b.n	8009cde <__kernel_rem_pio2f+0x152>
 8009dbe:	f852 1b04 	ldr.w	r1, [r2], #4
 8009dc2:	b948      	cbnz	r0, 8009dd8 <__kernel_rem_pio2f+0x24c>
 8009dc4:	b121      	cbz	r1, 8009dd0 <__kernel_rem_pio2f+0x244>
 8009dc6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8009dca:	f842 1c04 	str.w	r1, [r2, #-4]
 8009dce:	2101      	movs	r1, #1
 8009dd0:	f10e 0e01 	add.w	lr, lr, #1
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	e787      	b.n	8009ce8 <__kernel_rem_pio2f+0x15c>
 8009dd8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8009ddc:	e7f5      	b.n	8009dca <__kernel_rem_pio2f+0x23e>
 8009dde:	f104 3cff 	add.w	ip, r4, #4294967295
 8009de2:	aa08      	add	r2, sp, #32
 8009de4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009de8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009dec:	a908      	add	r1, sp, #32
 8009dee:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009df2:	e781      	b.n	8009cf8 <__kernel_rem_pio2f+0x16c>
 8009df4:	f104 3cff 	add.w	ip, r4, #4294967295
 8009df8:	aa08      	add	r2, sp, #32
 8009dfa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009dfe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009e02:	e7f3      	b.n	8009dec <__kernel_rem_pio2f+0x260>
 8009e04:	a908      	add	r1, sp, #32
 8009e06:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009e0a:	3801      	subs	r0, #1
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	e7ab      	b.n	8009d68 <__kernel_rem_pio2f+0x1dc>
 8009e10:	3201      	adds	r2, #1
 8009e12:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	d0fa      	beq.n	8009e10 <__kernel_rem_pio2f+0x284>
 8009e1a:	9905      	ldr	r1, [sp, #20]
 8009e1c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8009e20:	eb0d 0001 	add.w	r0, sp, r1
 8009e24:	18e6      	adds	r6, r4, r3
 8009e26:	a91c      	add	r1, sp, #112	@ 0x70
 8009e28:	f104 0c01 	add.w	ip, r4, #1
 8009e2c:	384c      	subs	r0, #76	@ 0x4c
 8009e2e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8009e32:	4422      	add	r2, r4
 8009e34:	4562      	cmp	r2, ip
 8009e36:	da04      	bge.n	8009e42 <__kernel_rem_pio2f+0x2b6>
 8009e38:	4614      	mov	r4, r2
 8009e3a:	e70e      	b.n	8009c5a <__kernel_rem_pio2f+0xce>
 8009e3c:	9804      	ldr	r0, [sp, #16]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	e7e7      	b.n	8009e12 <__kernel_rem_pio2f+0x286>
 8009e42:	9903      	ldr	r1, [sp, #12]
 8009e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009e48:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8009e4c:	9105      	str	r1, [sp, #20]
 8009e4e:	ee07 1a90 	vmov	s15, r1
 8009e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e56:	2400      	movs	r4, #0
 8009e58:	ece6 7a01 	vstmia	r6!, {s15}
 8009e5c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009e90 <__kernel_rem_pio2f+0x304>
 8009e60:	46b1      	mov	r9, r6
 8009e62:	455c      	cmp	r4, fp
 8009e64:	dd04      	ble.n	8009e70 <__kernel_rem_pio2f+0x2e4>
 8009e66:	ece0 7a01 	vstmia	r0!, {s15}
 8009e6a:	f10c 0c01 	add.w	ip, ip, #1
 8009e6e:	e7e1      	b.n	8009e34 <__kernel_rem_pio2f+0x2a8>
 8009e70:	ecfe 6a01 	vldmia	lr!, {s13}
 8009e74:	ed39 7a01 	vldmdb	r9!, {s14}
 8009e78:	3401      	adds	r4, #1
 8009e7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009e7e:	e7f0      	b.n	8009e62 <__kernel_rem_pio2f+0x2d6>
 8009e80:	0800a5fc 	.word	0x0800a5fc
 8009e84:	0800a5d0 	.word	0x0800a5d0
 8009e88:	43800000 	.word	0x43800000
 8009e8c:	3b800000 	.word	0x3b800000
 8009e90:	00000000 	.word	0x00000000
 8009e94:	9b02      	ldr	r3, [sp, #8]
 8009e96:	eeb0 0a48 	vmov.f32	s0, s16
 8009e9a:	eba3 0008 	sub.w	r0, r3, r8
 8009e9e:	f000 f8e7 	bl	800a070 <scalbnf>
 8009ea2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009e88 <__kernel_rem_pio2f+0x2fc>
 8009ea6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eae:	db19      	blt.n	8009ee4 <__kernel_rem_pio2f+0x358>
 8009eb0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8009e8c <__kernel_rem_pio2f+0x300>
 8009eb4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009eb8:	aa08      	add	r2, sp, #32
 8009eba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ebe:	3508      	adds	r5, #8
 8009ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ec4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ecc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009ed0:	ee10 3a10 	vmov	r3, s0
 8009ed4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009ed8:	ee17 3a90 	vmov	r3, s15
 8009edc:	3401      	adds	r4, #1
 8009ede:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009ee2:	e74c      	b.n	8009d7e <__kernel_rem_pio2f+0x1f2>
 8009ee4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009ee8:	aa08      	add	r2, sp, #32
 8009eea:	ee10 3a10 	vmov	r3, s0
 8009eee:	e7f6      	b.n	8009ede <__kernel_rem_pio2f+0x352>
 8009ef0:	a808      	add	r0, sp, #32
 8009ef2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009ef6:	9001      	str	r0, [sp, #4]
 8009ef8:	ee07 0a90 	vmov	s15, r0
 8009efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f00:	3b01      	subs	r3, #1
 8009f02:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009f06:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009f0a:	ed62 7a01 	vstmdb	r2!, {s15}
 8009f0e:	e743      	b.n	8009d98 <__kernel_rem_pio2f+0x20c>
 8009f10:	ecfc 6a01 	vldmia	ip!, {s13}
 8009f14:	ecb5 7a01 	vldmia	r5!, {s14}
 8009f18:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	4550      	cmp	r0, sl
 8009f20:	dc01      	bgt.n	8009f26 <__kernel_rem_pio2f+0x39a>
 8009f22:	4282      	cmp	r2, r0
 8009f24:	daf4      	bge.n	8009f10 <__kernel_rem_pio2f+0x384>
 8009f26:	a858      	add	r0, sp, #352	@ 0x160
 8009f28:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009f2c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8009f30:	3b01      	subs	r3, #1
 8009f32:	e735      	b.n	8009da0 <__kernel_rem_pio2f+0x214>
 8009f34:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	dc09      	bgt.n	8009f4e <__kernel_rem_pio2f+0x3c2>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dc2b      	bgt.n	8009f96 <__kernel_rem_pio2f+0x40a>
 8009f3e:	d044      	beq.n	8009fca <__kernel_rem_pio2f+0x43e>
 8009f40:	f009 0007 	and.w	r0, r9, #7
 8009f44:	b059      	add	sp, #356	@ 0x164
 8009f46:	ecbd 8b04 	vpop	{d8-d9}
 8009f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d1f5      	bne.n	8009f40 <__kernel_rem_pio2f+0x3b4>
 8009f54:	aa30      	add	r2, sp, #192	@ 0xc0
 8009f56:	1f0b      	subs	r3, r1, #4
 8009f58:	4413      	add	r3, r2
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f1a2 0204 	sub.w	r2, r2, #4
 8009f64:	dc52      	bgt.n	800a00c <__kernel_rem_pio2f+0x480>
 8009f66:	4622      	mov	r2, r4
 8009f68:	2a01      	cmp	r2, #1
 8009f6a:	f1a3 0304 	sub.w	r3, r3, #4
 8009f6e:	dc5d      	bgt.n	800a02c <__kernel_rem_pio2f+0x4a0>
 8009f70:	ab30      	add	r3, sp, #192	@ 0xc0
 8009f72:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8009e90 <__kernel_rem_pio2f+0x304>
 8009f76:	440b      	add	r3, r1
 8009f78:	2c01      	cmp	r4, #1
 8009f7a:	dc67      	bgt.n	800a04c <__kernel_rem_pio2f+0x4c0>
 8009f7c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009f80:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009f84:	2e00      	cmp	r6, #0
 8009f86:	d167      	bne.n	800a058 <__kernel_rem_pio2f+0x4cc>
 8009f88:	edc7 6a00 	vstr	s13, [r7]
 8009f8c:	ed87 7a01 	vstr	s14, [r7, #4]
 8009f90:	edc7 7a02 	vstr	s15, [r7, #8]
 8009f94:	e7d4      	b.n	8009f40 <__kernel_rem_pio2f+0x3b4>
 8009f96:	ab30      	add	r3, sp, #192	@ 0xc0
 8009f98:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8009e90 <__kernel_rem_pio2f+0x304>
 8009f9c:	440b      	add	r3, r1
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	da24      	bge.n	8009fee <__kernel_rem_pio2f+0x462>
 8009fa4:	b34e      	cbz	r6, 8009ffa <__kernel_rem_pio2f+0x46e>
 8009fa6:	eef1 7a47 	vneg.f32	s15, s14
 8009faa:	edc7 7a00 	vstr	s15, [r7]
 8009fae:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8009fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fb6:	aa31      	add	r2, sp, #196	@ 0xc4
 8009fb8:	2301      	movs	r3, #1
 8009fba:	429c      	cmp	r4, r3
 8009fbc:	da20      	bge.n	800a000 <__kernel_rem_pio2f+0x474>
 8009fbe:	b10e      	cbz	r6, 8009fc4 <__kernel_rem_pio2f+0x438>
 8009fc0:	eef1 7a67 	vneg.f32	s15, s15
 8009fc4:	edc7 7a01 	vstr	s15, [r7, #4]
 8009fc8:	e7ba      	b.n	8009f40 <__kernel_rem_pio2f+0x3b4>
 8009fca:	ab30      	add	r3, sp, #192	@ 0xc0
 8009fcc:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8009e90 <__kernel_rem_pio2f+0x304>
 8009fd0:	440b      	add	r3, r1
 8009fd2:	2c00      	cmp	r4, #0
 8009fd4:	da05      	bge.n	8009fe2 <__kernel_rem_pio2f+0x456>
 8009fd6:	b10e      	cbz	r6, 8009fdc <__kernel_rem_pio2f+0x450>
 8009fd8:	eef1 7a67 	vneg.f32	s15, s15
 8009fdc:	edc7 7a00 	vstr	s15, [r7]
 8009fe0:	e7ae      	b.n	8009f40 <__kernel_rem_pio2f+0x3b4>
 8009fe2:	ed33 7a01 	vldmdb	r3!, {s14}
 8009fe6:	3c01      	subs	r4, #1
 8009fe8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fec:	e7f1      	b.n	8009fd2 <__kernel_rem_pio2f+0x446>
 8009fee:	ed73 7a01 	vldmdb	r3!, {s15}
 8009ff2:	3a01      	subs	r2, #1
 8009ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ff8:	e7d2      	b.n	8009fa0 <__kernel_rem_pio2f+0x414>
 8009ffa:	eef0 7a47 	vmov.f32	s15, s14
 8009ffe:	e7d4      	b.n	8009faa <__kernel_rem_pio2f+0x41e>
 800a000:	ecb2 7a01 	vldmia	r2!, {s14}
 800a004:	3301      	adds	r3, #1
 800a006:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a00a:	e7d6      	b.n	8009fba <__kernel_rem_pio2f+0x42e>
 800a00c:	edd2 7a00 	vldr	s15, [r2]
 800a010:	edd2 6a01 	vldr	s13, [r2, #4]
 800a014:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a018:	3801      	subs	r0, #1
 800a01a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a01e:	ed82 7a00 	vstr	s14, [r2]
 800a022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a026:	edc2 7a01 	vstr	s15, [r2, #4]
 800a02a:	e798      	b.n	8009f5e <__kernel_rem_pio2f+0x3d2>
 800a02c:	edd3 7a00 	vldr	s15, [r3]
 800a030:	edd3 6a01 	vldr	s13, [r3, #4]
 800a034:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a038:	3a01      	subs	r2, #1
 800a03a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a03e:	ed83 7a00 	vstr	s14, [r3]
 800a042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a046:	edc3 7a01 	vstr	s15, [r3, #4]
 800a04a:	e78d      	b.n	8009f68 <__kernel_rem_pio2f+0x3dc>
 800a04c:	ed33 7a01 	vldmdb	r3!, {s14}
 800a050:	3c01      	subs	r4, #1
 800a052:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a056:	e78f      	b.n	8009f78 <__kernel_rem_pio2f+0x3ec>
 800a058:	eef1 6a66 	vneg.f32	s13, s13
 800a05c:	eeb1 7a47 	vneg.f32	s14, s14
 800a060:	edc7 6a00 	vstr	s13, [r7]
 800a064:	ed87 7a01 	vstr	s14, [r7, #4]
 800a068:	eef1 7a67 	vneg.f32	s15, s15
 800a06c:	e790      	b.n	8009f90 <__kernel_rem_pio2f+0x404>
 800a06e:	bf00      	nop

0800a070 <scalbnf>:
 800a070:	ee10 3a10 	vmov	r3, s0
 800a074:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a078:	d02b      	beq.n	800a0d2 <scalbnf+0x62>
 800a07a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a07e:	d302      	bcc.n	800a086 <scalbnf+0x16>
 800a080:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a084:	4770      	bx	lr
 800a086:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a08a:	d123      	bne.n	800a0d4 <scalbnf+0x64>
 800a08c:	4b24      	ldr	r3, [pc, #144]	@ (800a120 <scalbnf+0xb0>)
 800a08e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a124 <scalbnf+0xb4>
 800a092:	4298      	cmp	r0, r3
 800a094:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a098:	db17      	blt.n	800a0ca <scalbnf+0x5a>
 800a09a:	ee10 3a10 	vmov	r3, s0
 800a09e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a0a2:	3a19      	subs	r2, #25
 800a0a4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a0a8:	4288      	cmp	r0, r1
 800a0aa:	dd15      	ble.n	800a0d8 <scalbnf+0x68>
 800a0ac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a128 <scalbnf+0xb8>
 800a0b0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a12c <scalbnf+0xbc>
 800a0b4:	ee10 3a10 	vmov	r3, s0
 800a0b8:	eeb0 7a67 	vmov.f32	s14, s15
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfb8      	it	lt
 800a0c0:	eef0 7a66 	vmovlt.f32	s15, s13
 800a0c4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a0c8:	4770      	bx	lr
 800a0ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a130 <scalbnf+0xc0>
 800a0ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a0d2:	4770      	bx	lr
 800a0d4:	0dd2      	lsrs	r2, r2, #23
 800a0d6:	e7e5      	b.n	800a0a4 <scalbnf+0x34>
 800a0d8:	4410      	add	r0, r2
 800a0da:	28fe      	cmp	r0, #254	@ 0xfe
 800a0dc:	dce6      	bgt.n	800a0ac <scalbnf+0x3c>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	dd06      	ble.n	800a0f0 <scalbnf+0x80>
 800a0e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a0e6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a0ea:	ee00 3a10 	vmov	s0, r3
 800a0ee:	4770      	bx	lr
 800a0f0:	f110 0f16 	cmn.w	r0, #22
 800a0f4:	da09      	bge.n	800a10a <scalbnf+0x9a>
 800a0f6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a130 <scalbnf+0xc0>
 800a0fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a134 <scalbnf+0xc4>
 800a0fe:	ee10 3a10 	vmov	r3, s0
 800a102:	eeb0 7a67 	vmov.f32	s14, s15
 800a106:	2b00      	cmp	r3, #0
 800a108:	e7d9      	b.n	800a0be <scalbnf+0x4e>
 800a10a:	3019      	adds	r0, #25
 800a10c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a110:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a114:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a138 <scalbnf+0xc8>
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	e7d7      	b.n	800a0ce <scalbnf+0x5e>
 800a11e:	bf00      	nop
 800a120:	ffff3cb0 	.word	0xffff3cb0
 800a124:	4c000000 	.word	0x4c000000
 800a128:	7149f2ca 	.word	0x7149f2ca
 800a12c:	f149f2ca 	.word	0xf149f2ca
 800a130:	0da24260 	.word	0x0da24260
 800a134:	8da24260 	.word	0x8da24260
 800a138:	33000000 	.word	0x33000000

0800a13c <floorf>:
 800a13c:	ee10 3a10 	vmov	r3, s0
 800a140:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a144:	3a7f      	subs	r2, #127	@ 0x7f
 800a146:	2a16      	cmp	r2, #22
 800a148:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a14c:	dc2b      	bgt.n	800a1a6 <floorf+0x6a>
 800a14e:	2a00      	cmp	r2, #0
 800a150:	da12      	bge.n	800a178 <floorf+0x3c>
 800a152:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a1b8 <floorf+0x7c>
 800a156:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a15a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a162:	dd06      	ble.n	800a172 <floorf+0x36>
 800a164:	2b00      	cmp	r3, #0
 800a166:	da24      	bge.n	800a1b2 <floorf+0x76>
 800a168:	2900      	cmp	r1, #0
 800a16a:	4b14      	ldr	r3, [pc, #80]	@ (800a1bc <floorf+0x80>)
 800a16c:	bf08      	it	eq
 800a16e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800a172:	ee00 3a10 	vmov	s0, r3
 800a176:	4770      	bx	lr
 800a178:	4911      	ldr	r1, [pc, #68]	@ (800a1c0 <floorf+0x84>)
 800a17a:	4111      	asrs	r1, r2
 800a17c:	420b      	tst	r3, r1
 800a17e:	d0fa      	beq.n	800a176 <floorf+0x3a>
 800a180:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800a1b8 <floorf+0x7c>
 800a184:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a188:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a190:	ddef      	ble.n	800a172 <floorf+0x36>
 800a192:	2b00      	cmp	r3, #0
 800a194:	bfbe      	ittt	lt
 800a196:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800a19a:	fa40 f202 	asrlt.w	r2, r0, r2
 800a19e:	189b      	addlt	r3, r3, r2
 800a1a0:	ea23 0301 	bic.w	r3, r3, r1
 800a1a4:	e7e5      	b.n	800a172 <floorf+0x36>
 800a1a6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a1aa:	d3e4      	bcc.n	800a176 <floorf+0x3a>
 800a1ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1b0:	4770      	bx	lr
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e7dd      	b.n	800a172 <floorf+0x36>
 800a1b6:	bf00      	nop
 800a1b8:	7149f2ca 	.word	0x7149f2ca
 800a1bc:	bf800000 	.word	0xbf800000
 800a1c0:	007fffff 	.word	0x007fffff

0800a1c4 <_init>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	bf00      	nop
 800a1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ca:	bc08      	pop	{r3}
 800a1cc:	469e      	mov	lr, r3
 800a1ce:	4770      	bx	lr

0800a1d0 <_fini>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr
